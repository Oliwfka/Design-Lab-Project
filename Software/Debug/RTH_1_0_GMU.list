
RTH_1_0_GMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef8  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800814c  0800814c  0000914c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800816c  0800816c  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000000  0800816c  0800816c  0000a00c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800816c  0800816c  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800816c  0800816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008170  08008170  00009170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008174  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000000c  08008180  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08008180  0000a3c8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001616a  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292e  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00022ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca2  00000000  00000000  00023b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cbe8  00000000  00000000  0002483a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ff6  00000000  00000000  00051422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011bbd3  00000000  00000000  00066418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181feb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004684  00000000  00000000  00182030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001866b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	08008134 	.word	0x08008134

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	08008134 	.word	0x08008134

08000294 <ADC_Init>:
uint16_t ADC_Values[10][2];
uint32_t GearPostmp;
uint32_t Airtmp;

void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_Calibration_Start(hadc,ADC_SINGLE_ENDED);
 800029c:	217f      	movs	r1, #127	@ 0x7f
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f003 f810 	bl	80032c4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t*)ADC_Values, 20);
 80002a4:	2214      	movs	r2, #20
 80002a6:	4904      	ldr	r1, [pc, #16]	@ (80002b8 <ADC_Init+0x24>)
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f001 fefb 	bl	80020a4 <HAL_ADC_Start_DMA>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000028 	.word	0x20000028

080002bc <GetGearPosValue>:
uint16_t GetGearPosValue(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
	GearPostmp = 0;
 80002c2:	4b11      	ldr	r3, [pc, #68]	@ (8000308 <GetGearPosValue+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i<=9; i++)
 80002c8:	2300      	movs	r3, #0
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	e00c      	b.n	80002e8 <GetGearPosValue+0x2c>
	{
		GearPostmp += ADC_Values[i][0];
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4a0e      	ldr	r2, [pc, #56]	@ (800030c <GetGearPosValue+0x50>)
 80002d2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80002d6:	461a      	mov	r2, r3
 80002d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <GetGearPosValue+0x4c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4413      	add	r3, r2
 80002de:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <GetGearPosValue+0x4c>)
 80002e0:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i<=9; i++)
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	3301      	adds	r3, #1
 80002e6:	71fb      	strb	r3, [r7, #7]
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	2b09      	cmp	r3, #9
 80002ec:	d9ef      	bls.n	80002ce <GetGearPosValue+0x12>
	}
	return GearPostmp/10;
 80002ee:	4b06      	ldr	r3, [pc, #24]	@ (8000308 <GetGearPosValue+0x4c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a07      	ldr	r2, [pc, #28]	@ (8000310 <GetGearPosValue+0x54>)
 80002f4:	fba2 2303 	umull	r2, r3, r2, r3
 80002f8:	08db      	lsrs	r3, r3, #3
 80002fa:	b29b      	uxth	r3, r3
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	20000050 	.word	0x20000050
 800030c:	20000028 	.word	0x20000028
 8000310:	cccccccd 	.word	0xcccccccd

08000314 <GetAirValue>:
uint16_t GetAirValue(void)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
	Airtmp = 0;
 800031a:	4b12      	ldr	r3, [pc, #72]	@ (8000364 <GetAirValue+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i<=9; i++)
 8000320:	2300      	movs	r3, #0
 8000322:	71fb      	strb	r3, [r7, #7]
 8000324:	e00d      	b.n	8000342 <GetAirValue+0x2e>
	{
		Airtmp += ADC_Values[i][1];
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	4a0f      	ldr	r2, [pc, #60]	@ (8000368 <GetAirValue+0x54>)
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	4413      	add	r3, r2
 800032e:	885b      	ldrh	r3, [r3, #2]
 8000330:	461a      	mov	r2, r3
 8000332:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <GetAirValue+0x50>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4413      	add	r3, r2
 8000338:	4a0a      	ldr	r2, [pc, #40]	@ (8000364 <GetAirValue+0x50>)
 800033a:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i<=9; i++)
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	3301      	adds	r3, #1
 8000340:	71fb      	strb	r3, [r7, #7]
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	2b09      	cmp	r3, #9
 8000346:	d9ee      	bls.n	8000326 <GetAirValue+0x12>
	}
	return Airtmp/10;
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <GetAirValue+0x50>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a07      	ldr	r2, [pc, #28]	@ (800036c <GetAirValue+0x58>)
 800034e:	fba2 2303 	umull	r2, r3, r2, r3
 8000352:	08db      	lsrs	r3, r3, #3
 8000354:	b29b      	uxth	r3, r3
}
 8000356:	4618      	mov	r0, r3
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000054 	.word	0x20000054
 8000368:	20000028 	.word	0x20000028
 800036c:	cccccccd 	.word	0xcccccccd

08000370 <AppInit>:
#include "App.h"
Gearbox_t gearbox;
uint32_t CANSendFrameTick = 0;

void AppInit(ADC_HandleTypeDef* hadc, FDCAN_HandleTypeDef* hfdcan)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	ADC_Init(hadc);
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f7ff ff8a 	bl	8000294 <ADC_Init>
	CAN_Init(hfdcan);
 8000380:	6838      	ldr	r0, [r7, #0]
 8000382:	f000 f83d 	bl	8000400 <CAN_Init>
	gearboxInit(&gearbox);
 8000386:	4803      	ldr	r0, [pc, #12]	@ (8000394 <AppInit+0x24>)
 8000388:	f000 f9a0 	bl	80006cc <gearboxInit>
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000058 	.word	0x20000058

08000398 <AppHandle>:

void AppHandle(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	while(1)
	{
		gearbox.gearPosADC = GetGearPosValue();
 800039c:	f7ff ff8e 	bl	80002bc <GetGearPosValue>
 80003a0:	4603      	mov	r3, r0
 80003a2:	461a      	mov	r2, r3
 80003a4:	4b10      	ldr	r3, [pc, #64]	@ (80003e8 <AppHandle+0x50>)
 80003a6:	801a      	strh	r2, [r3, #0]
		gearbox.air_press = GetAirValue();
 80003a8:	f7ff ffb4 	bl	8000314 <GetAirValue>
 80003ac:	4603      	mov	r3, r0
 80003ae:	461a      	mov	r2, r3
 80003b0:	4b0d      	ldr	r3, [pc, #52]	@ (80003e8 <AppHandle+0x50>)
 80003b2:	849a      	strh	r2, [r3, #36]	@ 0x24
		updateGear(&gearbox);
 80003b4:	480c      	ldr	r0, [pc, #48]	@ (80003e8 <AppHandle+0x50>)
 80003b6:	f000 f9bf 	bl	8000738 <updateGear>
		AutoshiftCheck();
 80003ba:	f000 f819 	bl	80003f0 <AutoshiftCheck>
		processCallback(&gearbox);
 80003be:	480a      	ldr	r0, [pc, #40]	@ (80003e8 <AppHandle+0x50>)
 80003c0:	f000 fa2c 	bl	800081c <processCallback>
		if((HAL_GetTick() - CANSendFrameTick) > 2)
 80003c4:	f001 fa82 	bl	80018cc <HAL_GetTick>
 80003c8:	4602      	mov	r2, r0
 80003ca:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <AppHandle+0x54>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	1ad3      	subs	r3, r2, r3
 80003d0:	2b02      	cmp	r3, #2
 80003d2:	d9e3      	bls.n	800039c <AppHandle+0x4>
		{
			CANSendGMUFrames(&gearbox);
 80003d4:	4804      	ldr	r0, [pc, #16]	@ (80003e8 <AppHandle+0x50>)
 80003d6:	f000 f847 	bl	8000468 <CANSendGMUFrames>
			CANSendFrameTick = HAL_GetTick();
 80003da:	f001 fa77 	bl	80018cc <HAL_GetTick>
 80003de:	4603      	mov	r3, r0
 80003e0:	4a02      	ldr	r2, [pc, #8]	@ (80003ec <AppHandle+0x54>)
 80003e2:	6013      	str	r3, [r2, #0]
	{
 80003e4:	e7da      	b.n	800039c <AppHandle+0x4>
 80003e6:	bf00      	nop
 80003e8:	20000058 	.word	0x20000058
 80003ec:	20000080 	.word	0x20000080

080003f0 <AutoshiftCheck>:
		}
	}
}

void AutoshiftCheck(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
	if(gearbox._autoshift_state == AutoshiftEnable)
	{

	}
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <CAN_Init>:
extern Gearbox_t gearbox;

void CANRXHandler(can_frame_t* frame);

void CAN_Init(FDCAN_HandleTypeDef* hfdcan)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	CANInit(hfdcan);
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f000 f8a5 	bl	8000558 <CANInit>
	CANInitFrame(&gearup,hfdcan,0x0);
 800040e:	2200      	movs	r2, #0
 8000410:	6879      	ldr	r1, [r7, #4]
 8000412:	480f      	ldr	r0, [pc, #60]	@ (8000450 <CAN_Init+0x50>)
 8000414:	f000 f8d1 	bl	80005ba <CANInitFrame>
	CANInitFrame(&geardown,hfdcan,0x1);
 8000418:	2201      	movs	r2, #1
 800041a:	6879      	ldr	r1, [r7, #4]
 800041c:	480d      	ldr	r0, [pc, #52]	@ (8000454 <CAN_Init+0x54>)
 800041e:	f000 f8cc 	bl	80005ba <CANInitFrame>
	CANInitFrame(&clutchfr, hfdcan, 0x3);
 8000422:	2203      	movs	r2, #3
 8000424:	6879      	ldr	r1, [r7, #4]
 8000426:	480c      	ldr	r0, [pc, #48]	@ (8000458 <CAN_Init+0x58>)
 8000428:	f000 f8c7 	bl	80005ba <CANInitFrame>
	CANInitFrame(&gmu1, hfdcan, 0x80);
 800042c:	2280      	movs	r2, #128	@ 0x80
 800042e:	6879      	ldr	r1, [r7, #4]
 8000430:	480a      	ldr	r0, [pc, #40]	@ (800045c <CAN_Init+0x5c>)
 8000432:	f000 f8c2 	bl	80005ba <CANInitFrame>
	CANInitFrame(&gmu2, hfdcan, 0x81);
 8000436:	2281      	movs	r2, #129	@ 0x81
 8000438:	6879      	ldr	r1, [r7, #4]
 800043a:	4809      	ldr	r0, [pc, #36]	@ (8000460 <CAN_Init+0x60>)
 800043c:	f000 f8bd 	bl	80005ba <CANInitFrame>
	CANRegisterCallback(CANRXHandler);
 8000440:	4808      	ldr	r0, [pc, #32]	@ (8000464 <CAN_Init+0x64>)
 8000442:	f000 f8f7 	bl	8000634 <CANRegisterCallback>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000084 	.word	0x20000084
 8000454:	200000dc 	.word	0x200000dc
 8000458:	20000134 	.word	0x20000134
 800045c:	2000018c 	.word	0x2000018c
 8000460:	200001e4 	.word	0x200001e4
 8000464:	080004e9 	.word	0x080004e9

08000468 <CANSendGMUFrames>:

void CANSendGMUFrames(Gearbox_t* gearbox)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	gmu1.data[0] = gearbox->actual_gear;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7b9a      	ldrb	r2, [r3, #14]
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <CANSendGMUFrames+0x7c>)
 8000476:	701a      	strb	r2, [r3, #0]
	gmu1.data[1] = 0;
 8000478:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <CANSendGMUFrames+0x7c>)
 800047a:	2200      	movs	r2, #0
 800047c:	705a      	strb	r2, [r3, #1]
	gmu1.data[2] = (uint8_t)((gearbox->gearPosADC >> 8) & 0x0F);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	b29b      	uxth	r3, r3
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 030f 	and.w	r3, r3, #15
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <CANSendGMUFrames+0x7c>)
 8000490:	709a      	strb	r2, [r3, #2]
	gmu1.data[3] = (uint8_t)(gearbox->gearPosADC & 0xF0);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	b2db      	uxtb	r3, r3
 8000498:	f023 030f 	bic.w	r3, r3, #15
 800049c:	b2da      	uxtb	r2, r3
 800049e:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <CANSendGMUFrames+0x7c>)
 80004a0:	70da      	strb	r2, [r3, #3]
	gmu1.data[4] = gearbox->_state;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	7b1a      	ldrb	r2, [r3, #12]
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <CANSendGMUFrames+0x7c>)
 80004a8:	711a      	strb	r2, [r3, #4]
	gmu1.data[5] = (uint8_t)((gearbox->air_press >> 8) & 0x0F);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80004ae:	0a1b      	lsrs	r3, r3, #8
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	f003 030f 	and.w	r3, r3, #15
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <CANSendGMUFrames+0x7c>)
 80004bc:	715a      	strb	r2, [r3, #5]
	gmu1.data[6] = (uint8_t)(gearbox->air_press & 0xF0);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	f023 030f 	bic.w	r3, r3, #15
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <CANSendGMUFrames+0x7c>)
 80004cc:	719a      	strb	r2, [r3, #6]
	gmu1.data[7] = gearbox->gear_cut;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	7e5a      	ldrb	r2, [r3, #25]
 80004d2:	4b04      	ldr	r3, [pc, #16]	@ (80004e4 <CANSendGMUFrames+0x7c>)
 80004d4:	71da      	strb	r2, [r3, #7]

	CANSendFrame(&gmu1);
 80004d6:	4803      	ldr	r0, [pc, #12]	@ (80004e4 <CANSendGMUFrames+0x7c>)
 80004d8:	f000 f89b 	bl	8000612 <CANSendFrame>
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	2000018c 	.word	0x2000018c

080004e8 <CANRXHandler>:
void CANRXHandler(can_frame_t* frame)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	switch(frame->RxHeader.Identifier)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d016      	beq.n	8000526 <CANRXHandler+0x3e>
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d822      	bhi.n	8000542 <CANRXHandler+0x5a>
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <CANRXHandler+0x1e>
 8000500:	2b01      	cmp	r3, #1
 8000502:	d008      	beq.n	8000516 <CANRXHandler+0x2e>
		if(frame->data[0] == 0xFF)
			clutch(true);
		if(frame->data[0] == 0x0)
			clutch(false);
	default:
		break;
 8000504:	e01d      	b.n	8000542 <CANRXHandler+0x5a>
		if(frame->data[0] == 0xFF)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2bff      	cmp	r3, #255	@ 0xff
 800050c:	d11b      	bne.n	8000546 <CANRXHandler+0x5e>
			startUpshift(&gearbox);
 800050e:	4811      	ldr	r0, [pc, #68]	@ (8000554 <CANRXHandler+0x6c>)
 8000510:	f000 fc1e 	bl	8000d50 <startUpshift>
		break;
 8000514:	e017      	b.n	8000546 <CANRXHandler+0x5e>
		if(frame->data[0] == 0xFF)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2bff      	cmp	r3, #255	@ 0xff
 800051c:	d115      	bne.n	800054a <CANRXHandler+0x62>
			startDownshift(&gearbox);
 800051e:	480d      	ldr	r0, [pc, #52]	@ (8000554 <CANRXHandler+0x6c>)
 8000520:	f000 fc27 	bl	8000d72 <startDownshift>
		break;
 8000524:	e011      	b.n	800054a <CANRXHandler+0x62>
		if(frame->data[0] == 0xFF)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2bff      	cmp	r3, #255	@ 0xff
 800052c:	d102      	bne.n	8000534 <CANRXHandler+0x4c>
			clutch(true);
 800052e:	2001      	movs	r0, #1
 8000530:	f000 fc30 	bl	8000d94 <clutch>
		if(frame->data[0] == 0x0)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <CANRXHandler+0x5a>
			clutch(false);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fc29 	bl	8000d94 <clutch>
		break;
 8000542:	bf00      	nop
 8000544:	e002      	b.n	800054c <CANRXHandler+0x64>
		break;
 8000546:	bf00      	nop
 8000548:	e000      	b.n	800054c <CANRXHandler+0x64>
		break;
 800054a:	bf00      	nop
	}
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000058 	.word	0x20000058

08000558 <CANInit>:
#include "CAN_Lib.h"

static CANMessageHandler CANMessageCallback = NULL;

void CANInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000568:	2302      	movs	r3, #2
 800056a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800056c:	2301      	movs	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = 0x0;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = 0x0;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
	if(HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK)
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	4619      	mov	r1, r3
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f004 fce2 	bl	8004f48 <HAL_FDCAN_ConfigFilter>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <CANInit+0x36>
	{
		Error_Handler();
 800058a:	f000 fe21 	bl	80011d0 <Error_Handler>
	}
	if(HAL_FDCAN_Start(hfdcan) != HAL_OK)
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f004 fd34 	bl	8004ffc <HAL_FDCAN_Start>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <CANInit+0x46>
	{
		Error_Handler();
 800059a:	f000 fe19 	bl	80011d0 <Error_Handler>
	}
	if(HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800059e:	2200      	movs	r2, #0
 80005a0:	2101      	movs	r1, #1
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f004 fe9e 	bl	80052e4 <HAL_FDCAN_ActivateNotification>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <CANInit+0x5a>
	{
		Error_Handler();
 80005ae:	f000 fe0f 	bl	80011d0 <Error_Handler>
	}
}
 80005b2:	bf00      	nop
 80005b4:	3720      	adds	r7, #32
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <CANInitFrame>:

void CANInitFrame(can_frame_t* frame, FDCAN_HandleTypeDef* hfdcan, uint16_t id)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b085      	sub	sp, #20
 80005be:	af00      	add	r7, sp, #0
 80005c0:	60f8      	str	r0, [r7, #12]
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	4613      	mov	r3, r2
 80005c6:	80fb      	strh	r3, [r7, #6]
	frame->hfdcan = hfdcan;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	655a      	str	r2, [r3, #84]	@ 0x54
	frame->TxHeader.Identifier = id;
 80005ce:	88fa      	ldrh	r2, [r7, #6]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	609a      	str	r2, [r3, #8]
	frame->TxHeader.IdType = FDCAN_STANDARD_ID;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
	frame->TxHeader.TxFrameType = FDCAN_CLASSIC_CAN;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
	frame->TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2208      	movs	r2, #8
 80005e4:	615a      	str	r2, [r3, #20]
	frame->TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
	frame->TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
	frame->TxHeader.FDFormat = FDCAN_FD_CAN;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80005f8:	621a      	str	r2, [r3, #32]
	frame->TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2200      	movs	r2, #0
 80005fe:	625a      	str	r2, [r3, #36]	@ 0x24
	frame->TxHeader.MessageMarker = 0x0;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2200      	movs	r2, #0
 8000604:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <CANSendFrame>:

void CANSendFrame(can_frame_t* frame)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
/*	if (HAL_FDCAN_GetTxFifoFreeLevel(frame->hfdcan) == 0)
	{
	    Error_Handler();
	}*/
	HAL_FDCAN_AddMessageToTxFifoQ(frame->hfdcan, &(frame->TxHeader), frame->data);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3308      	adds	r3, #8
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	4619      	mov	r1, r3
 8000626:	f004 fd11 	bl	800504c <HAL_FDCAN_AddMessageToTxFifoQ>
/*	{
		Error_Handler();
	}*/
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <CANRegisterCallback>:

void CANRegisterCallback(CANMessageHandler handler)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	if(handler != NULL)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <CANRegisterCallback+0x14>
	{
		CANMessageCallback = handler;
 8000642:	4a04      	ldr	r2, [pc, #16]	@ (8000654 <CANRegisterCallback+0x20>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6013      	str	r3, [r2, #0]
	}
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	2000023c 	.word	0x2000023c

08000658 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b098      	sub	sp, #96	@ 0x60
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	2b00      	cmp	r3, #0
 800066a:	d029      	beq.n	80006c0 <HAL_FDCAN_RxFifo0Callback+0x68>
  {
	can_frame_t frame;
	frame.hfdcan = hfdcan;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &frame.RxHeader, frame.data) == HAL_OK)
 8000670:	f107 0108 	add.w	r1, r7, #8
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800067c:	460b      	mov	r3, r1
 800067e:	2140      	movs	r1, #64	@ 0x40
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f004 fd27 	bl	80050d4 <HAL_FDCAN_GetRxMessage>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d10d      	bne.n	80006a8 <HAL_FDCAN_RxFifo0Callback+0x50>
    {
    	if(CANMessageCallback != NULL)
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <HAL_FDCAN_RxFifo0Callback+0x70>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d006      	beq.n	80006a2 <HAL_FDCAN_RxFifo0Callback+0x4a>
    	{
    		CANMessageCallback(&frame);
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f107 0208 	add.w	r2, r7, #8
 800069c:	4610      	mov	r0, r2
 800069e:	4798      	blx	r3
 80006a0:	e004      	b.n	80006ac <HAL_FDCAN_RxFifo0Callback+0x54>
    	}
    	else
    	{
    	    Error_Handler();
 80006a2:	f000 fd95 	bl	80011d0 <Error_Handler>
 80006a6:	e001      	b.n	80006ac <HAL_FDCAN_RxFifo0Callback+0x54>
    	}
    }
    else
    {
    	Error_Handler();
 80006a8:	f000 fd92 	bl	80011d0 <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ac:	2200      	movs	r2, #0
 80006ae:	2101      	movs	r1, #1
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f004 fe17 	bl	80052e4 <HAL_FDCAN_ActivateNotification>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_FDCAN_RxFifo0Callback+0x68>
    {
    	Error_Handler();
 80006bc:	f000 fd88 	bl	80011d0 <Error_Handler>
    }
  }
}
 80006c0:	bf00      	nop
 80006c2:	3760      	adds	r7, #96	@ 0x60
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000023c 	.word	0x2000023c

080006cc <gearboxInit>:
#include "CAN_Handler.h"

static bool getTimeout(uint32_t start_tick, uint32_t timeout_tick);
GPIO_PinState clutch_state;
void gearboxInit(Gearbox_t* gearbox)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	gearbox->gearPosADC = 0;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	801a      	strh	r2, [r3, #0]
	gearbox->neutral_adc = 800;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80006e0:	805a      	strh	r2, [r3, #2]
	gearbox->gear1_adc = 1300;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f240 5214 	movw	r2, #1300	@ 0x514
 80006e8:	809a      	strh	r2, [r3, #4]
	gearbox->gear2_adc = 1700;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80006f0:	80da      	strh	r2, [r3, #6]
	gearbox->gear3_adc = 2150;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f640 0266 	movw	r2, #2150	@ 0x866
 80006f8:	811a      	strh	r2, [r3, #8]
	gearbox->gear4_adc = 2550;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f640 12f6 	movw	r2, #2550	@ 0x9f6
 8000700:	815a      	strh	r2, [r3, #10]

	gearbox->_state = Idle;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	731a      	strb	r2, [r3, #12]
	gearbox->_autoshift_state = AutoshiftDisable;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2200      	movs	r2, #0
 800070c:	735a      	strb	r2, [r3, #13]

	gearbox->actual_gear = 0xff;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	22ff      	movs	r2, #255	@ 0xff
 8000712:	739a      	strb	r2, [r3, #14]
	gearbox->shift_start_tick = 0;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
	gearbox->timestamp_tick = 0;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
	gearbox->start_gear = 0xff;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	22ff      	movs	r2, #255	@ 0xff
 8000724:	761a      	strb	r2, [r3, #24]

	gearbox->gear_cut = 127;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	227f      	movs	r2, #127	@ 0x7f
 800072a:	765a      	strb	r2, [r3, #25]

}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <updateGear>:
{
	gearbox->gearPosADC = ADCValue;
}

void updateGear(Gearbox_t* gearbox)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if((gearbox->gearPosADC>=(gearbox->neutral_adc-100))&&(gearbox->gearPosADC<=(gearbox->neutral_adc+100)))
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	885b      	ldrh	r3, [r3, #2]
 800074a:	3b64      	subs	r3, #100	@ 0x64
 800074c:	429a      	cmp	r2, r3
 800074e:	db0b      	blt.n	8000768 <updateGear+0x30>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	885b      	ldrh	r3, [r3, #2]
 800075a:	3364      	adds	r3, #100	@ 0x64
 800075c:	429a      	cmp	r2, r3
 800075e:	dc03      	bgt.n	8000768 <updateGear+0x30>
	{
		gearbox->actual_gear = 0;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	739a      	strb	r2, [r3, #14]
 8000766:	e053      	b.n	8000810 <updateGear+0xd8>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear1_adc-100))&&(gearbox->gearPosADC<=(gearbox->gear1_adc+100)))
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	889b      	ldrh	r3, [r3, #4]
 8000772:	3b64      	subs	r3, #100	@ 0x64
 8000774:	429a      	cmp	r2, r3
 8000776:	db0b      	blt.n	8000790 <updateGear+0x58>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	889b      	ldrh	r3, [r3, #4]
 8000782:	3364      	adds	r3, #100	@ 0x64
 8000784:	429a      	cmp	r2, r3
 8000786:	dc03      	bgt.n	8000790 <updateGear+0x58>
	{
		gearbox->actual_gear = 1;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2201      	movs	r2, #1
 800078c:	739a      	strb	r2, [r3, #14]
 800078e:	e03f      	b.n	8000810 <updateGear+0xd8>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear2_adc-100))&&(gearbox->gearPosADC<=(gearbox->gear2_adc+100)))
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	88db      	ldrh	r3, [r3, #6]
 800079a:	3b64      	subs	r3, #100	@ 0x64
 800079c:	429a      	cmp	r2, r3
 800079e:	db0b      	blt.n	80007b8 <updateGear+0x80>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	88db      	ldrh	r3, [r3, #6]
 80007aa:	3364      	adds	r3, #100	@ 0x64
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dc03      	bgt.n	80007b8 <updateGear+0x80>
	{
		gearbox->actual_gear = 2;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2202      	movs	r2, #2
 80007b4:	739a      	strb	r2, [r3, #14]
 80007b6:	e02b      	b.n	8000810 <updateGear+0xd8>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear3_adc-100))&&(gearbox->gearPosADC<=(gearbox->gear3_adc+100)))
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	891b      	ldrh	r3, [r3, #8]
 80007c2:	3b64      	subs	r3, #100	@ 0x64
 80007c4:	429a      	cmp	r2, r3
 80007c6:	db0b      	blt.n	80007e0 <updateGear+0xa8>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	891b      	ldrh	r3, [r3, #8]
 80007d2:	3364      	adds	r3, #100	@ 0x64
 80007d4:	429a      	cmp	r2, r3
 80007d6:	dc03      	bgt.n	80007e0 <updateGear+0xa8>
		{
			gearbox->actual_gear = 3;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2203      	movs	r2, #3
 80007dc:	739a      	strb	r2, [r3, #14]
 80007de:	e017      	b.n	8000810 <updateGear+0xd8>
		}
	else if((gearbox->gearPosADC>=(gearbox->gear4_adc-100))&&(gearbox->gearPosADC<=(gearbox->gear4_adc+100)))
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	895b      	ldrh	r3, [r3, #10]
 80007ea:	3b64      	subs	r3, #100	@ 0x64
 80007ec:	429a      	cmp	r2, r3
 80007ee:	db0b      	blt.n	8000808 <updateGear+0xd0>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	895b      	ldrh	r3, [r3, #10]
 80007fa:	3364      	adds	r3, #100	@ 0x64
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dc03      	bgt.n	8000808 <updateGear+0xd0>
		{
			gearbox->actual_gear = 4;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2204      	movs	r2, #4
 8000804:	739a      	strb	r2, [r3, #14]
 8000806:	e003      	b.n	8000810 <updateGear+0xd8>
		}
	else
		{
			gearbox->actual_gear = 0xff;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	22ff      	movs	r2, #255	@ 0xff
 800080c:	739a      	strb	r2, [r3, #14]
		}

}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <processCallback>:

void processCallback(Gearbox_t* gearbox)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	switch(gearbox->_state)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7b1b      	ldrb	r3, [r3, #12]
 8000828:	2b0c      	cmp	r3, #12
 800082a:	d84d      	bhi.n	80008c8 <processCallback+0xac>
 800082c:	a201      	add	r2, pc, #4	@ (adr r2, 8000834 <processCallback+0x18>)
 800082e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000832:	bf00      	nop
 8000834:	080008d1 	.word	0x080008d1
 8000838:	08000869 	.word	0x08000869
 800083c:	08000871 	.word	0x08000871
 8000840:	08000879 	.word	0x08000879
 8000844:	08000881 	.word	0x08000881
 8000848:	08000889 	.word	0x08000889
 800084c:	08000891 	.word	0x08000891
 8000850:	08000899 	.word	0x08000899
 8000854:	080008a1 	.word	0x080008a1
 8000858:	080008a9 	.word	0x080008a9
 800085c:	080008b1 	.word	0x080008b1
 8000860:	080008b9 	.word	0x080008b9
 8000864:	080008c1 	.word	0x080008c1
	{
		case Idle:
		break;

		case StartUpshift:
			startUpshiftCallback(gearbox);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f837 	bl	80008dc <startUpshiftCallback>
		break;
 800086e:	e030      	b.n	80008d2 <processCallback+0xb6>

		case UpshiftFromNeutral:
			upshiftFromNeutral(gearbox);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f863 	bl	800093c <upshiftFromNeutral>
		break;
 8000876:	e02c      	b.n	80008d2 <processCallback+0xb6>

		case UpshiftGearCut:
			upshiftGearCut(gearbox);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f000 f885 	bl	8000988 <upshiftGearCut>
		break;
 800087e:	e028      	b.n	80008d2 <processCallback+0xb6>

		case UpshiftFinish:
			upshiftFinish(gearbox);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f8a9 	bl	80009d8 <upshiftFinish>
		break;
 8000886:	e024      	b.n	80008d2 <processCallback+0xb6>

		case StartDownshift:
			startDownshiftCallback(gearbox);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 f8df 	bl	8000a4c <startDownshiftCallback>
		break;
 800088e:	e020      	b.n	80008d2 <processCallback+0xb6>

		case DownshiftToNeutral:
			downshiftToNeutral(gearbox);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 f91f 	bl	8000ad4 <downshiftToNeutral>
		break;
 8000896:	e01c      	b.n	80008d2 <processCallback+0xb6>

		case DownshiftRevMatch:
			downshiftRevMatch(gearbox);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 f947 	bl	8000b2c <downshiftRevMatch>
		break;
 800089e:	e018      	b.n	80008d2 <processCallback+0xb6>

		case DownshiftFinish:
			downshiftFinish(gearbox);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f96b 	bl	8000b7c <downshiftFinish>
		break;
 80008a6:	e014      	b.n	80008d2 <processCallback+0xb6>

		case OL_US_GearCut:
			openLoop_upshift_gearCut(gearbox);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 f9a3 	bl	8000bf4 <openLoop_upshift_gearCut>
		break;
 80008ae:	e010      	b.n	80008d2 <processCallback+0xb6>

		case OL_US_Finish:
			openLoop_upshift_finish(gearbox);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 f9c3 	bl	8000c3c <openLoop_upshift_finish>
		break;
 80008b6:	e00c      	b.n	80008d2 <processCallback+0xb6>

		case OL_DS_Clutch:
			openLoop_downshift_clutch(gearbox);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 f9f1 	bl	8000ca0 <openLoop_downshift_clutch>
		break;
 80008be:	e008      	b.n	80008d2 <processCallback+0xb6>

		case OL_DS_Finish:
			openLoop_downshift_finish(gearbox);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 fa11 	bl	8000ce8 <openLoop_downshift_finish>
		break;
 80008c6:	e004      	b.n	80008d2 <processCallback+0xb6>

		default:
			gearbox->_state = Idle;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	731a      	strb	r2, [r3, #12]
		break;
 80008ce:	e000      	b.n	80008d2 <processCallback+0xb6>
		break;
 80008d0:	bf00      	nop

	}
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop

080008dc <startUpshiftCallback>:

void startUpshiftCallback(Gearbox_t* gearbox)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	gearbox->start_gear = gearbox->actual_gear;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7b9a      	ldrb	r2, [r3, #14]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	761a      	strb	r2, [r3, #24]
	gearbox->shift_start_tick = HAL_GetTick();
 80008ec:	f000 ffee 	bl	80018cc <HAL_GetTick>
 80008f0:	4602      	mov	r2, r0
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	611a      	str	r2, [r3, #16]

	if(gearbox->start_gear == 4)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7e1b      	ldrb	r3, [r3, #24]
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d103      	bne.n	8000906 <startUpshiftCallback+0x2a>
	{
		gearbox->_state = Idle;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	731a      	strb	r2, [r3, #12]
		return;
 8000904:	e015      	b.n	8000932 <startUpshiftCallback+0x56>
	}
	HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800090c:	480a      	ldr	r0, [pc, #40]	@ (8000938 <startUpshiftCallback+0x5c>)
 800090e:	f005 f9a5 	bl	8005c5c <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 8000912:	f000 ffdb 	bl	80018cc <HAL_GetTick>
 8000916:	4602      	mov	r2, r0
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	615a      	str	r2, [r3, #20]

	if(gearbox->start_gear == 0)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7e1b      	ldrb	r3, [r3, #24]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d103      	bne.n	800092c <startUpshiftCallback+0x50>
	{
		gearbox->_state = UpshiftFromNeutral;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2202      	movs	r2, #2
 8000928:	731a      	strb	r2, [r3, #12]
 800092a:	e002      	b.n	8000932 <startUpshiftCallback+0x56>
	}
	else
	{
		gearbox->_state = UpshiftGearCut;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2203      	movs	r2, #3
 8000930:	731a      	strb	r2, [r3, #12]
	}

}
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	42020400 	.word	0x42020400

0800093c <upshiftFromNeutral>:
void upshiftFromNeutral(Gearbox_t* gearbox)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == 1) || (getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT)))
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7b9b      	ldrb	r3, [r3, #14]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d008      	beq.n	800095e <upshiftFromNeutral+0x22>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	21c8      	movs	r1, #200	@ 0xc8
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fa3c 	bl	8000dd0 <getTimeout>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00d      	beq.n	800097a <upshiftFromNeutral+0x3e>
	{
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000964:	4807      	ldr	r0, [pc, #28]	@ (8000984 <upshiftFromNeutral+0x48>)
 8000966:	f005 f979 	bl	8005c5c <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 800096a:	f000 ffaf 	bl	80018cc <HAL_GetTick>
 800096e:	4602      	mov	r2, r0
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	615a      	str	r2, [r3, #20]
		gearbox->_state = Idle;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	731a      	strb	r2, [r3, #12]
	}
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	42020400 	.word	0x42020400

08000988 <upshiftGearCut>:

void upshiftGearCut(Gearbox_t* gearbox)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, US_ACTUATOR_DELAY)||(gearbox->actual_gear == 0xff))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	2114      	movs	r1, #20
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fa1a 	bl	8000dd0 <getTimeout>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d103      	bne.n	80009aa <upshiftGearCut+0x22>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7b9b      	ldrb	r3, [r3, #14]
 80009a6:	2bff      	cmp	r3, #255	@ 0xff
 80009a8:	d10f      	bne.n	80009ca <upshiftGearCut+0x42>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2110      	movs	r1, #16
 80009ae:	4809      	ldr	r0, [pc, #36]	@ (80009d4 <upshiftGearCut+0x4c>)
 80009b0:	f005 f954 	bl	8005c5c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	22ff      	movs	r2, #255	@ 0xff
 80009b8:	765a      	strb	r2, [r3, #25]
		gearbox->timestamp_tick = HAL_GetTick();
 80009ba:	f000 ff87 	bl	80018cc <HAL_GetTick>
 80009be:	4602      	mov	r2, r0
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	615a      	str	r2, [r3, #20]
		gearbox->_state = UpshiftFinish;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2204      	movs	r2, #4
 80009c8:	731a      	strb	r2, [r3, #12]
	}
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	42020000 	.word	0x42020000

080009d8 <upshiftFinish>:

void upshiftFinish(Gearbox_t* gearbox)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear+1)||(getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT)))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7b9b      	ldrb	r3, [r3, #14]
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	7e1b      	ldrb	r3, [r3, #24]
 80009ea:	3301      	adds	r3, #1
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d008      	beq.n	8000a02 <upshiftFinish+0x2a>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	21c8      	movs	r1, #200	@ 0xc8
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f9ea 	bl	8000dd0 <getTimeout>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d01c      	beq.n	8000a3c <upshiftFinish+0x64>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2110      	movs	r1, #16
 8000a06:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <upshiftFinish+0x6c>)
 8000a08:	f005 f928 	bl	8005c5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a12:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <upshiftFinish+0x70>)
 8000a14:	f005 f922 	bl	8005c5c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	227f      	movs	r2, #127	@ 0x7f
 8000a1c:	765a      	strb	r2, [r3, #25]
		gearbox->timestamp_tick = HAL_GetTick();
 8000a1e:	f000 ff55 	bl	80018cc <HAL_GetTick>
 8000a22:	4602      	mov	r2, r0
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	615a      	str	r2, [r3, #20]
		gearbox->upshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	1ad2      	subs	r2, r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	61da      	str	r2, [r3, #28]
		gearbox->_state = Idle;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	731a      	strb	r2, [r3, #12]
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	42020000 	.word	0x42020000
 8000a48:	42020400 	.word	0x42020400

08000a4c <startDownshiftCallback>:

void startDownshiftCallback(Gearbox_t* gearbox)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	gearbox->shift_start_tick = HAL_GetTick();
 8000a54:	f000 ff3a 	bl	80018cc <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	611a      	str	r2, [r3, #16]
	gearbox->start_gear = gearbox->actual_gear;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7b9a      	ldrb	r2, [r3, #14]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	761a      	strb	r2, [r3, #24]

	if(gearbox->start_gear > 4)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	7e1b      	ldrb	r3, [r3, #24]
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d90e      	bls.n	8000a8c <startDownshiftCallback+0x40>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a74:	4816      	ldr	r0, [pc, #88]	@ (8000ad0 <startDownshiftCallback+0x84>)
 8000a76:	f005 f8f1 	bl	8005c5c <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000a7a:	f000 ff27 	bl	80018cc <HAL_GetTick>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_DS_Clutch;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	220b      	movs	r2, #11
 8000a88:	731a      	strb	r2, [r3, #12]
		return;
 8000a8a:	e01d      	b.n	8000ac8 <startDownshiftCallback+0x7c>
	}
	else if(gearbox->start_gear == 0)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	7e1b      	ldrb	r3, [r3, #24]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d103      	bne.n	8000a9c <startDownshiftCallback+0x50>
	{
		gearbox->_state = Idle;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	731a      	strb	r2, [r3, #12]
		return;
 8000a9a:	e015      	b.n	8000ac8 <startDownshiftCallback+0x7c>
	}

	HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aa2:	480b      	ldr	r0, [pc, #44]	@ (8000ad0 <startDownshiftCallback+0x84>)
 8000aa4:	f005 f8da 	bl	8005c5c <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 8000aa8:	f000 ff10 	bl	80018cc <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	615a      	str	r2, [r3, #20]

	if(gearbox->start_gear == 1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7e1b      	ldrb	r3, [r3, #24]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d103      	bne.n	8000ac2 <startDownshiftCallback+0x76>
	{
		gearbox->_state = DownshiftToNeutral;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2206      	movs	r2, #6
 8000abe:	731a      	strb	r2, [r3, #12]
 8000ac0:	e002      	b.n	8000ac8 <startDownshiftCallback+0x7c>
	}
	else
	{
		gearbox->_state = DownshiftRevMatch;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	731a      	strb	r2, [r3, #12]
	}
}
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	42020000 	.word	0x42020000

08000ad4 <downshiftToNeutral>:

void downshiftToNeutral(Gearbox_t* gearbox)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	if(gearbox->actual_gear == 0 || getTimeout(gearbox->timestamp_tick, DS_FINISH_TIMEOUT))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7b9b      	ldrb	r3, [r3, #14]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d008      	beq.n	8000af6 <downshiftToNeutral+0x22>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	21fa      	movs	r1, #250	@ 0xfa
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f970 	bl	8000dd0 <getTimeout>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d014      	beq.n	8000b20 <downshiftToNeutral+0x4c>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000afc:	480a      	ldr	r0, [pc, #40]	@ (8000b28 <downshiftToNeutral+0x54>)
 8000afe:	f005 f8ad 	bl	8005c5c <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000b02:	f000 fee3 	bl	80018cc <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	615a      	str	r2, [r3, #20]
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	695a      	ldr	r2, [r3, #20]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	1ad2      	subs	r2, r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	621a      	str	r2, [r3, #32]
		gearbox->_state = Idle;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	731a      	strb	r2, [r3, #12]
	}
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	42020000 	.word	0x42020000

08000b2c <downshiftRevMatch>:

void downshiftRevMatch(Gearbox_t* gearbox)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	if((getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY) || (gearbox->actual_gear == 0xff)))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	2128      	movs	r1, #40	@ 0x28
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f948 	bl	8000dd0 <getTimeout>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <downshiftRevMatch+0x22>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7b9b      	ldrb	r3, [r3, #14]
 8000b4a:	2bff      	cmp	r3, #255	@ 0xff
 8000b4c:	d110      	bne.n	8000b70 <downshiftRevMatch+0x44>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b54:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <downshiftRevMatch+0x4c>)
 8000b56:	f005 f881 	bl	8005c5c <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000b5a:	f000 feb7 	bl	80018cc <HAL_GetTick>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	615a      	str	r2, [r3, #20]
		gearbox->gear_cut = 0;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	765a      	strb	r2, [r3, #25]
		gearbox->_state = DownshiftFinish;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	731a      	strb	r2, [r3, #12]
	}
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	42020400 	.word	0x42020400

08000b7c <downshiftFinish>:

void downshiftFinish(Gearbox_t* gearbox)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear -1 ) || (getTimeout(gearbox->timestamp_tick, DS_FINISH_TIMEOUT)))
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7b9b      	ldrb	r3, [r3, #14]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7e1b      	ldrb	r3, [r3, #24]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d008      	beq.n	8000ba6 <downshiftFinish+0x2a>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	21fa      	movs	r1, #250	@ 0xfa
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f918 	bl	8000dd0 <getTimeout>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d01d      	beq.n	8000be2 <downshiftFinish+0x66>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bac:	480f      	ldr	r0, [pc, #60]	@ (8000bec <downshiftFinish+0x70>)
 8000bae:	f005 f855 	bl	8005c5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb8:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <downshiftFinish+0x74>)
 8000bba:	f005 f84f 	bl	8005c5c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	227f      	movs	r2, #127	@ 0x7f
 8000bc2:	765a      	strb	r2, [r3, #25]
		gearbox->timestamp_tick = HAL_GetTick();
 8000bc4:	f000 fe82 	bl	80018cc <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	615a      	str	r2, [r3, #20]
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	695a      	ldr	r2, [r3, #20]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	691b      	ldr	r3, [r3, #16]
 8000bd6:	1ad2      	subs	r2, r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	621a      	str	r2, [r3, #32]
		gearbox->_state = Idle;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	731a      	strb	r2, [r3, #12]
	}
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	42020400 	.word	0x42020400
 8000bf0:	42020000 	.word	0x42020000

08000bf4 <openLoop_upshift_gearCut>:

void openLoop_upshift_gearCut(Gearbox_t* gearbox)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, OL_US_GEARCUT_DEALAY))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	2164      	movs	r1, #100	@ 0x64
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f8e4 	bl	8000dd0 <getTimeout>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00f      	beq.n	8000c2e <openLoop_upshift_gearCut+0x3a>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2110      	movs	r1, #16
 8000c12:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <openLoop_upshift_gearCut+0x44>)
 8000c14:	f005 f822 	bl	8005c5c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	22ff      	movs	r2, #255	@ 0xff
 8000c1c:	765a      	strb	r2, [r3, #25]
		gearbox->timestamp_tick = HAL_GetTick();
 8000c1e:	f000 fe55 	bl	80018cc <HAL_GetTick>
 8000c22:	4602      	mov	r2, r0
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_US_Finish;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	731a      	strb	r2, [r3, #12]
	}
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	42020000 	.word	0x42020000

08000c3c <openLoop_upshift_finish>:

void openLoop_upshift_finish(Gearbox_t* gearbox)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	21c8      	movs	r1, #200	@ 0xc8
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f8c0 	bl	8000dd0 <getTimeout>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d01c      	beq.n	8000c90 <openLoop_upshift_finish+0x54>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2110      	movs	r1, #16
 8000c5a:	480f      	ldr	r0, [pc, #60]	@ (8000c98 <openLoop_upshift_finish+0x5c>)
 8000c5c:	f004 fffe 	bl	8005c5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c66:	480d      	ldr	r0, [pc, #52]	@ (8000c9c <openLoop_upshift_finish+0x60>)
 8000c68:	f004 fff8 	bl	8005c5c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	227f      	movs	r2, #127	@ 0x7f
 8000c70:	765a      	strb	r2, [r3, #25]
		gearbox->timestamp_tick = HAL_GetTick();
 8000c72:	f000 fe2b 	bl	80018cc <HAL_GetTick>
 8000c76:	4602      	mov	r2, r0
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	615a      	str	r2, [r3, #20]
		gearbox->upshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	695a      	ldr	r2, [r3, #20]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	1ad2      	subs	r2, r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	61da      	str	r2, [r3, #28]
		gearbox->_state = Idle;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	731a      	strb	r2, [r3, #12]
	}
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	42020000 	.word	0x42020000
 8000c9c:	42020400 	.word	0x42020400

08000ca0 <openLoop_downshift_clutch>:

void openLoop_downshift_clutch(Gearbox_t* gearbox)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	2128      	movs	r1, #40	@ 0x28
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f88e 	bl	8000dd0 <getTimeout>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d010      	beq.n	8000cdc <openLoop_downshift_clutch+0x3c>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cc0:	4808      	ldr	r0, [pc, #32]	@ (8000ce4 <openLoop_downshift_clutch+0x44>)
 8000cc2:	f004 ffcb 	bl	8005c5c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 0;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	765a      	strb	r2, [r3, #25]
		gearbox->timestamp_tick = HAL_GetTick();
 8000ccc:	f000 fdfe 	bl	80018cc <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_DS_Finish;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	220c      	movs	r2, #12
 8000cda:	731a      	strb	r2, [r3, #12]
	}
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	42020400 	.word	0x42020400

08000ce8 <openLoop_downshift_finish>:

void openLoop_downshift_finish(Gearbox_t* gearbox)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, OL_DS_CLUTCH_DELAY))
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	2164      	movs	r1, #100	@ 0x64
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f86a 	bl	8000dd0 <getTimeout>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d01d      	beq.n	8000d3e <openLoop_downshift_finish+0x56>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d08:	480f      	ldr	r0, [pc, #60]	@ (8000d48 <openLoop_downshift_finish+0x60>)
 8000d0a:	f004 ffa7 	bl	8005c5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d14:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <openLoop_downshift_finish+0x64>)
 8000d16:	f004 ffa1 	bl	8005c5c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	227f      	movs	r2, #127	@ 0x7f
 8000d1e:	765a      	strb	r2, [r3, #25]
		gearbox->timestamp_tick = HAL_GetTick();
 8000d20:	f000 fdd4 	bl	80018cc <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	615a      	str	r2, [r3, #20]
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	695a      	ldr	r2, [r3, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	1ad2      	subs	r2, r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	621a      	str	r2, [r3, #32]
		gearbox->_state = Idle;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	731a      	strb	r2, [r3, #12]
	}
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	42020400 	.word	0x42020400
 8000d4c:	42020000 	.word	0x42020000

08000d50 <startUpshift>:

void startUpshift(Gearbox_t* gearbox)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7b1b      	ldrb	r3, [r3, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <startUpshift+0x16>
		gearbox->_state = StartUpshift;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	731a      	strb	r2, [r3, #12]
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <startDownshift>:
void startDownshift(Gearbox_t* gearbox)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7b1b      	ldrb	r3, [r3, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d102      	bne.n	8000d88 <startDownshift+0x16>
		gearbox->_state = StartDownshift;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2205      	movs	r2, #5
 8000d86:	731a      	strb	r2, [r3, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <clutch>:

void clutch(bool ON)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	461a      	mov	r2, r3
 8000da2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000da6:	4808      	ldr	r0, [pc, #32]	@ (8000dc8 <clutch+0x34>)
 8000da8:	f004 ff58 	bl	8005c5c <HAL_GPIO_WritePin>
	clutch_state = HAL_GPIO_ReadPin(CLUTCH_GPIO_Port, CLUTCH_Pin);
 8000dac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db0:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <clutch+0x34>)
 8000db2:	f004 ff3b 	bl	8005c2c <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <clutch+0x38>)
 8000dbc:	701a      	strb	r2, [r3, #0]
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	42020400 	.word	0x42020400
 8000dcc:	20000240 	.word	0x20000240

08000dd0 <getTimeout>:
	else
		return false;
}

static bool getTimeout(uint32_t start_tick, uint32_t timeout_tick)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
	if((HAL_GetTick() - start_tick) >= timeout_tick)
 8000dda:	f000 fd77 	bl	80018cc <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d801      	bhi.n	8000dee <getTimeout+0x1e>
	{
		return true;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <getTimeout+0x20>
	}
	else
		return false;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfc:	f000 fcb4 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e00:	f000 f814 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e04:	f000 f960 	bl	80010c8 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000e08:	f000 f93e 	bl	8001088 <MX_GPDMA1_Init>
  MX_ADC1_Init();
 8000e0c:	f000 f880 	bl	8000f10 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000e10:	f000 f8f4 	bl	8000ffc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  AppInit(&hadc1,&hfdcan1);
 8000e14:	4903      	ldr	r1, [pc, #12]	@ (8000e24 <main+0x2c>)
 8000e16:	4804      	ldr	r0, [pc, #16]	@ (8000e28 <main+0x30>)
 8000e18:	f7ff faaa 	bl	8000370 <AppInit>
  AppHandle();
 8000e1c:	f7ff fabc 	bl	8000398 <AppHandle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <main+0x28>
 8000e24:	20000360 	.word	0x20000360
 8000e28:	20000244 	.word	0x20000244

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b09c      	sub	sp, #112	@ 0x70
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	2250      	movs	r2, #80	@ 0x50
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f007 f94e 	bl	80080dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e52:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <SystemClock_Config+0xdc>)
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	4a2c      	ldr	r2, [pc, #176]	@ (8000f08 <SystemClock_Config+0xdc>)
 8000e58:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000e5c:	6113      	str	r3, [r2, #16]
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <SystemClock_Config+0xdc>)
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e6a:	bf00      	nop
 8000e6c:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <SystemClock_Config+0xdc>)
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d1f9      	bne.n	8000e6c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000e7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000e82:	2320      	movs	r3, #32
 8000e84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 122;
 8000e92:	237a      	movs	r3, #122	@ 0x7a
 8000e94:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 feea 	bl	8005c8c <HAL_RCC_OscConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ebe:	f000 f987 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec2:	231f      	movs	r3, #31
 8000ec4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	2105      	movs	r1, #5
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f005 fb0b 	bl	80064fc <HAL_RCC_ClockConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000eec:	f000 f970 	bl	80011d0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <SystemClock_Config+0xe0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <SystemClock_Config+0xe0>)
 8000efa:	f043 0320 	orr.w	r3, r3, #32
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	3770      	adds	r7, #112	@ 0x70
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	44020800 	.word	0x44020800
 8000f0c:	40022000 	.word	0x40022000

08000f10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f16:	463b      	mov	r3, r7
 8000f18:	2220      	movs	r2, #32
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f007 f8dd 	bl	80080dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f22:	4b32      	ldr	r3, [pc, #200]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f24:	4a32      	ldr	r2, [pc, #200]	@ (8000ff0 <MX_ADC1_Init+0xe0>)
 8000f26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f28:	4b30      	ldr	r3, [pc, #192]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f34:	4b2d      	ldr	r3, [pc, #180]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f40:	4b2a      	ldr	r3, [pc, #168]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f42:	2208      	movs	r2, #8
 8000f44:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f46:	4b29      	ldr	r3, [pc, #164]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f4c:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000f52:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f54:	2202      	movs	r2, #2
 8000f56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f58:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f60:	4b22      	ldr	r3, [pc, #136]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f80:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f8a:	4818      	ldr	r0, [pc, #96]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000f8c:	f000 ff36 	bl	8001dfc <HAL_ADC_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000f96:	f000 f91b 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <MX_ADC1_Init+0xe4>)
 8000f9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fa6:	237f      	movs	r3, #127	@ 0x7f
 8000fa8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000faa:	2304      	movs	r3, #4
 8000fac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480d      	ldr	r0, [pc, #52]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000fb8:	f001 fbe0 	bl	800277c <HAL_ADC_ConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fc2:	f000 f905 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <MX_ADC1_Init+0xe8>)
 8000fc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fca:	230c      	movs	r3, #12
 8000fcc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <MX_ADC1_Init+0xdc>)
 8000fd4:	f001 fbd2 	bl	800277c <HAL_ADC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000fde:	f000 f8f7 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000244 	.word	0x20000244
 8000ff0:	42028000 	.word	0x42028000
 8000ff4:	3ac04000 	.word	0x3ac04000
 8000ff8:	4fb80000 	.word	0x4fb80000

08000ffc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001000:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001002:	4a20      	ldr	r2, [pc, #128]	@ (8001084 <MX_FDCAN1_Init+0x88>)
 8001004:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800100c:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001012:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001018:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 800101a:	2201      	movs	r2, #1
 800101c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001020:	2200      	movs	r2, #0
 8001022:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001024:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001026:	2200      	movs	r2, #0
 8001028:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 800102c:	2202      	movs	r2, #2
 800102e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 8001030:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001032:	220d      	movs	r2, #13
 8001034:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001038:	2256      	movs	r2, #86	@ 0x56
 800103a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 800103c:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 800103e:	220d      	movs	r2, #13
 8001040:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 8001042:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001044:	2219      	movs	r2, #25
 8001046:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001048:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 800104a:	2201      	movs	r2, #1
 800104c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001050:	2202      	movs	r2, #2
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001054:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001056:	2201      	movs	r2, #1
 8001058:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800105a:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 800105c:	2200      	movs	r2, #0
 800105e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001060:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001062:	2200      	movs	r2, #0
 8001064:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 8001068:	2200      	movs	r2, #0
 800106a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <MX_FDCAN1_Init+0x84>)
 800106e:	f003 fe11 	bl	8004c94 <HAL_FDCAN_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001078:	f000 f8aa 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000360 	.word	0x20000360
 8001084:	4000a400 	.word	0x4000a400

08001088 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <MX_GPDMA1_Init+0x3c>)
 8001090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <MX_GPDMA1_Init+0x3c>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_GPDMA1_Init+0x3c>)
 80010a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2022      	movs	r0, #34	@ 0x22
 80010b2:	f002 fa53 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 80010b6:	2022      	movs	r0, #34	@ 0x22
 80010b8:	f002 fa6a 	bl	8003590 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	44020c00 	.word	0x44020c00

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	4b38      	ldr	r3, [pc, #224]	@ (80011c0 <MX_GPIO_Init+0xf8>)
 80010e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010e4:	4a36      	ldr	r2, [pc, #216]	@ (80011c0 <MX_GPIO_Init+0xf8>)
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010ee:	4b34      	ldr	r3, [pc, #208]	@ (80011c0 <MX_GPIO_Init+0xf8>)
 80010f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b30      	ldr	r3, [pc, #192]	@ (80011c0 <MX_GPIO_Init+0xf8>)
 80010fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001102:	4a2f      	ldr	r2, [pc, #188]	@ (80011c0 <MX_GPIO_Init+0xf8>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800110c:	4b2c      	ldr	r3, [pc, #176]	@ (80011c0 <MX_GPIO_Init+0xf8>)
 800110e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b29      	ldr	r3, [pc, #164]	@ (80011c0 <MX_GPIO_Init+0xf8>)
 800111c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001120:	4a27      	ldr	r2, [pc, #156]	@ (80011c0 <MX_GPIO_Init+0xf8>)
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800112a:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <MX_GPIO_Init+0xf8>)
 800112c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800113e:	4821      	ldr	r0, [pc, #132]	@ (80011c4 <MX_GPIO_Init+0xfc>)
 8001140:	f004 fd8c 	bl	8005c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEAR_CUT_Pin|GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800114a:	481f      	ldr	r0, [pc, #124]	@ (80011c8 <MX_GPIO_Init+0x100>)
 800114c:	f004 fd86 	bl	8005c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLUTCH_Pin|GEAR_UP_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001156:	481d      	ldr	r0, [pc, #116]	@ (80011cc <MX_GPIO_Init+0x104>)
 8001158:	f004 fd80 	bl	8005c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800115c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001160:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4619      	mov	r1, r3
 8001174:	4813      	ldr	r0, [pc, #76]	@ (80011c4 <MX_GPIO_Init+0xfc>)
 8001176:	f004 fc07 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pins : GEAR_CUT_Pin GEAR_DOWN_Pin */
  GPIO_InitStruct.Pin = GEAR_CUT_Pin|GEAR_DOWN_Pin;
 800117a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800117e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <MX_GPIO_Init+0x100>)
 8001194:	f004 fbf8 	bl	8005988 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLUTCH_Pin GEAR_UP_Pin */
  GPIO_InitStruct.Pin = CLUTCH_Pin|GEAR_UP_Pin;
 8001198:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800119c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	4806      	ldr	r0, [pc, #24]	@ (80011cc <MX_GPIO_Init+0x104>)
 80011b2:	f004 fbe9 	bl	8005988 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b6:	bf00      	nop
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	44020c00 	.word	0x44020c00
 80011c4:	42020800 	.word	0x42020800
 80011c8:	42020000 	.word	0x42020000
 80011cc:	42020400 	.word	0x42020400

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <Error_Handler+0x8>

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0d8      	sub	sp, #352	@ 0x160
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80011f6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80011fa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001210:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001214:	4618      	mov	r0, r3
 8001216:	23d0      	movs	r3, #208	@ 0xd0
 8001218:	461a      	mov	r2, r3
 800121a:	2100      	movs	r1, #0
 800121c:	f006 ff5e 	bl	80080dc <memset>
  if(hadc->Instance==ADC1)
 8001220:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001224:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a80      	ldr	r2, [pc, #512]	@ (8001430 <HAL_ADC_MspInit+0x244>)
 800122e:	4293      	cmp	r3, r2
 8001230:	f040 80f8 	bne.w	8001424 <HAL_ADC_MspInit+0x238>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001234:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001238:	f5a3 71a8 	sub.w	r1, r3, #336	@ 0x150
 800123c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_CSI;
 8001248:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800124c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001250:	2205      	movs	r2, #5
 8001252:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4618      	mov	r0, r3
 800125c:	f005 fc4e 	bl	8006afc <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8001266:	f7ff ffb3 	bl	80011d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800126a:	4b72      	ldr	r3, [pc, #456]	@ (8001434 <HAL_ADC_MspInit+0x248>)
 800126c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001270:	4a70      	ldr	r2, [pc, #448]	@ (8001434 <HAL_ADC_MspInit+0x248>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001276:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800127a:	4b6e      	ldr	r3, [pc, #440]	@ (8001434 <HAL_ADC_MspInit+0x248>)
 800127c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001280:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8001284:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001288:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001292:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001296:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b66      	ldr	r3, [pc, #408]	@ (8001434 <HAL_ADC_MspInit+0x248>)
 800129a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129e:	4a65      	ldr	r2, [pc, #404]	@ (8001434 <HAL_ADC_MspInit+0x248>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a8:	4b62      	ldr	r3, [pc, #392]	@ (8001434 <HAL_ADC_MspInit+0x248>)
 80012aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012ae:	f003 0201 	and.w	r2, r3, #1
 80012b2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012b6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012c0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80012c4:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    PA5     ------> ADC1_INP19
    */
    GPIO_InitStruct.Pin = Gear_Pos_Pin|Air_Press_Pin;
 80012c6:	2324      	movs	r3, #36	@ 0x24
 80012c8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012cc:	2303      	movs	r3, #3
 80012ce:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80012dc:	4619      	mov	r1, r3
 80012de:	4856      	ldr	r0, [pc, #344]	@ (8001438 <HAL_ADC_MspInit+0x24c>)
 80012e0:	f004 fb52 	bl	8005988 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 80012e4:	2322      	movs	r3, #34	@ 0x22
 80012e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8001302:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001306:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 800130a:	2301      	movs	r3, #1
 800130c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8001310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001314:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    NodeConfig.Init.SrcBurstLength = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    NodeConfig.Init.DestBurstLength = 1;
 800131e:	2301      	movs	r3, #1
 8001320:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    NodeConfig.Init.Mode = DMA_NORMAL;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    NodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8001336:	2301      	movs	r3, #1
 8001338:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    NodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    NodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    NodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    NodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel7) != HAL_OK)
 8001366:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800136a:	4934      	ldr	r1, [pc, #208]	@ (800143c <HAL_ADC_MspInit+0x250>)
 800136c:	4618      	mov	r0, r3
 800136e:	f002 fdaf 	bl	8003ed0 <HAL_DMAEx_List_BuildNode>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_ADC_MspInit+0x190>
    {
      Error_Handler();
 8001378:	f7ff ff2a 	bl	80011d0 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel7, NULL, &Node_GPDMA1_Channel7) != HAL_OK)
 800137c:	4a2f      	ldr	r2, [pc, #188]	@ (800143c <HAL_ADC_MspInit+0x250>)
 800137e:	2100      	movs	r1, #0
 8001380:	482f      	ldr	r0, [pc, #188]	@ (8001440 <HAL_ADC_MspInit+0x254>)
 8001382:	f002 fdd1 	bl	8003f28 <HAL_DMAEx_List_InsertNode>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_ADC_MspInit+0x1a4>
    {
      Error_Handler();
 800138c:	f7ff ff20 	bl	80011d0 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel7) != HAL_OK)
 8001390:	482b      	ldr	r0, [pc, #172]	@ (8001440 <HAL_ADC_MspInit+0x254>)
 8001392:	f002 fe92 	bl	80040ba <HAL_DMAEx_List_SetCircularMode>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_ADC_MspInit+0x1b4>
    {
      Error_Handler();
 800139c:	f7ff ff18 	bl	80011d0 <Error_Handler>
    }

    handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <HAL_ADC_MspInit+0x258>)
 80013a2:	4a29      	ldr	r2, [pc, #164]	@ (8001448 <HAL_ADC_MspInit+0x25c>)
 80013a4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel7.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80013a6:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <HAL_ADC_MspInit+0x258>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel7.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80013ac:	4b25      	ldr	r3, [pc, #148]	@ (8001444 <HAL_ADC_MspInit+0x258>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel7.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80013b2:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <HAL_ADC_MspInit+0x258>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel7.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80013b8:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <HAL_ADC_MspInit+0x258>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel7.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80013be:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <HAL_ADC_MspInit+0x258>)
 80013c0:	2281      	movs	r2, #129	@ 0x81
 80013c2:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 80013c4:	481f      	ldr	r0, [pc, #124]	@ (8001444 <HAL_ADC_MspInit+0x258>)
 80013c6:	f002 fbc3 	bl	8003b50 <HAL_DMAEx_List_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_ADC_MspInit+0x1e8>
    {
      Error_Handler();
 80013d0:	f7ff fefe 	bl	80011d0 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel7, &List_GPDMA1_Channel7) != HAL_OK)
 80013d4:	491a      	ldr	r1, [pc, #104]	@ (8001440 <HAL_ADC_MspInit+0x254>)
 80013d6:	481b      	ldr	r0, [pc, #108]	@ (8001444 <HAL_ADC_MspInit+0x258>)
 80013d8:	f002 fed0 	bl	800417c <HAL_DMAEx_List_LinkQ>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_ADC_MspInit+0x1fa>
    {
      Error_Handler();
 80013e2:	f7ff fef5 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel7);
 80013e6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80013ea:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <HAL_ADC_MspInit+0x258>)
 80013f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80013f4:	4a13      	ldr	r2, [pc, #76]	@ (8001444 <HAL_ADC_MspInit+0x258>)
 80013f6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80013fa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001402:	2110      	movs	r1, #16
 8001404:	480f      	ldr	r0, [pc, #60]	@ (8001444 <HAL_ADC_MspInit+0x258>)
 8001406:	f002 fb42 	bl	8003a8e <HAL_DMA_ConfigChannelAttributes>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_ADC_MspInit+0x228>
    {
      Error_Handler();
 8001410:	f7ff fede 	bl	80011d0 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	2025      	movs	r0, #37	@ 0x25
 800141a:	f002 f89f 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800141e:	2025      	movs	r0, #37	@ 0x25
 8001420:	f002 f8b6 	bl	8003590 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001424:	bf00      	nop
 8001426:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	42028000 	.word	0x42028000
 8001434:	44020c00 	.word	0x44020c00
 8001438:	42020000 	.word	0x42020000
 800143c:	200002ac 	.word	0x200002ac
 8001440:	200002d0 	.word	0x200002d0
 8001444:	200002e8 	.word	0x200002e8
 8001448:	400203d0 	.word	0x400203d0

0800144c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0be      	sub	sp, #248	@ 0xf8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	22d0      	movs	r2, #208	@ 0xd0
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f006 fe35 	bl	80080dc <memset>
  if(hfdcan->Instance==FDCAN1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a3a      	ldr	r2, [pc, #232]	@ (8001560 <HAL_FDCAN_MspInit+0x114>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d16c      	bne.n	8001556 <HAL_FDCAN_MspInit+0x10a>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0304 	mov.w	r3, #4
 8001484:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_CSI;
 8001488:	2302      	movs	r3, #2
 800148a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 800148c:	2302      	movs	r3, #2
 800148e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 150;
 8001490:	2396      	movs	r3, #150	@ 0x96
 8001492:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001494:	2302      	movs	r3, #2
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 3;
 8001498:	2303      	movs	r3, #3
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800149c:	2302      	movs	r3, #2
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_1;
 80014a0:	2304      	movs	r3, #4
 80014a2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVQ;
 80014ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2Q;
 80014b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fb1c 	bl	8006afc <HAL_RCCEx_PeriphCLKConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_FDCAN_MspInit+0x82>
    {
      Error_Handler();
 80014ca:	f7ff fe81 	bl	80011d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80014ce:	4b25      	ldr	r3, [pc, #148]	@ (8001564 <HAL_FDCAN_MspInit+0x118>)
 80014d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80014d4:	4a23      	ldr	r2, [pc, #140]	@ (8001564 <HAL_FDCAN_MspInit+0x118>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014da:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80014de:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <HAL_FDCAN_MspInit+0x118>)
 80014e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80014e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <HAL_FDCAN_MspInit+0x118>)
 80014ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001564 <HAL_FDCAN_MspInit+0x118>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014fc:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <HAL_FDCAN_MspInit+0x118>)
 80014fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800150a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800150e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001524:	2309      	movs	r3, #9
 8001526:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800152e:	4619      	mov	r1, r3
 8001530:	480d      	ldr	r0, [pc, #52]	@ (8001568 <HAL_FDCAN_MspInit+0x11c>)
 8001532:	f004 fa29 	bl	8005988 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2027      	movs	r0, #39	@ 0x27
 800153c:	f002 f80e 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001540:	2027      	movs	r0, #39	@ 0x27
 8001542:	f002 f825 	bl	8003590 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	2028      	movs	r0, #40	@ 0x28
 800154c:	f002 f806 	bl	800355c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001550:	2028      	movs	r0, #40	@ 0x28
 8001552:	f002 f81d 	bl	8003590 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001556:	bf00      	nop
 8001558:	37f8      	adds	r7, #248	@ 0xf8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	4000a400 	.word	0x4000a400
 8001564:	44020c00 	.word	0x44020c00
 8001568:	42020000 	.word	0x42020000

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <NMI_Handler+0x4>

08001574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <MemManage_Handler+0x4>

08001584 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <UsageFault_Handler+0x4>

08001594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c2:	f000 f96f 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <GPDMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 7 global interrupt.
  */
void GPDMA1_Channel7_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 0 */

  /* USER CODE END GPDMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel7);
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <GPDMA1_Channel7_IRQHandler+0x10>)
 80015d2:	f002 f8fb 	bl	80037cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 1 */

  /* USER CODE END GPDMA1_Channel7_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200002e8 	.word	0x200002e8

080015e0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <ADC1_IRQHandler+0x10>)
 80015e6:	f000 fe87 	bl	80022f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000244 	.word	0x20000244

080015f4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <FDCAN1_IT0_IRQHandler+0x10>)
 80015fa:	f003 ff59 	bl	80054b0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000360 	.word	0x20000360

08001608 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <FDCAN1_IT1_IRQHandler+0x10>)
 800160e:	f003 ff4f 	bl	80054b0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000360 	.word	0x20000360

0800161c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <SystemInit+0xdc>)
 8001624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001628:	4a33      	ldr	r2, [pc, #204]	@ (80016f8 <SystemInit+0xdc>)
 800162a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800162e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001632:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <SystemInit+0xe0>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001638:	4b30      	ldr	r3, [pc, #192]	@ (80016fc <SystemInit+0xe0>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800163e:	4b2f      	ldr	r3, [pc, #188]	@ (80016fc <SystemInit+0xe0>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001644:	4b2d      	ldr	r3, [pc, #180]	@ (80016fc <SystemInit+0xe0>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	492c      	ldr	r1, [pc, #176]	@ (80016fc <SystemInit+0xe0>)
 800164a:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <SystemInit+0xe4>)
 800164c:	4013      	ands	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001650:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <SystemInit+0xe0>)
 8001652:	2200      	movs	r2, #0
 8001654:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001656:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <SystemInit+0xe0>)
 8001658:	2200      	movs	r2, #0
 800165a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800165c:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <SystemInit+0xe0>)
 800165e:	2200      	movs	r2, #0
 8001660:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001662:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <SystemInit+0xe0>)
 8001664:	4a27      	ldr	r2, [pc, #156]	@ (8001704 <SystemInit+0xe8>)
 8001666:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001668:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <SystemInit+0xe0>)
 800166a:	2200      	movs	r2, #0
 800166c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800166e:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <SystemInit+0xe0>)
 8001670:	4a24      	ldr	r2, [pc, #144]	@ (8001704 <SystemInit+0xe8>)
 8001672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001674:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <SystemInit+0xe0>)
 8001676:	2200      	movs	r2, #0
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <SystemInit+0xe0>)
 800167c:	4a21      	ldr	r2, [pc, #132]	@ (8001704 <SystemInit+0xe8>)
 800167e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001680:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <SystemInit+0xe0>)
 8001682:	2200      	movs	r2, #0
 8001684:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001686:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <SystemInit+0xe0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a1c      	ldr	r2, [pc, #112]	@ (80016fc <SystemInit+0xe0>)
 800168c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001690:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001692:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <SystemInit+0xe0>)
 8001694:	2200      	movs	r2, #0
 8001696:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001698:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <SystemInit+0xdc>)
 800169a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800169e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <SystemInit+0xec>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80016a8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80016b0:	d003      	beq.n	80016ba <SystemInit+0x9e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80016b8:	d117      	bne.n	80016ea <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <SystemInit+0xec>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <SystemInit+0xec>)
 80016c8:	4a10      	ldr	r2, [pc, #64]	@ (800170c <SystemInit+0xf0>)
 80016ca:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80016cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <SystemInit+0xec>)
 80016ce:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <SystemInit+0xf4>)
 80016d0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80016d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <SystemInit+0xec>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001708 <SystemInit+0xec>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <SystemInit+0xec>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a09      	ldr	r2, [pc, #36]	@ (8001708 <SystemInit+0xec>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	61d3      	str	r3, [r2, #28]
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00
 80016fc:	44020c00 	.word	0x44020c00
 8001700:	eae2eae3 	.word	0xeae2eae3
 8001704:	01010280 	.word	0x01010280
 8001708:	40022000 	.word	0x40022000
 800170c:	08192a3b 	.word	0x08192a3b
 8001710:	4c5d6e7f 	.word	0x4c5d6e7f

08001714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001714:	480d      	ldr	r0, [pc, #52]	@ (800174c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001716:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f7ff ff80 	bl	800161c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopForever+0x6>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopForever+0xe>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopForever+0x16>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001742:	f006 fcd3 	bl	80080ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001746:	f7ff fb57 	bl	8000df8 <main>

0800174a <LoopForever>:

LoopForever:
    b LoopForever
 800174a:	e7fe      	b.n	800174a <LoopForever>
  ldr   r0, =_estack
 800174c:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001758:	08008174 	.word	0x08008174
  ldr r2, =_sbss
 800175c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001760:	200003c8 	.word	0x200003c8

08001764 <ADC2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC2_IRQHandler>
	...

08001768 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f001 feea 	bl	8003546 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001772:	f005 f87b 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8001776:	4602      	mov	r2, r0
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_Init+0x44>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	490b      	ldr	r1, [pc, #44]	@ (80017b0 <HAL_Init+0x48>)
 8001782:	5ccb      	ldrb	r3, [r1, r3]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
 8001788:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <HAL_Init+0x4c>)
 800178a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800178c:	2004      	movs	r0, #4
 800178e:	f001 ff2f 	bl	80035f0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001792:	200f      	movs	r0, #15
 8001794:	f000 f810 	bl	80017b8 <HAL_InitTick>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e002      	b.n	80017a8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017a2:	f7ff fd1b 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	44020c00 	.word	0x44020c00
 80017b0:	0800814c 	.word	0x0800814c
 80017b4:	20000000 	.word	0x20000000

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80017c4:	4b33      	ldr	r3, [pc, #204]	@ (8001894 <HAL_InitTick+0xdc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e05c      	b.n	800188a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80017d0:	4b31      	ldr	r3, [pc, #196]	@ (8001898 <HAL_InitTick+0xe0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d10c      	bne.n	80017f6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80017dc:	4b2f      	ldr	r3, [pc, #188]	@ (800189c <HAL_InitTick+0xe4>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001894 <HAL_InitTick+0xdc>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e037      	b.n	8001866 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80017f6:	f001 ff53 	bl	80036a0 <HAL_SYSTICK_GetCLKSourceConfig>
 80017fa:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d023      	beq.n	800184a <HAL_InitTick+0x92>
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d82d      	bhi.n	8001864 <HAL_InitTick+0xac>
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_InitTick+0x5e>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d00d      	beq.n	8001830 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001814:	e026      	b.n	8001864 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001816:	4b21      	ldr	r3, [pc, #132]	@ (800189c <HAL_InitTick+0xe4>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <HAL_InitTick+0xdc>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	4619      	mov	r1, r3
 8001820:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001824:	fbb3 f3f1 	udiv	r3, r3, r1
 8001828:	fbb2 f3f3 	udiv	r3, r2, r3
 800182c:	60fb      	str	r3, [r7, #12]
        break;
 800182e:	e01a      	b.n	8001866 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001830:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <HAL_InitTick+0xdc>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183a:	fbb3 f3f2 	udiv	r3, r3, r2
 800183e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001842:	fbb2 f3f3 	udiv	r3, r2, r3
 8001846:	60fb      	str	r3, [r7, #12]
        break;
 8001848:	e00d      	b.n	8001866 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_InitTick+0xdc>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001854:	fbb3 f3f2 	udiv	r3, r3, r2
 8001858:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800185c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001860:	60fb      	str	r3, [r7, #12]
        break;
 8001862:	e000      	b.n	8001866 <HAL_InitTick+0xae>
        break;
 8001864:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f001 fea0 	bl	80035ac <HAL_SYSTICK_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e009      	b.n	800188a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001876:	2200      	movs	r2, #0
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	f04f 30ff 	mov.w	r0, #4294967295
 800187e:	f001 fe6d 	bl	800355c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001882:	4a07      	ldr	r2, [pc, #28]	@ (80018a0 <HAL_InitTick+0xe8>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008
 8001898:	e000e010 	.word	0xe000e010
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004

080018a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000008 	.word	0x20000008
 80018c8:	200003c4 	.word	0x200003c4

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	@ (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200003c4 	.word	0x200003c4

080018e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	609a      	str	r2, [r3, #8]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <LL_ADC_EnableChannel0_GPIO+0x24>)
 800197a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	42028000 	.word	0x42028000

08001998 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3360      	adds	r3, #96	@ 0x60
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <LL_ADC_SetOffset+0x44>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	4313      	orrs	r3, r2
 80019c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	03fff000 	.word	0x03fff000

080019e0 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3360      	adds	r3, #96	@ 0x60
 80019ee:	461a      	mov	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3360      	adds	r3, #96	@ 0x60
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b087      	sub	sp, #28
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3360      	adds	r3, #96	@ 0x60
 8001a52:	461a      	mov	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3360      	adds	r3, #96	@ 0x60
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	615a      	str	r2, [r3, #20]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b087      	sub	sp, #28
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3330      	adds	r3, #48	@ 0x30
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	4413      	add	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	211f      	movs	r1, #31
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	0e9b      	lsrs	r3, r3, #26
 8001b32:	f003 011f 	and.w	r1, r3, #31
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	431a      	orrs	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b46:	bf00      	nop
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3314      	adds	r3, #20
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	0e5b      	lsrs	r3, r3, #25
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	0d1b      	lsrs	r3, r3, #20
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2107      	movs	r1, #7
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	401a      	ands	r2, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	0d1b      	lsrs	r3, r3, #20
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bc2:	bf00      	nop
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001be8:	43db      	mvns	r3, r3
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0318 	and.w	r3, r3, #24
 8001bf2:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bf4:	40d9      	lsrs	r1, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	000fffff 	.word	0x000fffff

08001c18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 031f 	and.w	r3, r3, #31
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6093      	str	r3, [r2, #8]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c88:	d101      	bne.n	8001c8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cb0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cd8:	d101      	bne.n	8001cde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d28:	f043 0202 	orr.w	r2, r3, #2
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <LL_ADC_IsEnabled+0x18>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <LL_ADC_IsEnabled+0x1a>
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d101      	bne.n	8001d7a <LL_ADC_IsDisableOngoing+0x18>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_ADC_IsDisableOngoing+0x1a>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d9c:	f043 0204 	orr.w	r2, r3, #4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d101      	bne.n	8001dc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d101      	bne.n	8001dee <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b089      	sub	sp, #36	@ 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e136      	b.n	8002084 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff f9e1 	bl	80011ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff19 	bl	8001c74 <LL_ADC_IsDeepPowerDownEnabled>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff feff 	bl	8001c50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff34 	bl	8001cc4 <LL_ADC_IsInternalRegulatorEnabled>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d115      	bne.n	8001e8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff18 	bl	8001c9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e6c:	4b87      	ldr	r3, [pc, #540]	@ (800208c <HAL_ADC_Init+0x290>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	099b      	lsrs	r3, r3, #6
 8001e72:	4a87      	ldr	r2, [pc, #540]	@ (8002090 <HAL_ADC_Init+0x294>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	099b      	lsrs	r3, r3, #6
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e80:	e002      	b.n	8001e88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f9      	bne.n	8001e82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff16 	bl	8001cc4 <LL_ADC_IsInternalRegulatorEnabled>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10d      	bne.n	8001eba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	f043 0210 	orr.w	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff76 	bl	8001db0 <LL_ADC_REG_IsConversionOngoing>
 8001ec4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 80cf 	bne.w	8002072 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 80cb 	bne.w	8002072 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ee4:	f043 0202 	orr.w	r2, r3, #2
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff23 	bl	8001d3c <LL_ADC_IsEnabled>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d110      	bne.n	8001f1e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001efc:	4865      	ldr	r0, [pc, #404]	@ (8002094 <HAL_ADC_Init+0x298>)
 8001efe:	f7ff ff1d 	bl	8001d3c <LL_ADC_IsEnabled>
 8001f02:	4604      	mov	r4, r0
 8001f04:	4864      	ldr	r0, [pc, #400]	@ (8002098 <HAL_ADC_Init+0x29c>)
 8001f06:	f7ff ff19 	bl	8001d3c <LL_ADC_IsEnabled>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	4323      	orrs	r3, r4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4619      	mov	r1, r3
 8001f18:	4860      	ldr	r0, [pc, #384]	@ (800209c <HAL_ADC_Init+0x2a0>)
 8001f1a:	f7ff fce3 	bl	80018e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7e5b      	ldrb	r3, [r3, #25]
 8001f22:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f28:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f2e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f34:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f3c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d106      	bne.n	8001f5a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	3b01      	subs	r3, #1
 8001f52:	045b      	lsls	r3, r3, #17
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	4b48      	ldr	r3, [pc, #288]	@ (80020a0 <HAL_ADC_Init+0x2a4>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	69b9      	ldr	r1, [r7, #24]
 8001f86:	430b      	orrs	r3, r1
 8001f88:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff16 	bl	8001dd6 <LL_ADC_INJ_IsConversionOngoing>
 8001faa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d13d      	bne.n	800202e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d13a      	bne.n	800202e <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7e1b      	ldrb	r3, [r3, #24]
 8001fbc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fc4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fd4:	f023 0302 	bic.w	r3, r3, #2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	69b9      	ldr	r1, [r7, #24]
 8001fde:	430b      	orrs	r3, r1
 8001fe0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d118      	bne.n	800201e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002002:	4311      	orrs	r1, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002008:	4311      	orrs	r1, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800200e:	430a      	orrs	r2, r1
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	611a      	str	r2, [r3, #16]
 800201c:	e007      	b.n	800202e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d10c      	bne.n	8002050 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	f023 010f 	bic.w	r1, r3, #15
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	1e5a      	subs	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	631a      	str	r2, [r3, #48]	@ 0x30
 800204e:	e007      	b.n	8002060 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 020f 	bic.w	r2, r2, #15
 800205e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002064:	f023 0303 	bic.w	r3, r3, #3
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002070:	e007      	b.n	8002082 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002082:	7ffb      	ldrb	r3, [r7, #31]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3724      	adds	r7, #36	@ 0x24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	20000000 	.word	0x20000000
 8002090:	053e2d63 	.word	0x053e2d63
 8002094:	42028000 	.word	0x42028000
 8002098:	42028100 	.word	0x42028100
 800209c:	42028300 	.word	0x42028300
 80020a0:	fff04007 	.word	0xfff04007

080020a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b0a2      	sub	sp, #136	@ 0x88
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020b0:	488b      	ldr	r0, [pc, #556]	@ (80022e0 <HAL_ADC_Start_DMA+0x23c>)
 80020b2:	f7ff fdb1 	bl	8001c18 <LL_ADC_GetMultimode>
 80020b6:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fe77 	bl	8001db0 <LL_ADC_REG_IsConversionOngoing>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 8101 	bne.w	80022cc <HAL_ADC_Start_DMA+0x228>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_Start_DMA+0x34>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e0fe      	b.n	80022d6 <HAL_ADC_Start_DMA+0x232>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d003      	beq.n	80020f4 <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020ee:	2b09      	cmp	r3, #9
 80020f0:	f040 80e4 	bne.w	80022bc <HAL_ADC_Start_DMA+0x218>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 ff43 	bl	8002f80 <ADC_Enable>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002100:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002104:	2b00      	cmp	r3, #0
 8002106:	f040 80d4 	bne.w	80022b2 <HAL_ADC_Start_DMA+0x20e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a70      	ldr	r2, [pc, #448]	@ (80022e4 <HAL_ADC_Start_DMA+0x240>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d002      	beq.n	800212e <HAL_ADC_Start_DMA+0x8a>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	e000      	b.n	8002130 <HAL_ADC_Start_DMA+0x8c>
 800212e:	4b6e      	ldr	r3, [pc, #440]	@ (80022e8 <HAL_ADC_Start_DMA+0x244>)
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	4293      	cmp	r3, r2
 8002136:	d002      	beq.n	800213e <HAL_ADC_Start_DMA+0x9a>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002138:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d105      	bne.n	800214a <HAL_ADC_Start_DMA+0xa6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002142:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d006      	beq.n	8002164 <HAL_ADC_Start_DMA+0xc0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	f023 0206 	bic.w	r2, r3, #6
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002162:	e002      	b.n	800216a <HAL_ADC_Start_DMA+0xc6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216e:	4a5f      	ldr	r2, [pc, #380]	@ (80022ec <HAL_ADC_Start_DMA+0x248>)
 8002170:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002176:	4a5e      	ldr	r2, [pc, #376]	@ (80022f0 <HAL_ADC_Start_DMA+0x24c>)
 8002178:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217e:	4a5d      	ldr	r2, [pc, #372]	@ (80022f4 <HAL_ADC_Start_DMA+0x250>)
 8002180:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	221c      	movs	r2, #28
 8002188:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0210 	orr.w	r2, r2, #16
 80021a0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	60da      	str	r2, [r3, #12]

        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d04d      	beq.n	800225c <HAL_ADC_Start_DMA+0x1b8>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d046      	beq.n	8002258 <HAL_ADC_Start_DMA+0x1b4>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d040      	beq.n	8002258 <HAL_ADC_Start_DMA+0x1b4>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fe89 	bl	8003efc <HAL_DMAEx_List_GetNodeConfig>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_ADC_Start_DMA+0x150>
            {
              return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e070      	b.n	80022d6 <HAL_ADC_Start_DMA+0x232>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80021f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d104      	bne.n	8002204 <HAL_ADC_Start_DMA+0x160>
            {
              /* Word -> Bytes */
              length_bytes = Length * 4U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002202:	e00a      	b.n	800221a <HAL_ADC_Start_DMA+0x176>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002206:	2b01      	cmp	r3, #1
 8002208:	d104      	bne.n	8002214 <HAL_ADC_Start_DMA+0x170>
            {
              /* Halfword -> Bytes */
              length_bytes = Length * 2U;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002212:	e002      	b.n	800221a <HAL_ADC_Start_DMA+0x176>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              length_bytes = Length;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)length_bytes;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002226:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800223e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800224a:	4618      	mov	r0, r3
 800224c:	f001 fdac 	bl	8003da8 <HAL_DMAEx_List_Start_IT>
 8002250:	4603      	mov	r3, r0
 8002252:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002256:	e026      	b.n	80022a6 <HAL_ADC_Start_DMA+0x202>
          }
          else
          {
            return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e03c      	b.n	80022d6 <HAL_ADC_Start_DMA+0x232>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d104      	bne.n	8002270 <HAL_ADC_Start_DMA+0x1cc>
          {
            /* Word -> Bytes */
            length_bytes = Length * 4U;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800226e:	e00c      	b.n	800228a <HAL_ADC_Start_DMA+0x1e6>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d104      	bne.n	8002284 <HAL_ADC_Start_DMA+0x1e0>
          {
            /* Halfword -> Bytes */
            length_bytes = Length * 2U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002282:	e002      	b.n	800228a <HAL_ADC_Start_DMA+0x1e6>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            length_bytes = Length;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          /* Start the DMA channel */
          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3340      	adds	r3, #64	@ 0x40
 8002294:	4619      	mov	r1, r3
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800229c:	f001 fa36 	bl	800370c <HAL_DMA_Start_IT>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fd6c 	bl	8001d88 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80022b0:	e00f      	b.n	80022d2 <HAL_ADC_Start_DMA+0x22e>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 80022ba:	e00a      	b.n	80022d2 <HAL_ADC_Start_DMA+0x22e>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80022ca:	e002      	b.n	80022d2 <HAL_ADC_Start_DMA+0x22e>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
 80022ce:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  /* Return function status */
  return tmp_hal_status;
 80022d2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3788      	adds	r7, #136	@ 0x88
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	42028300 	.word	0x42028300
 80022e4:	42028100 	.word	0x42028100
 80022e8:	42028000 	.word	0x42028000
 80022ec:	08003143 	.word	0x08003143
 80022f0:	0800321b 	.word	0x0800321b
 80022f4:	08003237 	.word	0x08003237

080022f8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	@ 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002314:	4882      	ldr	r0, [pc, #520]	@ (8002520 <HAL_ADC_IRQHandler+0x228>)
 8002316:	f7ff fc7f 	bl	8001c18 <LL_ADC_GetMultimode>
 800231a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d017      	beq.n	8002356 <HAL_ADC_IRQHandler+0x5e>
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d012      	beq.n	8002356 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f001 f845 	bl	80033d8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2202      	movs	r2, #2
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HAL_ADC_IRQHandler+0x72>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 8083 	beq.w	800247c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d07d      	beq.n	800247c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fb99 	bl	8001ad4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d062      	beq.n	800246e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002524 <HAL_ADC_IRQHandler+0x22c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d002      	beq.n	80023b8 <HAL_ADC_IRQHandler+0xc0>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	e000      	b.n	80023ba <HAL_ADC_IRQHandler+0xc2>
 80023b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002528 <HAL_ADC_IRQHandler+0x230>)
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	4293      	cmp	r3, r2
 80023c0:	d008      	beq.n	80023d4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d002      	beq.n	80023d4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	d104      	bne.n	80023de <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	e00c      	b.n	80023f8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a50      	ldr	r2, [pc, #320]	@ (8002524 <HAL_ADC_IRQHandler+0x22c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d002      	beq.n	80023ee <HAL_ADC_IRQHandler+0xf6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	e000      	b.n	80023f0 <HAL_ADC_IRQHandler+0xf8>
 80023ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002528 <HAL_ADC_IRQHandler+0x230>)
 80023f0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d135      	bne.n	800246e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b08      	cmp	r3, #8
 800240e:	d12e      	bne.n	800246e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fccb 	bl	8001db0 <LL_ADC_REG_IsConversionOngoing>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d11a      	bne.n	8002456 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 020c 	bic.w	r2, r2, #12
 800242e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d112      	bne.n	800246e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	f043 0201 	orr.w	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	659a      	str	r2, [r3, #88]	@ 0x58
 8002454:	e00b      	b.n	800246e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	f043 0210 	orr.w	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002466:	f043 0201 	orr.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f95c 	bl	800272c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	220c      	movs	r2, #12
 800247a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <HAL_ADC_IRQHandler+0x198>
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 809f 	beq.w	80025da <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8099 	beq.w	80025da <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fb44 	bl	8001b52 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80024ca:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff faff 	bl	8001ad4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024d6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a11      	ldr	r2, [pc, #68]	@ (8002524 <HAL_ADC_IRQHandler+0x22c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d002      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x1f0>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	e000      	b.n	80024ea <HAL_ADC_IRQHandler+0x1f2>
 80024e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002528 <HAL_ADC_IRQHandler+0x230>)
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d008      	beq.n	8002504 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d002      	beq.n	8002504 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b07      	cmp	r3, #7
 8002502:	d104      	bne.n	800250e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	e013      	b.n	8002536 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a04      	ldr	r2, [pc, #16]	@ (8002524 <HAL_ADC_IRQHandler+0x22c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d009      	beq.n	800252c <HAL_ADC_IRQHandler+0x234>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	e007      	b.n	800252e <HAL_ADC_IRQHandler+0x236>
 800251e:	bf00      	nop
 8002520:	42028300 	.word	0x42028300
 8002524:	42028100 	.word	0x42028100
 8002528:	42028000 	.word	0x42028000
 800252c:	4b7d      	ldr	r3, [pc, #500]	@ (8002724 <HAL_ADC_IRQHandler+0x42c>)
 800252e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d047      	beq.n	80025cc <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_ADC_IRQHandler+0x25e>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d03f      	beq.n	80025cc <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d13a      	bne.n	80025cc <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002560:	2b40      	cmp	r3, #64	@ 0x40
 8002562:	d133      	bne.n	80025cc <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d12e      	bne.n	80025cc <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fc2f 	bl	8001dd6 <LL_ADC_INJ_IsConversionOngoing>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11a      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800258c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d112      	bne.n	80025cc <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80025b2:	e00b      	b.n	80025cc <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	f043 0210 	orr.w	r2, r3, #16
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fedb 	bl	8003388 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2260      	movs	r2, #96	@ 0x60
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d011      	beq.n	8002608 <HAL_ADC_IRQHandler+0x310>
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f8aa 	bl	8002754 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2280      	movs	r2, #128	@ 0x80
 8002606:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d012      	beq.n	8002638 <HAL_ADC_IRQHandler+0x340>
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fec1 	bl	80033b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800263e:	2b00      	cmp	r3, #0
 8002640:	d012      	beq.n	8002668 <HAL_ADC_IRQHandler+0x370>
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00d      	beq.n	8002668 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 feb3 	bl	80033c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002666:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d036      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x3e8>
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d031      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002684:	2301      	movs	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
 8002688:	e014      	b.n	80026b4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002690:	4825      	ldr	r0, [pc, #148]	@ (8002728 <HAL_ADC_IRQHandler+0x430>)
 8002692:	f7ff facf 	bl	8001c34 <LL_ADC_GetMultiDMATransfer>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800269c:	2301      	movs	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a0:	e008      	b.n	80026b4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80026b0:	2301      	movs	r3, #1
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10e      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026be:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	f043 0202 	orr.w	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f848 	bl	8002768 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2210      	movs	r2, #16
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d018      	beq.n	800271c <HAL_ADC_IRQHandler+0x424>
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002704:	f043 0208 	orr.w	r2, r3, #8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002714:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fe40 	bl	800339c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	@ 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	42028000 	.word	0x42028000
 8002728:	42028300 	.word	0x42028300

0800272c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b0b6      	sub	sp, #216	@ 0xd8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x22>
 800279a:	2302      	movs	r3, #2
 800279c:	e3d8      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x7d4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fb00 	bl	8001db0 <LL_ADC_REG_IsConversionOngoing>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 83bd 	bne.w	8002f32 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d104      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff f8d3 	bl	8001970 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f7ff f98f 	bl	8001afa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fae5 	bl	8001db0 <LL_ADC_REG_IsConversionOngoing>
 80027e6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff faf1 	bl	8001dd6 <LL_ADC_INJ_IsConversionOngoing>
 80027f4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f040 81d9 	bne.w	8002bb4 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002802:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 81d4 	bne.w	8002bb4 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002814:	d10f      	bne.n	8002836 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	4619      	mov	r1, r3
 8002822:	f7ff f9a9 	bl	8001b78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff f93d 	bl	8001aae <LL_ADC_SetSamplingTimeCommonConfig>
 8002834:	e00e      	b.n	8002854 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6819      	ldr	r1, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	461a      	mov	r2, r3
 8002844:	f7ff f998 	bl	8001b78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f92d 	bl	8001aae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	08db      	lsrs	r3, r3, #3
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b04      	cmp	r3, #4
 8002874:	d022      	beq.n	80028bc <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6919      	ldr	r1, [r3, #16]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002886:	f7ff f887 	bl	8001998 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6919      	ldr	r1, [r3, #16]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	461a      	mov	r2, r3
 8002898:	f7ff f8d3 	bl	8001a42 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d102      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x136>
 80028ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b0:	e000      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x138>
 80028b2:	2300      	movs	r3, #0
 80028b4:	461a      	mov	r2, r3
 80028b6:	f7ff f8df 	bl	8001a78 <LL_ADC_SetOffsetSaturation>
 80028ba:	e17b      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f88c 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x16c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f881 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	f003 021f 	and.w	r2, r3, #31
 80028e6:	e01e      	b.n	8002926 <HAL_ADC_ConfigChannel+0x1aa>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff f876 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8002906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800290a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 800290e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e004      	b.n	8002924 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800291a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <HAL_ADC_ConfigChannel+0x1c2>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	e018      	b.n	8002970 <HAL_ADC_ConfigChannel+0x1f4>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002952:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800295a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e004      	b.n	8002970 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8002966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002970:	429a      	cmp	r2, r3
 8002972:	d106      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff f845 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2101      	movs	r1, #1
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff f829 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x232>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff f81e 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	0e9b      	lsrs	r3, r3, #26
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	e01e      	b.n	80029ec <HAL_ADC_ConfigChannel+0x270>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2101      	movs	r1, #1
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f813 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80029cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80029d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e004      	b.n	80029ea <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 80029e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x288>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0e9b      	lsrs	r3, r3, #26
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	e018      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x2ba>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002a18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	e004      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8002a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d106      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2101      	movs	r1, #1
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe ffe2 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe ffc6 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x2f8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2102      	movs	r1, #2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe ffbb 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	0e9b      	lsrs	r3, r3, #26
 8002a6e:	f003 021f 	and.w	r2, r3, #31
 8002a72:	e01e      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x336>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2102      	movs	r1, #2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe ffb0 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002a92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002a9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8002aa2:	2320      	movs	r3, #32
 8002aa4:	e004      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8002aa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x34e>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	f003 031f 	and.w	r3, r3, #31
 8002ac8:	e016      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x37c>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002adc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ade:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e004      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8002aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002af2:	fab3 f383 	clz	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d106      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2200      	movs	r2, #0
 8002b02:	2102      	movs	r1, #2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe ff81 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2103      	movs	r1, #3
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe ff65 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x3ba>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2103      	movs	r1, #3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe ff5a 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	0e9b      	lsrs	r3, r3, #26
 8002b30:	f003 021f 	and.w	r2, r3, #31
 8002b34:	e017      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x3ea>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2103      	movs	r1, #3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe ff4f 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002b42:	4603      	mov	r3, r0
 8002b44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b50:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002b52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e003      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8002b5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x402>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	0e9b      	lsrs	r3, r3, #26
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	e011      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x426>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002b8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8002b96:	2320      	movs	r3, #32
 8002b98:	e003      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8002b9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d106      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	2103      	movs	r1, #3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe ff2c 	bl	8001a0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff f8bf 	bl	8001d3c <LL_ADC_IsEnabled>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f040 813f 	bne.w	8002e44 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f7fe fffc 	bl	8001bd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a8e      	ldr	r2, [pc, #568]	@ (8002e18 <HAL_ADC_ConfigChannel+0x69c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	f040 8130 	bne.w	8002e44 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x490>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0e9b      	lsrs	r3, r3, #26
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2b09      	cmp	r3, #9
 8002c02:	bf94      	ite	ls
 8002c04:	2301      	movls	r3, #1
 8002c06:	2300      	movhi	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e019      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x4c4>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002c1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c1c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e003      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002c28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	2b09      	cmp	r3, #9
 8002c38:	bf94      	ite	ls
 8002c3a:	2301      	movls	r3, #1
 8002c3c:	2300      	movhi	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d079      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d107      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x4e4>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0e9b      	lsrs	r3, r3, #26
 8002c56:	3301      	adds	r3, #1
 8002c58:	069b      	lsls	r3, r3, #26
 8002c5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c5e:	e015      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x510>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c70:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e003      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8002c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	069b      	lsls	r3, r3, #26
 8002c88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x530>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	e017      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x560>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002cc4:	2320      	movs	r3, #32
 8002cc6:	e003      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8002cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	ea42 0103 	orr.w	r1, r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x586>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f003 021f 	and.w	r2, r3, #31
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	051b      	lsls	r3, r3, #20
 8002d00:	e018      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x5b8>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	e003      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8002d1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d34:	430b      	orrs	r3, r1
 8002d36:	e080      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d107      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x5d8>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0e9b      	lsrs	r3, r3, #26
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	069b      	lsls	r3, r3, #26
 8002d4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d52:	e015      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x604>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d64:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	e003      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8002d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	3301      	adds	r3, #1
 8002d7a:	069b      	lsls	r3, r3, #26
 8002d7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x624>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	0e9b      	lsrs	r3, r3, #26
 8002d92:	3301      	adds	r3, #1
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	2101      	movs	r1, #1
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	e017      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x654>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	61fb      	str	r3, [r7, #28]
  return result;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8002db8:	2320      	movs	r3, #32
 8002dba:	e003      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2101      	movs	r1, #1
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	ea42 0103 	orr.w	r1, r2, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10d      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x680>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	0e9b      	lsrs	r3, r3, #26
 8002de6:	3301      	adds	r3, #1
 8002de8:	f003 021f 	and.w	r2, r3, #31
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	3b1e      	subs	r3, #30
 8002df4:	051b      	lsls	r3, r3, #20
 8002df6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dfa:	e01d      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x6bc>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	613b      	str	r3, [r7, #16]
  return result;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d103      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002e14:	2320      	movs	r3, #32
 8002e16:	e005      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x6a8>
 8002e18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	f003 021f 	and.w	r2, r3, #31
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	3b1e      	subs	r3, #30
 8002e32:	051b      	lsls	r3, r3, #20
 8002e34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f7fe fe9a 	bl	8001b78 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b43      	ldr	r3, [pc, #268]	@ (8002f58 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d079      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e50:	4842      	ldr	r0, [pc, #264]	@ (8002f5c <HAL_ADC_ConfigChannel+0x7e0>)
 8002e52:	f7fe fd6d 	bl	8001930 <LL_ADC_GetCommonPathInternalCh>
 8002e56:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a40      	ldr	r2, [pc, #256]	@ (8002f60 <HAL_ADC_ConfigChannel+0x7e4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d124      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11e      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a3b      	ldr	r2, [pc, #236]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7e8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d164      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e82:	4619      	mov	r1, r3
 8002e84:	4835      	ldr	r0, [pc, #212]	@ (8002f5c <HAL_ADC_ConfigChannel+0x7e0>)
 8002e86:	f7fe fd40 	bl	800190a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e8a:	4b37      	ldr	r3, [pc, #220]	@ (8002f68 <HAL_ADC_ConfigChannel+0x7ec>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	4a36      	ldr	r2, [pc, #216]	@ (8002f6c <HAL_ADC_ConfigChannel+0x7f0>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	3301      	adds	r3, #1
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e9e:	e002      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f9      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eac:	e04a      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8002f70 <HAL_ADC_ConfigChannel+0x7f4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d113      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002eb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8002f74 <HAL_ADC_ConfigChannel+0x7f8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d13a      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ece:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4820      	ldr	r0, [pc, #128]	@ (8002f5c <HAL_ADC_ConfigChannel+0x7e0>)
 8002eda:	f7fe fd16 	bl	800190a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ede:	e031      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a24      	ldr	r2, [pc, #144]	@ (8002f78 <HAL_ADC_ConfigChannel+0x7fc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d113      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1a      	ldr	r2, [pc, #104]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7e8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d121      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4814      	ldr	r0, [pc, #80]	@ (8002f5c <HAL_ADC_ConfigChannel+0x7e0>)
 8002f0c:	f7fe fcfd 	bl	800190a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f10:	e018      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a19      	ldr	r2, [pc, #100]	@ (8002f7c <HAL_ADC_ConfigChannel+0x800>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d113      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a10      	ldr	r2, [pc, #64]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7e8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe fd0e 	bl	800194c <LL_ADC_EnableChannelVDDcore>
 8002f30:	e008      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	f043 0220 	orr.w	r2, r3, #32
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002f4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	37d8      	adds	r7, #216	@ 0xd8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	80080000 	.word	0x80080000
 8002f5c:	42028300 	.word	0x42028300
 8002f60:	c3210000 	.word	0xc3210000
 8002f64:	42028000 	.word	0x42028000
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	053e2d63 	.word	0x053e2d63
 8002f70:	43290000 	.word	0x43290000
 8002f74:	42028100 	.word	0x42028100
 8002f78:	c7520000 	.word	0xc7520000
 8002f7c:	475a0000 	.word	0x475a0000

08002f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe fed3 	bl	8001d3c <LL_ADC_IsEnabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d166      	bne.n	800306a <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	4b34      	ldr	r3, [pc, #208]	@ (8003074 <ADC_Enable+0xf4>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00d      	beq.n	8002fc6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fae:	f043 0210 	orr.w	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	f043 0201 	orr.w	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e052      	b.n	800306c <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe fe8e 	bl	8001cec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fd0:	4829      	ldr	r0, [pc, #164]	@ (8003078 <ADC_Enable+0xf8>)
 8002fd2:	f7fe fcad 	bl	8001930 <LL_ADC_GetCommonPathInternalCh>
 8002fd6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002fd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe0:	4b26      	ldr	r3, [pc, #152]	@ (800307c <ADC_Enable+0xfc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	4a26      	ldr	r2, [pc, #152]	@ (8003080 <ADC_Enable+0x100>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	3301      	adds	r3, #1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ff4:	e002      	b.n	8002ffc <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f9      	bne.n	8002ff6 <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003002:	f7fe fc63 	bl	80018cc <HAL_GetTick>
 8003006:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003008:	e028      	b.n	800305c <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fe94 	bl	8001d3c <LL_ADC_IsEnabled>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d104      	bne.n	8003024 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe fe64 	bl	8001cec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003024:	f7fe fc52 	bl	80018cc <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d914      	bls.n	800305c <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d00d      	beq.n	800305c <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	f043 0210 	orr.w	r2, r3, #16
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	f043 0201 	orr.w	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e007      	b.n	800306c <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d1cf      	bne.n	800300a <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	8000003f 	.word	0x8000003f
 8003078:	42028300 	.word	0x42028300
 800307c:	20000000 	.word	0x20000000
 8003080:	053e2d63 	.word	0x053e2d63

08003084 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe fe66 	bl	8001d62 <LL_ADC_IsDisableOngoing>
 8003096:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fe4d 	bl	8001d3c <LL_ADC_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d047      	beq.n	8003138 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d144      	bne.n	8003138 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030d 	and.w	r3, r3, #13
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10c      	bne.n	80030d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe fe27 	bl	8001d14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2203      	movs	r2, #3
 80030cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030ce:	f7fe fbfd 	bl	80018cc <HAL_GetTick>
 80030d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030d4:	e029      	b.n	800312a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030da:	f043 0210 	orr.w	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e023      	b.n	800313a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030f2:	f7fe fbeb 	bl	80018cc <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d914      	bls.n	800312a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003112:	f043 0210 	orr.w	r2, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e007      	b.n	800313a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1dc      	bne.n	80030f2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003158:	2b00      	cmp	r3, #0
 800315a:	d14b      	bne.n	80031f4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003160:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d021      	beq.n	80031ba <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fcaa 	bl	8001ad4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d032      	beq.n	80031ec <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d12b      	bne.n	80031ec <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d11f      	bne.n	80031ec <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80031b8:	e018      	b.n	80031ec <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d111      	bne.n	80031ec <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7ff fa9d 	bl	800272c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031f2:	e00e      	b.n	8003212 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff fab1 	bl	8002768 <HAL_ADC_ErrorCallback>
}
 8003206:	e004      	b.n	8003212 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003226:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f7ff fa89 	bl	8002740 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003248:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f7ff fa83 	bl	8002768 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003262:	bf00      	nop
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <LL_ADC_StartCalibration>:
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800327c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003286:	4313      	orrs	r3, r2
 8003288:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_ADC_IsCalibrationOnGoing>:
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032b0:	d101      	bne.n	80032b6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80032dc:	2302      	movs	r3, #2
 80032de:	e04d      	b.n	800337c <HAL_ADCEx_Calibration_Start+0xb8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff fecb 	bl	8003084 <ADC_Disable>
 80032ee:	4603      	mov	r3, r0
 80032f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d136      	bne.n	8003366 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003300:	f023 0302 	bic.w	r3, r3, #2
 8003304:	f043 0202 	orr.w	r2, r3, #2
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6839      	ldr	r1, [r7, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ffa9 	bl	800326a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003318:	e014      	b.n	8003344 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	3301      	adds	r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4a18      	ldr	r2, [pc, #96]	@ (8003384 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d30d      	bcc.n	8003344 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332c:	f023 0312 	bic.w	r3, r3, #18
 8003330:	f043 0210 	orr.w	r2, r3, #16
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e01b      	b.n	800337c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ffa7 	bl	800329c <LL_ADC_IsCalibrationOnGoing>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e2      	bne.n	800331a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	f023 0303 	bic.w	r3, r3, #3
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	659a      	str	r2, [r3, #88]	@ 0x58
 8003364:	e005      	b.n	8003372 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336a:	f043 0210 	orr.w	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800337a:	7bfb      	ldrb	r3, [r7, #15]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	25c3f800 	.word	0x25c3f800

08003388 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003408:	4013      	ands	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800341c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341e:	4a04      	ldr	r2, [pc, #16]	@ (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	60d3      	str	r3, [r2, #12]
}
 8003424:	bf00      	nop
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003438:	4b04      	ldr	r3, [pc, #16]	@ (800344c <__NVIC_GetPriorityGrouping+0x18>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 0307 	and.w	r3, r3, #7
}
 8003442:	4618      	mov	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800345a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800345e:	2b00      	cmp	r3, #0
 8003460:	db0b      	blt.n	800347a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	4907      	ldr	r1, [pc, #28]	@ (8003488 <__NVIC_EnableIRQ+0x38>)
 800346a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2001      	movs	r0, #1
 8003472:	fa00 f202 	lsl.w	r2, r0, r2
 8003476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000e100 	.word	0xe000e100

0800348c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800349c:	2b00      	cmp	r3, #0
 800349e:	db0a      	blt.n	80034b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	490c      	ldr	r1, [pc, #48]	@ (80034d8 <__NVIC_SetPriority+0x4c>)
 80034a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	440b      	add	r3, r1
 80034b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b4:	e00a      	b.n	80034cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4908      	ldr	r1, [pc, #32]	@ (80034dc <__NVIC_SetPriority+0x50>)
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	3b04      	subs	r3, #4
 80034c4:	0112      	lsls	r2, r2, #4
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	440b      	add	r3, r1
 80034ca:	761a      	strb	r2, [r3, #24]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	@ 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f1c3 0307 	rsb	r3, r3, #7
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	bf28      	it	cs
 80034fe:	2304      	movcs	r3, #4
 8003500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3304      	adds	r3, #4
 8003506:	2b06      	cmp	r3, #6
 8003508:	d902      	bls.n	8003510 <NVIC_EncodePriority+0x30>
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3b03      	subs	r3, #3
 800350e:	e000      	b.n	8003512 <NVIC_EncodePriority+0x32>
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	401a      	ands	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003528:	f04f 31ff 	mov.w	r1, #4294967295
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	43d9      	mvns	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	4313      	orrs	r3, r2
         );
}
 800353a:	4618      	mov	r0, r3
 800353c:	3724      	adds	r7, #36	@ 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ff4c 	bl	80033ec <__NVIC_SetPriorityGrouping>
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800356a:	f7ff ff63 	bl	8003434 <__NVIC_GetPriorityGrouping>
 800356e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	6978      	ldr	r0, [r7, #20]
 8003576:	f7ff ffb3 	bl	80034e0 <NVIC_EncodePriority>
 800357a:	4602      	mov	r2, r0
 800357c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff ff82 	bl	800348c <__NVIC_SetPriority>
}
 8003588:	bf00      	nop
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff56 	bl	8003450 <__NVIC_EnableIRQ>
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035bc:	d301      	bcc.n	80035c2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80035be:	2301      	movs	r3, #1
 80035c0:	e00d      	b.n	80035de <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80035c2:	4a0a      	ldr	r2, [pc, #40]	@ (80035ec <HAL_SYSTICK_Config+0x40>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80035ca:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <HAL_SYSTICK_Config+0x40>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80035d0:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <HAL_SYSTICK_Config+0x40>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a05      	ldr	r2, [pc, #20]	@ (80035ec <HAL_SYSTICK_Config+0x40>)
 80035d6:	f043 0303 	orr.w	r3, r3, #3
 80035da:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000e010 	.word	0xe000e010

080035f0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d844      	bhi.n	8003688 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80035fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003604 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003627 	.word	0x08003627
 8003608:	08003645 	.word	0x08003645
 800360c:	08003667 	.word	0x08003667
 8003610:	08003689 	.word	0x08003689
 8003614:	08003619 	.word	0x08003619
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003618:	4b1f      	ldr	r3, [pc, #124]	@ (8003698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1e      	ldr	r2, [pc, #120]	@ (8003698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6013      	str	r3, [r2, #0]
      break;
 8003624:	e031      	b.n	800368a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003626:	4b1c      	ldr	r3, [pc, #112]	@ (8003698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1b      	ldr	r2, [pc, #108]	@ (8003698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003632:	4b1a      	ldr	r3, [pc, #104]	@ (800369c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003634:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003638:	4a18      	ldr	r2, [pc, #96]	@ (800369c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800363a:	f023 030c 	bic.w	r3, r3, #12
 800363e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003642:	e022      	b.n	800368a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003644:	4b14      	ldr	r3, [pc, #80]	@ (8003698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a13      	ldr	r2, [pc, #76]	@ (8003698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800364a:	f023 0304 	bic.w	r3, r3, #4
 800364e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003650:	4b12      	ldr	r3, [pc, #72]	@ (800369c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003652:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003656:	f023 030c 	bic.w	r3, r3, #12
 800365a:	4a10      	ldr	r2, [pc, #64]	@ (800369c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003664:	e011      	b.n	800368a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003666:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a0b      	ldr	r2, [pc, #44]	@ (8003698 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8003672:	4b0a      	ldr	r3, [pc, #40]	@ (800369c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003674:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003678:	f023 030c 	bic.w	r3, r3, #12
 800367c:	4a07      	ldr	r2, [pc, #28]	@ (800369c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800367e:	f043 0308 	orr.w	r3, r3, #8
 8003682:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003686:	e000      	b.n	800368a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003688:	bf00      	nop
  }
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	e000e010 	.word	0xe000e010
 800369c:	44020c00 	.word	0x44020c00

080036a0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80036a6:	4b17      	ldr	r3, [pc, #92]	@ (8003704 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80036b2:	2304      	movs	r3, #4
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	e01e      	b.n	80036f6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80036b8:	4b13      	ldr	r3, [pc, #76]	@ (8003708 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80036ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d00f      	beq.n	80036ea <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d80f      	bhi.n	80036f0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d003      	beq.n	80036e4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80036dc:	e008      	b.n	80036f0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
        break;
 80036e2:	e008      	b.n	80036f6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80036e4:	2301      	movs	r3, #1
 80036e6:	607b      	str	r3, [r7, #4]
        break;
 80036e8:	e005      	b.n	80036f6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80036ea:	2302      	movs	r3, #2
 80036ec:	607b      	str	r3, [r7, #4]
        break;
 80036ee:	e002      	b.n	80036f6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80036f0:	2300      	movs	r3, #0
 80036f2:	607b      	str	r3, [r7, #4]
        break;
 80036f4:	bf00      	nop
    }
  }
  return systick_source;
 80036f6:	687b      	ldr	r3, [r7, #4]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000e010 	.word	0xe000e010
 8003708:	44020c00 	.word	0x44020c00

0800370c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e04f      	b.n	80037c4 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_DMA_Start_IT+0x26>
 800372e:	2302      	movs	r3, #2
 8003730:	e048      	b.n	80037c4 <HAL_DMA_Start_IT+0xb8>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d136      	bne.n	80037b4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f9d3 	bl	8003b06 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 800376e:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003786:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800379e:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e007      	b.n	80037c4 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2240      	movs	r2, #64	@ 0x40
 80037b8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80037dc:	f023 030f 	bic.w	r3, r3, #15
 80037e0:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ea:	3b50      	subs	r3, #80	@ 0x50
 80037ec:	09db      	lsrs	r3, r3, #7
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2201      	movs	r2, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 813b 	beq.w	8003a82 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d011      	beq.n	800383e <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003830:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003848:	2b00      	cmp	r3, #0
 800384a:	d011      	beq.n	8003870 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003862:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003868:	f043 0202 	orr.w	r2, r3, #2
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d011      	beq.n	80038a2 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003894:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389a:	f043 0204 	orr.w	r2, r3, #4
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d011      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038c6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038cc:	f043 0208 	orr.w	r2, r3, #8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d013      	beq.n	800390a <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00c      	beq.n	800390a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038f8:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d04c      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d045      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800392e:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b04      	cmp	r3, #4
 800393a:	d12e      	bne.n	800399a <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800394a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0202 	orr.w	r2, r2, #2
 800395a:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003974:	2201      	movs	r2, #1
 8003976:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2200      	movs	r2, #0
 800397e:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d07a      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	4798      	blx	r3
        }

        return;
 8003998:	e075      	b.n	8003a86 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2205      	movs	r2, #5
 800399e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d039      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d032      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d012      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d116      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d111      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fa:	2201      	movs	r2, #1
 80039fc:	731a      	strb	r2, [r3, #12]
 80039fe:	e008      	b.n	8003a12 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003a1a:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d025      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0202 	orr.w	r2, r2, #2
 8003a4a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a64:	2201      	movs	r2, #1
 8003a66:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
 8003a80:	e002      	b.n	8003a88 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8003a86:	bf00      	nop
    }
  }
}
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b085      	sub	sp, #20
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e02b      	b.n	8003afa <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003aaa:	f023 030f 	bic.w	r3, r3, #15
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab8:	3b50      	subs	r3, #80	@ 0x50
 8003aba:	09db      	lsrs	r3, r3, #7
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d012      	beq.n	8003af8 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f003 0311 	and.w	r3, r3, #17
 8003ad8:	2b11      	cmp	r3, #17
 8003ada:	d106      	bne.n	8003aea <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	605a      	str	r2, [r3, #4]
 8003ae8:	e006      	b.n	8003af8 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	401a      	ands	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	b291      	uxth	r1, r2
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	430b      	orrs	r3, r1
 8003b28:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8003b32:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7fd feb8 	bl	80018cc <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0db      	b.n	8003d20 <HAL_DMAEx_List_Init+0x1d0>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d28 <HAL_DMAEx_List_Init+0x1d8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	f000 809f 	beq.w	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a6c      	ldr	r2, [pc, #432]	@ (8003d2c <HAL_DMAEx_List_Init+0x1dc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	f000 8099 	beq.w	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a6a      	ldr	r2, [pc, #424]	@ (8003d30 <HAL_DMAEx_List_Init+0x1e0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	f000 8093 	beq.w	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a68      	ldr	r2, [pc, #416]	@ (8003d34 <HAL_DMAEx_List_Init+0x1e4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f000 808d 	beq.w	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a66      	ldr	r2, [pc, #408]	@ (8003d38 <HAL_DMAEx_List_Init+0x1e8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	f000 8087 	beq.w	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a64      	ldr	r2, [pc, #400]	@ (8003d3c <HAL_DMAEx_List_Init+0x1ec>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	f000 8081 	beq.w	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a62      	ldr	r2, [pc, #392]	@ (8003d40 <HAL_DMAEx_List_Init+0x1f0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d07b      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a61      	ldr	r2, [pc, #388]	@ (8003d44 <HAL_DMAEx_List_Init+0x1f4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d076      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5f      	ldr	r2, [pc, #380]	@ (8003d48 <HAL_DMAEx_List_Init+0x1f8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d071      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a5e      	ldr	r2, [pc, #376]	@ (8003d4c <HAL_DMAEx_List_Init+0x1fc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d06c      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a5c      	ldr	r2, [pc, #368]	@ (8003d50 <HAL_DMAEx_List_Init+0x200>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d067      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d54 <HAL_DMAEx_List_Init+0x204>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d062      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a59      	ldr	r2, [pc, #356]	@ (8003d58 <HAL_DMAEx_List_Init+0x208>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d05d      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a58      	ldr	r2, [pc, #352]	@ (8003d5c <HAL_DMAEx_List_Init+0x20c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d058      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a56      	ldr	r2, [pc, #344]	@ (8003d60 <HAL_DMAEx_List_Init+0x210>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d053      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a55      	ldr	r2, [pc, #340]	@ (8003d64 <HAL_DMAEx_List_Init+0x214>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d04e      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a53      	ldr	r2, [pc, #332]	@ (8003d68 <HAL_DMAEx_List_Init+0x218>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d049      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a52      	ldr	r2, [pc, #328]	@ (8003d6c <HAL_DMAEx_List_Init+0x21c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d044      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a50      	ldr	r2, [pc, #320]	@ (8003d70 <HAL_DMAEx_List_Init+0x220>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d03f      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a4f      	ldr	r2, [pc, #316]	@ (8003d74 <HAL_DMAEx_List_Init+0x224>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d03a      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a4d      	ldr	r2, [pc, #308]	@ (8003d78 <HAL_DMAEx_List_Init+0x228>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d035      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a4c      	ldr	r2, [pc, #304]	@ (8003d7c <HAL_DMAEx_List_Init+0x22c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d030      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a4a      	ldr	r2, [pc, #296]	@ (8003d80 <HAL_DMAEx_List_Init+0x230>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d02b      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a49      	ldr	r2, [pc, #292]	@ (8003d84 <HAL_DMAEx_List_Init+0x234>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d026      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a47      	ldr	r2, [pc, #284]	@ (8003d88 <HAL_DMAEx_List_Init+0x238>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d021      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a46      	ldr	r2, [pc, #280]	@ (8003d8c <HAL_DMAEx_List_Init+0x23c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d01c      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a44      	ldr	r2, [pc, #272]	@ (8003d90 <HAL_DMAEx_List_Init+0x240>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d017      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a43      	ldr	r2, [pc, #268]	@ (8003d94 <HAL_DMAEx_List_Init+0x244>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d012      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a41      	ldr	r2, [pc, #260]	@ (8003d98 <HAL_DMAEx_List_Init+0x248>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00d      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a40      	ldr	r2, [pc, #256]	@ (8003d9c <HAL_DMAEx_List_Init+0x24c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d008      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a3e      	ldr	r2, [pc, #248]	@ (8003da0 <HAL_DMAEx_List_Init+0x250>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <HAL_DMAEx_List_Init+0x162>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a3d      	ldr	r2, [pc, #244]	@ (8003da4 <HAL_DMAEx_List_Init+0x254>)
 8003cb0:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0206 	orr.w	r2, r2, #6
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003cd2:	e00f      	b.n	8003cf4 <HAL_DMAEx_List_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003cd4:	f7fd fdfa 	bl	80018cc <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b05      	cmp	r3, #5
 8003ce0:	d908      	bls.n	8003cf4 <HAL_DMAEx_List_Init+0x1a4>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2203      	movs	r2, #3
 8003cec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e015      	b.n	8003d20 <HAL_DMAEx_List_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e8      	bne.n	8003cd4 <HAL_DMAEx_List_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 fad0 	bl	80042a8 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40020050 	.word	0x40020050
 8003d2c:	50020050 	.word	0x50020050
 8003d30:	400200d0 	.word	0x400200d0
 8003d34:	500200d0 	.word	0x500200d0
 8003d38:	40020150 	.word	0x40020150
 8003d3c:	50020150 	.word	0x50020150
 8003d40:	400201d0 	.word	0x400201d0
 8003d44:	500201d0 	.word	0x500201d0
 8003d48:	40020250 	.word	0x40020250
 8003d4c:	50020250 	.word	0x50020250
 8003d50:	400202d0 	.word	0x400202d0
 8003d54:	500202d0 	.word	0x500202d0
 8003d58:	40020350 	.word	0x40020350
 8003d5c:	50020350 	.word	0x50020350
 8003d60:	400203d0 	.word	0x400203d0
 8003d64:	500203d0 	.word	0x500203d0
 8003d68:	40021050 	.word	0x40021050
 8003d6c:	50021050 	.word	0x50021050
 8003d70:	400210d0 	.word	0x400210d0
 8003d74:	500210d0 	.word	0x500210d0
 8003d78:	40021150 	.word	0x40021150
 8003d7c:	50021150 	.word	0x50021150
 8003d80:	400211d0 	.word	0x400211d0
 8003d84:	500211d0 	.word	0x500211d0
 8003d88:	40021250 	.word	0x40021250
 8003d8c:	50021250 	.word	0x50021250
 8003d90:	400212d0 	.word	0x400212d0
 8003d94:	500212d0 	.word	0x500212d0
 8003d98:	40021350 	.word	0x40021350
 8003d9c:	50021350 	.word	0x50021350
 8003da0:	400213d0 	.word	0x400213d0
 8003da4:	500213d0 	.word	0x500213d0

08003da8 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_DMAEx_List_Start_IT+0x16>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e082      	b.n	8003ec8 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003dc8:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd4:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d005      	beq.n	8003de8 <HAL_DMAEx_List_Start_IT+0x40>
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d16a      	bne.n	8003eb8 <HAL_DMAEx_List_Start_IT+0x110>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d067      	beq.n	8003eb8 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d157      	bne.n	8003ea4 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_DMAEx_List_Start_IT+0x5a>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e062      	b.n	8003ec8 <HAL_DMAEx_List_Start_IT+0x120>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e16:	2202      	movs	r2, #2
 8003e18:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e24:	2200      	movs	r2, #0
 8003e26:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8003e36:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e66:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f107 010c 	add.w	r1, r7, #12
 8003e72:	2200      	movs	r2, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fe3d 	bl	8004af4 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4619      	mov	r1, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	0c0b      	lsrs	r3, r1, #16
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003e98:	4013      	ands	r3, r2
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e007      	b.n	8003ec8 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2240      	movs	r2, #64	@ 0x40
 8003ebc:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_DMAEx_List_BuildNode+0x16>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e004      	b.n	8003ef4 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8003eea:	6839      	ldr	r1, [r7, #0]
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fb33 	bl	8004558 <DMA_List_BuildNode>

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <HAL_DMAEx_List_GetNodeConfig+0x16>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e004      	b.n	8003f20 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8003f16:	6839      	ldr	r1, [r7, #0]
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fc75 	bl	8004808 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	@ 0x30
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_DMAEx_List_InsertNode+0x18>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0b6      	b.n	80040b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d104      	bne.n	8003f56 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2204      	movs	r2, #4
 8003f50:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0ad      	b.n	80040b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fd5c 	bl	8004a1c <DMA_List_CheckNodesBaseAddresses>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d004      	beq.n	8003f74 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2205      	movs	r2, #5
 8003f6e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e09e      	b.n	80040b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fd7d 	bl	8004a7c <DMA_List_CheckNodesTypes>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e08f      	b.n	80040b2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2202      	movs	r2, #2
 8003f96:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003f9e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003fa2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fda3 	bl	8004af4 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d11a      	bne.n	8003fec <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	e06c      	b.n	80040a4 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fdc:	4319      	orrs	r1, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	e05b      	b.n	80040a4 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004002:	4319      	orrs	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e043      	b.n	800409a <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8004012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004014:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8004016:	f107 0314 	add.w	r3, r7, #20
 800401a:	461a      	mov	r2, r3
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fd98 	bl	8004b54 <DMA_List_FindNode>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d132      	bne.n	8004090 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	429a      	cmp	r2, r3
 8004032:	d11a      	bne.n	800406a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00b      	beq.n	8004054 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	461a      	mov	r2, r3
 8004042:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004046:	4013      	ands	r3, r2
 8004048:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800404a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800404c:	4319      	orrs	r1, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800405a:	4013      	ands	r3, r2
 800405c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800405e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004060:	4319      	orrs	r1, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004068:	e017      	b.n	800409a <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800406a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800406c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004080:	4013      	ands	r3, r2
 8004082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004086:	4319      	orrs	r1, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800408e:	e004      	b.n	800409a <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2206      	movs	r2, #6
 8004094:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e00b      	b.n	80040b2 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3730      	adds	r7, #48	@ 0x30
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b08a      	sub	sp, #40	@ 0x28
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e052      	b.n	8004172 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e049      	b.n	8004172 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00c      	beq.n	8004100 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d101      	bne.n	80040f6 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e03d      	b.n	8004172 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2204      	movs	r2, #4
 80040fa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e038      	b.n	8004172 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d104      	bne.n	8004112 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2204      	movs	r2, #4
 800410c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e02f      	b.n	8004172 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f107 0220 	add.w	r2, r7, #32
 8004126:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fce2 	bl	8004af4 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8004134:	f107 030c 	add.w	r3, r7, #12
 8004138:	461a      	mov	r2, r3
 800413a:	2100      	movs	r1, #0
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fd09 	bl	8004b54 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800414c:	4013      	ands	r3, r2
 800414e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4610      	mov	r0, r2
 8004154:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004156:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8004158:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3728      	adds	r7, #40	@ 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_DMAEx_List_LinkQ+0x16>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e072      	b.n	800427c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800419c:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d002      	beq.n	80041b0 <HAL_DMAEx_List_LinkQ+0x34>
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	2b05      	cmp	r3, #5
 80041ae:	d108      	bne.n	80041c2 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2240      	movs	r2, #64	@ 0x40
 80041b4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e05c      	b.n	800427c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	7b1b      	ldrb	r3, [r3, #12]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d104      	bne.n	80041d6 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2201      	movs	r2, #1
 80041d0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e052      	b.n	800427c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2b      	ldr	r2, [pc, #172]	@ (8004288 <HAL_DMAEx_List_LinkQ+0x10c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_DMAEx_List_LinkQ+0xaa>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a29      	ldr	r2, [pc, #164]	@ (800428c <HAL_DMAEx_List_LinkQ+0x110>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01d      	beq.n	8004226 <HAL_DMAEx_List_LinkQ+0xaa>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a28      	ldr	r2, [pc, #160]	@ (8004290 <HAL_DMAEx_List_LinkQ+0x114>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_DMAEx_List_LinkQ+0xaa>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a26      	ldr	r2, [pc, #152]	@ (8004294 <HAL_DMAEx_List_LinkQ+0x118>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_DMAEx_List_LinkQ+0xaa>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a25      	ldr	r2, [pc, #148]	@ (8004298 <HAL_DMAEx_List_LinkQ+0x11c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_DMAEx_List_LinkQ+0xaa>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a23      	ldr	r2, [pc, #140]	@ (800429c <HAL_DMAEx_List_LinkQ+0x120>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_DMAEx_List_LinkQ+0xaa>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a22      	ldr	r2, [pc, #136]	@ (80042a0 <HAL_DMAEx_List_LinkQ+0x124>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_DMAEx_List_LinkQ+0xaa>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a20      	ldr	r2, [pc, #128]	@ (80042a4 <HAL_DMAEx_List_LinkQ+0x128>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d101      	bne.n	800422a <HAL_DMAEx_List_LinkQ+0xae>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <HAL_DMAEx_List_LinkQ+0xb0>
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10b      	bne.n	8004248 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2203      	movs	r2, #3
 8004242:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e019      	b.n	800427c <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800424c:	2b81      	cmp	r3, #129	@ 0x81
 800424e:	d108      	bne.n	8004262 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10d      	bne.n	8004274 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2204      	movs	r2, #4
 800425c:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e00c      	b.n	800427c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d004      	beq.n	8004274 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2204      	movs	r2, #4
 800426e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e003      	b.n	800427c <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40020350 	.word	0x40020350
 800428c:	50020350 	.word	0x50020350
 8004290:	400203d0 	.word	0x400203d0
 8004294:	500203d0 	.word	0x500203d0
 8004298:	40021350 	.word	0x40021350
 800429c:	50021350 	.word	0x50021350
 80042a0:	400213d0 	.word	0x400213d0
 80042a4:	500213d0 	.word	0x500213d0

080042a8 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a85      	ldr	r2, [pc, #532]	@ (80044d8 <DMA_List_Init+0x230>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	f000 80a0 	beq.w	8004408 <DMA_List_Init+0x160>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a83      	ldr	r2, [pc, #524]	@ (80044dc <DMA_List_Init+0x234>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	f000 809a 	beq.w	8004408 <DMA_List_Init+0x160>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a81      	ldr	r2, [pc, #516]	@ (80044e0 <DMA_List_Init+0x238>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	f000 8094 	beq.w	8004408 <DMA_List_Init+0x160>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7f      	ldr	r2, [pc, #508]	@ (80044e4 <DMA_List_Init+0x23c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f000 808e 	beq.w	8004408 <DMA_List_Init+0x160>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a7d      	ldr	r2, [pc, #500]	@ (80044e8 <DMA_List_Init+0x240>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	f000 8088 	beq.w	8004408 <DMA_List_Init+0x160>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a7b      	ldr	r2, [pc, #492]	@ (80044ec <DMA_List_Init+0x244>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	f000 8082 	beq.w	8004408 <DMA_List_Init+0x160>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a79      	ldr	r2, [pc, #484]	@ (80044f0 <DMA_List_Init+0x248>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d07c      	beq.n	8004408 <DMA_List_Init+0x160>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a78      	ldr	r2, [pc, #480]	@ (80044f4 <DMA_List_Init+0x24c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d077      	beq.n	8004408 <DMA_List_Init+0x160>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a76      	ldr	r2, [pc, #472]	@ (80044f8 <DMA_List_Init+0x250>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d072      	beq.n	8004408 <DMA_List_Init+0x160>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a75      	ldr	r2, [pc, #468]	@ (80044fc <DMA_List_Init+0x254>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d06d      	beq.n	8004408 <DMA_List_Init+0x160>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a73      	ldr	r2, [pc, #460]	@ (8004500 <DMA_List_Init+0x258>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d068      	beq.n	8004408 <DMA_List_Init+0x160>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a72      	ldr	r2, [pc, #456]	@ (8004504 <DMA_List_Init+0x25c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d063      	beq.n	8004408 <DMA_List_Init+0x160>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a70      	ldr	r2, [pc, #448]	@ (8004508 <DMA_List_Init+0x260>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d05e      	beq.n	8004408 <DMA_List_Init+0x160>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6f      	ldr	r2, [pc, #444]	@ (800450c <DMA_List_Init+0x264>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d059      	beq.n	8004408 <DMA_List_Init+0x160>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6d      	ldr	r2, [pc, #436]	@ (8004510 <DMA_List_Init+0x268>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d054      	beq.n	8004408 <DMA_List_Init+0x160>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a6c      	ldr	r2, [pc, #432]	@ (8004514 <DMA_List_Init+0x26c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d04f      	beq.n	8004408 <DMA_List_Init+0x160>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a6a      	ldr	r2, [pc, #424]	@ (8004518 <DMA_List_Init+0x270>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d04a      	beq.n	8004408 <DMA_List_Init+0x160>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a69      	ldr	r2, [pc, #420]	@ (800451c <DMA_List_Init+0x274>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d045      	beq.n	8004408 <DMA_List_Init+0x160>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a67      	ldr	r2, [pc, #412]	@ (8004520 <DMA_List_Init+0x278>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d040      	beq.n	8004408 <DMA_List_Init+0x160>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a66      	ldr	r2, [pc, #408]	@ (8004524 <DMA_List_Init+0x27c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d03b      	beq.n	8004408 <DMA_List_Init+0x160>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a64      	ldr	r2, [pc, #400]	@ (8004528 <DMA_List_Init+0x280>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d036      	beq.n	8004408 <DMA_List_Init+0x160>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a63      	ldr	r2, [pc, #396]	@ (800452c <DMA_List_Init+0x284>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d031      	beq.n	8004408 <DMA_List_Init+0x160>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a61      	ldr	r2, [pc, #388]	@ (8004530 <DMA_List_Init+0x288>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d02c      	beq.n	8004408 <DMA_List_Init+0x160>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a60      	ldr	r2, [pc, #384]	@ (8004534 <DMA_List_Init+0x28c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d027      	beq.n	8004408 <DMA_List_Init+0x160>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a5e      	ldr	r2, [pc, #376]	@ (8004538 <DMA_List_Init+0x290>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d022      	beq.n	8004408 <DMA_List_Init+0x160>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a5d      	ldr	r2, [pc, #372]	@ (800453c <DMA_List_Init+0x294>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d01d      	beq.n	8004408 <DMA_List_Init+0x160>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a5b      	ldr	r2, [pc, #364]	@ (8004540 <DMA_List_Init+0x298>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d018      	beq.n	8004408 <DMA_List_Init+0x160>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a5a      	ldr	r2, [pc, #360]	@ (8004544 <DMA_List_Init+0x29c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d013      	beq.n	8004408 <DMA_List_Init+0x160>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a58      	ldr	r2, [pc, #352]	@ (8004548 <DMA_List_Init+0x2a0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00e      	beq.n	8004408 <DMA_List_Init+0x160>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a57      	ldr	r2, [pc, #348]	@ (800454c <DMA_List_Init+0x2a4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d009      	beq.n	8004408 <DMA_List_Init+0x160>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a55      	ldr	r2, [pc, #340]	@ (8004550 <DMA_List_Init+0x2a8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <DMA_List_Init+0x160>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a54      	ldr	r2, [pc, #336]	@ (8004554 <DMA_List_Init+0x2ac>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d101      	bne.n	800440c <DMA_List_Init+0x164>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <DMA_List_Init+0x166>
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	430a      	orrs	r2, r1
 800442e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2200      	movs	r2, #0
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004440:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2200      	movs	r2, #0
 8004448:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2a      	ldr	r2, [pc, #168]	@ (8004508 <DMA_List_Init+0x260>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d022      	beq.n	80044aa <DMA_List_Init+0x202>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a28      	ldr	r2, [pc, #160]	@ (800450c <DMA_List_Init+0x264>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01d      	beq.n	80044aa <DMA_List_Init+0x202>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a27      	ldr	r2, [pc, #156]	@ (8004510 <DMA_List_Init+0x268>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d018      	beq.n	80044aa <DMA_List_Init+0x202>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a25      	ldr	r2, [pc, #148]	@ (8004514 <DMA_List_Init+0x26c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <DMA_List_Init+0x202>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a30      	ldr	r2, [pc, #192]	@ (8004548 <DMA_List_Init+0x2a0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00e      	beq.n	80044aa <DMA_List_Init+0x202>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a2e      	ldr	r2, [pc, #184]	@ (800454c <DMA_List_Init+0x2a4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d009      	beq.n	80044aa <DMA_List_Init+0x202>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2d      	ldr	r2, [pc, #180]	@ (8004550 <DMA_List_Init+0x2a8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <DMA_List_Init+0x202>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004554 <DMA_List_Init+0x2ac>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d101      	bne.n	80044ae <DMA_List_Init+0x206>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <DMA_List_Init+0x208>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2200      	movs	r2, #0
 80044c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2200      	movs	r2, #0
 80044ca:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40020050 	.word	0x40020050
 80044dc:	50020050 	.word	0x50020050
 80044e0:	400200d0 	.word	0x400200d0
 80044e4:	500200d0 	.word	0x500200d0
 80044e8:	40020150 	.word	0x40020150
 80044ec:	50020150 	.word	0x50020150
 80044f0:	400201d0 	.word	0x400201d0
 80044f4:	500201d0 	.word	0x500201d0
 80044f8:	40020250 	.word	0x40020250
 80044fc:	50020250 	.word	0x50020250
 8004500:	400202d0 	.word	0x400202d0
 8004504:	500202d0 	.word	0x500202d0
 8004508:	40020350 	.word	0x40020350
 800450c:	50020350 	.word	0x50020350
 8004510:	400203d0 	.word	0x400203d0
 8004514:	500203d0 	.word	0x500203d0
 8004518:	40021050 	.word	0x40021050
 800451c:	50021050 	.word	0x50021050
 8004520:	400210d0 	.word	0x400210d0
 8004524:	500210d0 	.word	0x500210d0
 8004528:	40021150 	.word	0x40021150
 800452c:	50021150 	.word	0x50021150
 8004530:	400211d0 	.word	0x400211d0
 8004534:	500211d0 	.word	0x500211d0
 8004538:	40021250 	.word	0x40021250
 800453c:	50021250 	.word	0x50021250
 8004540:	400212d0 	.word	0x400212d0
 8004544:	500212d0 	.word	0x500212d0
 8004548:	40021350 	.word	0x40021350
 800454c:	50021350 	.word	0x50021350
 8004550:	400213d0 	.word	0x400213d0
 8004554:	500213d0 	.word	0x500213d0

08004558 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800456a:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8004570:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004576:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 800457c:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d017      	beq.n	80045be <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	051b      	lsls	r3, r3, #20
 80045a4:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80045a8:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	3b01      	subs	r3, #1
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80045b6:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80045b8:	431a      	orrs	r2, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6859      	ldr	r1, [r3, #4]
 80045c6:	f240 23ff 	movw	r3, #767	@ 0x2ff
 80045ca:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80045cc:	431a      	orrs	r2, r3
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045da:	d10c      	bne.n	80045f6 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0320 	and.w	r3, r3, #32
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d011      	beq.n	800460c <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	e00a      	b.n	800460c <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045fe:	d105      	bne.n	800460c <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004614:	431a      	orrs	r2, r3
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00f      	beq.n	8004642 <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462e:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800463a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800463c:	431a      	orrs	r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004646:	b29a      	uxth	r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d04e      	beq.n	80046f6 <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004660:	3b01      	subs	r3, #1
 8004662:	0419      	lsls	r1, r3, #16
 8004664:	4b66      	ldr	r3, [pc, #408]	@ (8004800 <DMA_List_BuildNode+0x2a8>)
 8004666:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004668:	431a      	orrs	r2, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004672:	2b00      	cmp	r3, #0
 8004674:	da06      	bge.n	8004684 <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	609a      	str	r2, [r3, #8]
 8004682:	e005      	b.n	8004690 <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004694:	2b00      	cmp	r3, #0
 8004696:	da06      	bge.n	80046a6 <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	e005      	b.n	80046b2 <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da06      	bge.n	80046c8 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	609a      	str	r2, [r3, #8]
 80046c6:	e005      	b.n	80046d4 <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	da06      	bge.n	80046ea <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	e005      	b.n	80046f6 <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d059      	beq.n	80047c6 <DMA_List_BuildNode+0x26e>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004716:	2b00      	cmp	r3, #0
 8004718:	da09      	bge.n	800472e <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471e:	425b      	negs	r3, r3
 8004720:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	615a      	str	r2, [r3, #20]
 800472c:	e005      	b.n	800473a <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004732:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473e:	2b00      	cmp	r3, #0
 8004740:	da0d      	bge.n	800475e <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004746:	425b      	negs	r3, r3
 8004748:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	0419      	lsls	r1, r3, #16
 8004752:	4b2c      	ldr	r3, [pc, #176]	@ (8004804 <DMA_List_BuildNode+0x2ac>)
 8004754:	400b      	ands	r3, r1
 8004756:	431a      	orrs	r2, r3
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	615a      	str	r2, [r3, #20]
 800475c:	e009      	b.n	8004772 <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004766:	0419      	lsls	r1, r3, #16
 8004768:	4b26      	ldr	r3, [pc, #152]	@ (8004804 <DMA_List_BuildNode+0x2ac>)
 800476a:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800476c:	431a      	orrs	r2, r3
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004776:	2b00      	cmp	r3, #0
 8004778:	da08      	bge.n	800478c <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477e:	425b      	negs	r3, r3
 8004780:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	b29a      	uxth	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	619a      	str	r2, [r3, #24]
 800478a:	e004      	b.n	8004796 <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004790:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479a:	2b00      	cmp	r3, #0
 800479c:	da0b      	bge.n	80047b6 <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a2:	425b      	negs	r3, r3
 80047a4:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80047ae:	431a      	orrs	r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	619a      	str	r2, [r3, #24]
 80047b4:	e007      	b.n	80047c6 <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047be:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80047c0:	431a      	orrs	r2, r3
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80047e6:	e005      	b.n	80047f4 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	621a      	str	r2, [r3, #32]
}
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	07ff0000 	.word	0x07ff0000
 8004804:	1fff0000 	.word	0x1fff0000

08004808 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	b2da      	uxtb	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0208 	and.w	r2, r3, #8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004856:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8004860:	0d1b      	lsrs	r3, r3, #20
 8004862:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004866:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b66      	ldr	r3, [pc, #408]	@ (8004a18 <DMA_List_GetNodeConfig+0x210>)
 800487e:	4013      	ands	r3, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a2:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048aa:	60da      	str	r2, [r3, #12]
 80048ac:	e012      	b.n	80048d4 <DMA_List_GetNodeConfig+0xcc>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <DMA_List_GetNodeConfig+0xc6>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048ca:	60da      	str	r2, [r3, #12]
 80048cc:	e002      	b.n	80048d4 <DMA_List_GetNodeConfig+0xcc>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	b29a      	uxth	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <DMA_List_GetNodeConfig+0x132>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004932:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004938:	e002      	b.n	8004940 <DMA_List_GetNodeConfig+0x138>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d04a      	beq.n	80049f2 <DMA_List_GetNodeConfig+0x1ea>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004966:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8004968:	89fa      	ldrh	r2, [r7, #14]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	0c1b      	lsrs	r3, r3, #16
 8004974:	b29b      	uxth	r3, r3
 8004976:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800497a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800497c:	89fa      	ldrh	r2, [r7, #14]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d004      	beq.n	8004998 <DMA_List_GetNodeConfig+0x190>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004992:	425a      	negs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <DMA_List_GetNodeConfig+0x1a6>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a8:	425a      	negs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80049b4:	89fa      	ldrh	r2, [r7, #14]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80049c2:	89fa      	ldrh	r2, [r7, #14]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <DMA_List_GetNodeConfig+0x1d6>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d8:	425a      	negs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da11      	bge.n	8004a0a <DMA_List_GetNodeConfig+0x202>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ea:	425a      	negs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80049f0:	e00b      	b.n	8004a0a <DMA_List_GetNodeConfig+0x202>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	0c002000 	.word	0x0c002000

08004a1c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	e00a      	b.n	8004a5e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	e004      	b.n	8004a5e <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	041b      	lsls	r3, r3, #16
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d001      	beq.n	8004a6e <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	371c      	adds	r7, #28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e00e      	b.n	8004aba <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	e006      	b.n	8004aba <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8004acc:	2302      	movs	r3, #2
 8004ace:	e00b      	b.n	8004ae8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d001      	beq.n	8004ae6 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e000      	b.n	8004ae8 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4a0d      	ldr	r2, [pc, #52]	@ (8004b4c <DMA_List_GetCLLRNodeInfo+0x58>)
 8004b16:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00f      	beq.n	8004b3e <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2207      	movs	r2, #7
 8004b22:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004b24:	e00b      	b.n	8004b3e <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4a08      	ldr	r2, [pc, #32]	@ (8004b50 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004b30:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2205      	movs	r2, #5
 8004b3c:	601a      	str	r2, [r3, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	fe010000 	.word	0xfe010000
 8004b50:	f8010000 	.word	0xf8010000

08004b54 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	@ 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d142      	bne.n	8004bfe <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8004b78:	e01d      	b.n	8004bb6 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d107      	bne.n	8004b90 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e00f      	b.n	8004bb0 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004ba8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d3dc      	bcc.n	8004b7a <DMA_List_FindNode+0x26>
 8004bc0:	e029      	b.n	8004c16 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d107      	bne.n	8004bd8 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	e00f      	b.n	8004bf8 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4413      	add	r3, r2
 8004be8:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8004bf0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d206      	bcs.n	8004c16 <DMA_List_FindNode+0xc2>
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004c0e:	4013      	ands	r3, r2
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d1d5      	bne.n	8004bc2 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004c22:	4013      	ands	r3, r2
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d001      	beq.n	8004c2e <DMA_List_FindNode+0xda>
    {
      return 1U;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e02b      	b.n	8004c86 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	041b      	lsls	r3, r3, #16
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00f      	beq.n	8004c84 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c70:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8004c74:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	0c1b      	lsrs	r3, r3, #16
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3724      	adds	r7, #36	@ 0x24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e147      	b.n	8004f36 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fc fbc6 	bl	800144c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0210 	bic.w	r2, r2, #16
 8004cce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cd0:	f7fc fdfc 	bl	80018cc <HAL_GetTick>
 8004cd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cd6:	e012      	b.n	8004cfe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004cd8:	f7fc fdf8 	bl	80018cc <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b0a      	cmp	r3, #10
 8004ce4:	d90b      	bls.n	8004cfe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cea:	f043 0201 	orr.w	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e11b      	b.n	8004f36 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d0e5      	beq.n	8004cd8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d1c:	f7fc fdd6 	bl	80018cc <HAL_GetTick>
 8004d20:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d22:	e012      	b.n	8004d4a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d24:	f7fc fdd2 	bl	80018cc <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b0a      	cmp	r3, #10
 8004d30:	d90b      	bls.n	8004d4a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d36:	f043 0201 	orr.w	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2203      	movs	r2, #3
 8004d42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0f5      	b.n	8004f36 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0e5      	beq.n	8004d24 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0202 	orr.w	r2, r2, #2
 8004d66:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a74      	ldr	r2, [pc, #464]	@ (8004f40 <HAL_FDCAN_Init+0x2ac>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d103      	bne.n	8004d7a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004d72:	4a74      	ldr	r2, [pc, #464]	@ (8004f44 <HAL_FDCAN_Init+0x2b0>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7c1b      	ldrb	r3, [r3, #16]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d108      	bne.n	8004d94 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d90:	619a      	str	r2, [r3, #24]
 8004d92:	e007      	b.n	8004da4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004da2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	7c5b      	ldrb	r3, [r3, #17]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d108      	bne.n	8004dbe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dba:	619a      	str	r2, [r3, #24]
 8004dbc:	e007      	b.n	8004dce <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699a      	ldr	r2, [r3, #24]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dcc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	7c9b      	ldrb	r3, [r3, #18]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d108      	bne.n	8004de8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004de4:	619a      	str	r2, [r3, #24]
 8004de6:	e007      	b.n	8004df8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004df6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699a      	ldr	r2, [r3, #24]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004e1c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0210 	bic.w	r2, r2, #16
 8004e2c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d108      	bne.n	8004e48 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0204 	orr.w	r2, r2, #4
 8004e44:	619a      	str	r2, [r3, #24]
 8004e46:	e02c      	b.n	8004ea2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d028      	beq.n	8004ea2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d01c      	beq.n	8004e92 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e66:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0210 	orr.w	r2, r2, #16
 8004e76:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d110      	bne.n	8004ea2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0220 	orr.w	r2, r2, #32
 8004e8e:	619a      	str	r2, [r3, #24]
 8004e90:	e007      	b.n	8004ea2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0220 	orr.w	r2, r2, #32
 8004ea0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004eb2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004eba:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004eca:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ecc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ed6:	d115      	bne.n	8004f04 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ee6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	3b01      	subs	r3, #1
 8004eee:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ef0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004f00:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f02:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fc56 	bl	80057cc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	4000a400 	.word	0x4000a400
 8004f44:	4000a500 	.word	0x4000a500

08004f48 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004f58:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d002      	beq.n	8004f66 <HAL_FDCAN_ConfigFilter+0x1e>
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d13d      	bne.n	8004fe2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d119      	bne.n	8004fa2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004f7a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8004f82:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e01d      	b.n	8004fde <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	075a      	lsls	r2, r3, #29
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	079a      	lsls	r2, r3, #30
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4413      	add	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e006      	b.n	8004ff0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe6:	f043 0202 	orr.w	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
  }
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d110      	bne.n	8005032 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e006      	b.n	8005040 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005036:	f043 0204 	orr.w	r2, r3, #4
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d12c      	bne.n	80050be <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800506c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005078:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e023      	b.n	80050cc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 fbf8 	bl	8005890 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2101      	movs	r1, #1
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	fa01 f202 	lsl.w	r2, r1, r2
 80050ac:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80050b0:	2201      	movs	r2, #1
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	409a      	lsls	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e006      	b.n	80050cc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c2:	f043 0208 	orr.w	r2, r3, #8
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
  }
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b08b      	sub	sp, #44	@ 0x2c
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80050ec:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80050ee:	7efb      	ldrb	r3, [r7, #27]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	f040 80e8 	bne.w	80052c6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b40      	cmp	r3, #64	@ 0x40
 80050fa:	d137      	bne.n	800516c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	2b00      	cmp	r3, #0
 800510a:	d107      	bne.n	800511c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005110:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0db      	b.n	80052d4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005124:	0e1b      	lsrs	r3, r3, #24
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d10a      	bne.n	8005144 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005136:	0a5b      	lsrs	r3, r3, #9
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005140:	2301      	movs	r3, #1
 8005142:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	4613      	mov	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4413      	add	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	440b      	add	r3, r1
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
 800516a:	e036      	b.n	80051da <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	2b00      	cmp	r3, #0
 800517a:	d107      	bne.n	800518c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005180:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0a3      	b.n	80052d4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005194:	0e1b      	lsrs	r3, r3, #24
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b01      	cmp	r3, #1
 800519c:	d10a      	bne.n	80051b4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80051b0:	2301      	movs	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	4613      	mov	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	440b      	add	r3, r1
 80051d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d107      	bne.n	80051fe <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	0c9b      	lsrs	r3, r3, #18
 80051f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	e005      	b.n	800520a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	3304      	adds	r3, #4
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 020f 	and.w	r2, r3, #15
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	0e1b      	lsrs	r3, r3, #24
 800525e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	0fda      	lsrs	r2, r3, #31
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	3304      	adds	r3, #4
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800527a:	2300      	movs	r3, #0
 800527c:	623b      	str	r3, [r7, #32]
 800527e:	e00a      	b.n	8005296 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	441a      	add	r2, r3
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	440b      	add	r3, r1
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	3301      	adds	r3, #1
 8005294:	623b      	str	r3, [r7, #32]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	4a11      	ldr	r2, [pc, #68]	@ (80052e0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800529c:	5cd3      	ldrb	r3, [r2, r3]
 800529e:	461a      	mov	r2, r3
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d3ec      	bcc.n	8005280 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b40      	cmp	r3, #64	@ 0x40
 80052aa:	d105      	bne.n	80052b8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80052b6:	e004      	b.n	80052c2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	e006      	b.n	80052d4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ca:	f043 0208 	orr.w	r2, r3, #8
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	372c      	adds	r7, #44	@ 0x2c
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	0800815c 	.word	0x0800815c

080052e4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80052f6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d003      	beq.n	8005306 <HAL_FDCAN_ActivateNotification+0x22>
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
 8005300:	2b02      	cmp	r3, #2
 8005302:	f040 80c8 	bne.w	8005496 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d03b      	beq.n	800539a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d031      	beq.n	800539a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800533c:	2b00      	cmp	r3, #0
 800533e:	d004      	beq.n	800534a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	d027      	beq.n	800539a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01d      	beq.n	800539a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	2b00      	cmp	r3, #0
 8005370:	d013      	beq.n	800539a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00c      	beq.n	80053aa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d107      	bne.n	80053aa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d13b      	bne.n	8005436 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d004      	beq.n	80053d2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d131      	bne.n	8005436 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d127      	bne.n	8005436 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d11d      	bne.n	8005436 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b00      	cmp	r3, #0
 800540c:	d113      	bne.n	8005436 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00c      	beq.n	8005446 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d007      	beq.n	8005446 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0202 	orr.w	r2, r2, #2
 8005444:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800544c:	2b00      	cmp	r3, #0
 800544e:	d009      	beq.n	8005464 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	430a      	orrs	r2, r1
 8005460:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	430a      	orrs	r2, r1
 800547e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	430a      	orrs	r2, r1
 8005490:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	e006      	b.n	80054a4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800549a:	f043 0202 	orr.w	r2, r3, #2
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
  }
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	@ 0x30
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054be:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80054c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054cc:	4013      	ands	r3, r2
 80054ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054e4:	4013      	ands	r3, r2
 80054e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054fc:	4013      	ands	r3, r2
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005506:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800550a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005512:	6a3a      	ldr	r2, [r7, #32]
 8005514:	4013      	ands	r3, r2
 8005516:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800551e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005522:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	4013      	ands	r3, r2
 800552e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005536:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00b      	beq.n	8005562 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d006      	beq.n	8005562 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2240      	movs	r2, #64	@ 0x40
 800555a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f916 	bl	800578e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d019      	beq.n	80055a0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d014      	beq.n	80055a0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800557e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4013      	ands	r3, r2
 800558c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005596:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005598:	6939      	ldr	r1, [r7, #16]
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f8d8 	bl	8005750 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80055a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80055ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f8a2 	bl	80056fa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d007      	beq.n	80055cc <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80055c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fb f846 	bl	8000658 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80055cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80055da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f897 	bl	8005710 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00c      	beq.n	8005606 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f890 	bl	8005726 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560c:	2b00      	cmp	r3, #0
 800560e:	d018      	beq.n	8005642 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d013      	beq.n	8005642 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005622:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4013      	ands	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2280      	movs	r2, #128	@ 0x80
 8005638:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f87c 	bl	800573a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00c      	beq.n	8005666 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d007      	beq.n	8005666 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800565e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f880 	bl	8005766 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00c      	beq.n	800568a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005682:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f878 	bl	800577a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00f      	beq.n	80056b4 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80056a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80056c2:	69f9      	ldr	r1, [r7, #28]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f876 	bl	80057b6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6a3a      	ldr	r2, [r7, #32]
 80056d6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f858 	bl	80057a2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80056f2:	bf00      	nop
 80056f4:	3730      	adds	r7, #48	@ 0x30
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80057d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005888 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80057d6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2b      	ldr	r2, [pc, #172]	@ (800588c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d103      	bne.n	80057ea <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80057e8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005800:	041a      	lsls	r2, r3, #16
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800581e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005826:	061a      	lsls	r2, r3, #24
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	e005      	b.n	800586c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3304      	adds	r3, #4
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	429a      	cmp	r2, r3
 8005876:	d3f3      	bcc.n	8005860 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	4000ac00 	.word	0x4000ac00
 800588c:	4000a800 	.word	0x4000a800

08005890 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005890:	b480      	push	{r7}
 8005892:	b089      	sub	sp, #36	@ 0x24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10a      	bne.n	80058bc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80058ae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	e00a      	b.n	80058d2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80058c4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80058ca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80058cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058d0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80058dc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80058e2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80058e8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	4613      	mov	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	4413      	add	r3, r2
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	440b      	add	r3, r1
 8005904:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	3304      	adds	r3, #4
 8005910:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	3304      	adds	r3, #4
 800591c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e020      	b.n	8005966 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	3303      	adds	r3, #3
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4413      	add	r3, r2
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	3302      	adds	r3, #2
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	440b      	add	r3, r1
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800593c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	3301      	adds	r3, #1
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	440b      	add	r3, r1
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800594a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	440a      	add	r2, r1
 8005952:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005954:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	3304      	adds	r3, #4
 800595e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	3304      	adds	r3, #4
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	4a06      	ldr	r2, [pc, #24]	@ (8005984 <FDCAN_CopyMessageToRAM+0xf4>)
 800596c:	5cd3      	ldrb	r3, [r2, r3]
 800596e:	461a      	mov	r2, r3
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4293      	cmp	r3, r2
 8005974:	d3d6      	bcc.n	8005924 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8005976:	bf00      	nop
 8005978:	bf00      	nop
 800597a:	3724      	adds	r7, #36	@ 0x24
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	0800815c 	.word	0x0800815c

08005988 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005996:	e136      	b.n	8005c06 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	2101      	movs	r1, #1
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	fa01 f303 	lsl.w	r3, r1, r3
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8128 	beq.w	8005c00 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x38>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b12      	cmp	r3, #18
 80059be:	d125      	bne.n	8005a0c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	08da      	lsrs	r2, r3, #3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3208      	adds	r2, #8
 80059c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	220f      	movs	r2, #15
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	43db      	mvns	r3, r3
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4013      	ands	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f003 020f 	and.w	r2, r3, #15
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	08da      	lsrs	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3208      	adds	r2, #8
 8005a06:	6979      	ldr	r1, [r7, #20]
 8005a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	2203      	movs	r2, #3
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4013      	ands	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 0203 	and.w	r2, r3, #3
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d00b      	beq.n	8005a60 <HAL_GPIO_Init+0xd8>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d007      	beq.n	8005a60 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a54:	2b11      	cmp	r3, #17
 8005a56:	d003      	beq.n	8005a60 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b12      	cmp	r3, #18
 8005a5e:	d130      	bne.n	8005ac2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	43db      	mvns	r3, r3
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	4013      	ands	r3, r2
 8005a76:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a96:	2201      	movs	r2, #1
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	091b      	lsrs	r3, r3, #4
 8005aac:	f003 0201 	and.w	r2, r3, #1
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d017      	beq.n	8005afa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d07c      	beq.n	8005c00 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005b06:	4a47      	ldr	r2, [pc, #284]	@ (8005c24 <HAL_GPIO_Init+0x29c>)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	3318      	adds	r3, #24
 8005b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b12:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	220f      	movs	r2, #15
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	43db      	mvns	r3, r3
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4013      	ands	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	0a9a      	lsrs	r2, r3, #10
 8005b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c28 <HAL_GPIO_Init+0x2a0>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	f002 0203 	and.w	r2, r2, #3
 8005b38:	00d2      	lsls	r2, r2, #3
 8005b3a:	4093      	lsls	r3, r2
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005b42:	4938      	ldr	r1, [pc, #224]	@ (8005c24 <HAL_GPIO_Init+0x29c>)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	3318      	adds	r3, #24
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005b50:	4b34      	ldr	r3, [pc, #208]	@ (8005c24 <HAL_GPIO_Init+0x29c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005b74:	4a2b      	ldr	r2, [pc, #172]	@ (8005c24 <HAL_GPIO_Init+0x29c>)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8005c24 <HAL_GPIO_Init+0x29c>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	43db      	mvns	r3, r3
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4013      	ands	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8005b9e:	4a21      	ldr	r2, [pc, #132]	@ (8005c24 <HAL_GPIO_Init+0x29c>)
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8005c24 <HAL_GPIO_Init+0x29c>)
 8005ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005baa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8005bca:	4a16      	ldr	r2, [pc, #88]	@ (8005c24 <HAL_GPIO_Init+0x29c>)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005bd2:	4b14      	ldr	r3, [pc, #80]	@ (8005c24 <HAL_GPIO_Init+0x29c>)
 8005bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bd8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4013      	ands	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8005c24 <HAL_GPIO_Init+0x29c>)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	3301      	adds	r3, #1
 8005c04:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f47f aec1 	bne.w	8005998 <HAL_GPIO_Init+0x10>
  }
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	44022000 	.word	0x44022000
 8005c28:	002f7f7f 	.word	0x002f7f7f

08005c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691a      	ldr	r2, [r3, #16]
 8005c3c:	887b      	ldrh	r3, [r7, #2]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c44:	2301      	movs	r3, #1
 8005c46:	73fb      	strb	r3, [r7, #15]
 8005c48:	e001      	b.n	8005c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	807b      	strh	r3, [r7, #2]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c6c:	787b      	ldrb	r3, [r7, #1]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c72:	887a      	ldrh	r2, [r7, #2]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c78:	e002      	b.n	8005c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c7a:	887a      	ldrh	r2, [r7, #2]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d102      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f000 bc28 	b.w	80064f0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ca0:	4b94      	ldr	r3, [pc, #592]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f003 0318 	and.w	r3, r3, #24
 8005ca8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005caa:	4b92      	ldr	r3, [pc, #584]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d05b      	beq.n	8005d78 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d005      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x46>
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	2b18      	cmp	r3, #24
 8005cca:	d114      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d111      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d102      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f000 bc08 	b.w	80064f0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005ce0:	4b84      	ldr	r3, [pc, #528]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	4981      	ldr	r1, [pc, #516]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005cf4:	e040      	b.n	8005d78 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d023      	beq.n	8005d46 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a7c      	ldr	r2, [pc, #496]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0a:	f7fb fddf 	bl	80018cc <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005d10:	e008      	b.n	8005d24 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005d12:	f7fb fddb 	bl	80018cc <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e3e5      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005d24:	4b73      	ldr	r3, [pc, #460]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f0      	beq.n	8005d12 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005d30:	4b70      	ldr	r3, [pc, #448]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	496d      	ldr	r1, [pc, #436]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	618b      	str	r3, [r1, #24]
 8005d44:	e018      	b.n	8005d78 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d46:	4b6b      	ldr	r3, [pc, #428]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a6a      	ldr	r2, [pc, #424]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d52:	f7fb fdbb 	bl	80018cc <HAL_GetTick>
 8005d56:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005d5a:	f7fb fdb7 	bl	80018cc <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e3c1      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005d6c:	4b61      	ldr	r3, [pc, #388]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f0      	bne.n	8005d5a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80a0 	beq.w	8005ec6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_OscConfig+0x10c>
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	2b18      	cmp	r3, #24
 8005d90:	d109      	bne.n	8005da6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d106      	bne.n	8005da6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 8092 	bne.w	8005ec6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e3a4      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dae:	d106      	bne.n	8005dbe <HAL_RCC_OscConfig+0x132>
 8005db0:	4b50      	ldr	r3, [pc, #320]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a4f      	ldr	r2, [pc, #316]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e058      	b.n	8005e70 <HAL_RCC_OscConfig+0x1e4>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d112      	bne.n	8005dec <HAL_RCC_OscConfig+0x160>
 8005dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a4a      	ldr	r2, [pc, #296]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	4b48      	ldr	r3, [pc, #288]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a47      	ldr	r2, [pc, #284]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005dd8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	4b45      	ldr	r3, [pc, #276]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a44      	ldr	r2, [pc, #272]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005de4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e041      	b.n	8005e70 <HAL_RCC_OscConfig+0x1e4>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005df4:	d112      	bne.n	8005e1c <HAL_RCC_OscConfig+0x190>
 8005df6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a3e      	ldr	r2, [pc, #248]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	4b3c      	ldr	r3, [pc, #240]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a3b      	ldr	r2, [pc, #236]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e08:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	4b39      	ldr	r3, [pc, #228]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a38      	ldr	r2, [pc, #224]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	e029      	b.n	8005e70 <HAL_RCC_OscConfig+0x1e4>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005e24:	d112      	bne.n	8005e4c <HAL_RCC_OscConfig+0x1c0>
 8005e26:	4b33      	ldr	r3, [pc, #204]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a32      	ldr	r2, [pc, #200]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	4b30      	ldr	r3, [pc, #192]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2f      	ldr	r2, [pc, #188]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a2c      	ldr	r2, [pc, #176]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e011      	b.n	8005e70 <HAL_RCC_OscConfig+0x1e4>
 8005e4c:	4b29      	ldr	r3, [pc, #164]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a28      	ldr	r2, [pc, #160]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	4b26      	ldr	r3, [pc, #152]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a25      	ldr	r2, [pc, #148]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	4b23      	ldr	r3, [pc, #140]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a22      	ldr	r2, [pc, #136]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e6a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d013      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fb fd28 	bl	80018cc <HAL_GetTick>
 8005e7c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005e80:	f7fb fd24 	bl	80018cc <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b64      	cmp	r3, #100	@ 0x64
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e32e      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e92:	4b18      	ldr	r3, [pc, #96]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f0      	beq.n	8005e80 <HAL_RCC_OscConfig+0x1f4>
 8005e9e:	e012      	b.n	8005ec6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea0:	f7fb fd14 	bl	80018cc <HAL_GetTick>
 8005ea4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005ea8:	f7fb fd10 	bl	80018cc <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b64      	cmp	r3, #100	@ 0x64
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e31a      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005eba:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef4 <HAL_RCC_OscConfig+0x268>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1f0      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 809a 	beq.w	8006008 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x25a>
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	2b18      	cmp	r3, #24
 8005ede:	d149      	bne.n	8005f74 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d146      	bne.n	8005f74 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d104      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e2fe      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
 8005ef2:	bf00      	nop
 8005ef4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d11c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005efe:	4b9a      	ldr	r3, [pc, #616]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0218 	and.w	r2, r3, #24
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d014      	beq.n	8005f38 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005f0e:	4b96      	ldr	r3, [pc, #600]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f023 0218 	bic.w	r2, r3, #24
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	4993      	ldr	r1, [pc, #588]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005f20:	f000 fdd0 	bl	8006ac4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f24:	4b91      	ldr	r3, [pc, #580]	@ (800616c <HAL_RCC_OscConfig+0x4e0>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fb fc45 	bl	80017b8 <HAL_InitTick>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e2db      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f38:	f7fb fcc8 	bl	80018cc <HAL_GetTick>
 8005f3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005f40:	f7fb fcc4 	bl	80018cc <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e2ce      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f52:	4b85      	ldr	r3, [pc, #532]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0f0      	beq.n	8005f40 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005f5e:	4b82      	ldr	r3, [pc, #520]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	041b      	lsls	r3, r3, #16
 8005f6c:	497e      	ldr	r1, [pc, #504]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005f72:	e049      	b.n	8006008 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d02c      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005f7c:	4b7a      	ldr	r3, [pc, #488]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f023 0218 	bic.w	r2, r3, #24
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	4977      	ldr	r1, [pc, #476]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8005f8e:	4b76      	ldr	r3, [pc, #472]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a75      	ldr	r2, [pc, #468]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005f94:	f043 0301 	orr.w	r3, r3, #1
 8005f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9a:	f7fb fc97 	bl	80018cc <HAL_GetTick>
 8005f9e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005fa2:	f7fb fc93 	bl	80018cc <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e29d      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f0      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005fc0:	4b69      	ldr	r3, [pc, #420]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	041b      	lsls	r3, r3, #16
 8005fce:	4966      	ldr	r1, [pc, #408]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	610b      	str	r3, [r1, #16]
 8005fd4:	e018      	b.n	8006008 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fd6:	4b64      	ldr	r3, [pc, #400]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a63      	ldr	r2, [pc, #396]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005fdc:	f023 0301 	bic.w	r3, r3, #1
 8005fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe2:	f7fb fc73 	bl	80018cc <HAL_GetTick>
 8005fe6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005fea:	f7fb fc6f 	bl	80018cc <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e279      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ffc:	4b5a      	ldr	r3, [pc, #360]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f0      	bne.n	8005fea <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d03c      	beq.n	800608e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01c      	beq.n	8006056 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800601c:	4b52      	ldr	r3, [pc, #328]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 800601e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006022:	4a51      	ldr	r2, [pc, #324]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8006024:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006028:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602c:	f7fb fc4e 	bl	80018cc <HAL_GetTick>
 8006030:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006034:	f7fb fc4a 	bl	80018cc <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e254      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006046:	4b48      	ldr	r3, [pc, #288]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8006048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800604c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0ef      	beq.n	8006034 <HAL_RCC_OscConfig+0x3a8>
 8006054:	e01b      	b.n	800608e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006056:	4b44      	ldr	r3, [pc, #272]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8006058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800605c:	4a42      	ldr	r2, [pc, #264]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 800605e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006062:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006066:	f7fb fc31 	bl	80018cc <HAL_GetTick>
 800606a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800606e:	f7fb fc2d 	bl	80018cc <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e237      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006080:	4b39      	ldr	r3, [pc, #228]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8006082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006086:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1ef      	bne.n	800606e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 80d2 	beq.w	8006240 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800609c:	4b34      	ldr	r3, [pc, #208]	@ (8006170 <HAL_RCC_OscConfig+0x4e4>)
 800609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d118      	bne.n	80060da <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80060a8:	4b31      	ldr	r3, [pc, #196]	@ (8006170 <HAL_RCC_OscConfig+0x4e4>)
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	4a30      	ldr	r2, [pc, #192]	@ (8006170 <HAL_RCC_OscConfig+0x4e4>)
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060b4:	f7fb fc0a 	bl	80018cc <HAL_GetTick>
 80060b8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060bc:	f7fb fc06 	bl	80018cc <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e210      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80060ce:	4b28      	ldr	r3, [pc, #160]	@ (8006170 <HAL_RCC_OscConfig+0x4e4>)
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d108      	bne.n	80060f4 <HAL_RCC_OscConfig+0x468>
 80060e2:	4b21      	ldr	r3, [pc, #132]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 80060e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80060f2:	e074      	b.n	80061de <HAL_RCC_OscConfig+0x552>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d118      	bne.n	800612e <HAL_RCC_OscConfig+0x4a2>
 80060fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 80060fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006102:	4a19      	ldr	r2, [pc, #100]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8006104:	f023 0301 	bic.w	r3, r3, #1
 8006108:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800610c:	4b16      	ldr	r3, [pc, #88]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 800610e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006112:	4a15      	ldr	r2, [pc, #84]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8006114:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006118:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800611c:	4b12      	ldr	r3, [pc, #72]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 800611e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006122:	4a11      	ldr	r2, [pc, #68]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8006124:	f023 0304 	bic.w	r3, r3, #4
 8006128:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800612c:	e057      	b.n	80061de <HAL_RCC_OscConfig+0x552>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	2b05      	cmp	r3, #5
 8006134:	d11e      	bne.n	8006174 <HAL_RCC_OscConfig+0x4e8>
 8006136:	4b0c      	ldr	r3, [pc, #48]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8006138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800613c:	4a0a      	ldr	r2, [pc, #40]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 800613e:	f043 0304 	orr.w	r3, r3, #4
 8006142:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006146:	4b08      	ldr	r3, [pc, #32]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8006148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800614c:	4a06      	ldr	r2, [pc, #24]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 800614e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006152:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006156:	4b04      	ldr	r3, [pc, #16]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 8006158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800615c:	4a02      	ldr	r2, [pc, #8]	@ (8006168 <HAL_RCC_OscConfig+0x4dc>)
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006166:	e03a      	b.n	80061de <HAL_RCC_OscConfig+0x552>
 8006168:	44020c00 	.word	0x44020c00
 800616c:	20000004 	.word	0x20000004
 8006170:	44020800 	.word	0x44020800
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b85      	cmp	r3, #133	@ 0x85
 800617a:	d118      	bne.n	80061ae <HAL_RCC_OscConfig+0x522>
 800617c:	4ba2      	ldr	r3, [pc, #648]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800617e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006182:	4aa1      	ldr	r2, [pc, #644]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006184:	f043 0304 	orr.w	r3, r3, #4
 8006188:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800618c:	4b9e      	ldr	r3, [pc, #632]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800618e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006192:	4a9d      	ldr	r2, [pc, #628]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006198:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800619c:	4b9a      	ldr	r3, [pc, #616]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800619e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061a2:	4a99      	ldr	r2, [pc, #612]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80061a4:	f043 0301 	orr.w	r3, r3, #1
 80061a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061ac:	e017      	b.n	80061de <HAL_RCC_OscConfig+0x552>
 80061ae:	4b96      	ldr	r3, [pc, #600]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80061b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061b4:	4a94      	ldr	r2, [pc, #592]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061be:	4b92      	ldr	r3, [pc, #584]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80061c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061c4:	4a90      	ldr	r2, [pc, #576]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80061c6:	f023 0304 	bic.w	r3, r3, #4
 80061ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061ce:	4b8e      	ldr	r3, [pc, #568]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80061d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061d4:	4a8c      	ldr	r2, [pc, #560]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80061d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d016      	beq.n	8006214 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e6:	f7fb fb71 	bl	80018cc <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ec:	e00a      	b.n	8006204 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ee:	f7fb fb6d 	bl	80018cc <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e175      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006204:	4b80      	ldr	r3, [pc, #512]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0ed      	beq.n	80061ee <HAL_RCC_OscConfig+0x562>
 8006212:	e015      	b.n	8006240 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006214:	f7fb fb5a 	bl	80018cc <HAL_GetTick>
 8006218:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800621a:	e00a      	b.n	8006232 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621c:	f7fb fb56 	bl	80018cc <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800622a:	4293      	cmp	r3, r2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e15e      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006232:	4b75      	ldr	r3, [pc, #468]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1ed      	bne.n	800621c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0320 	and.w	r3, r3, #32
 8006248:	2b00      	cmp	r3, #0
 800624a:	d036      	beq.n	80062ba <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006250:	2b00      	cmp	r3, #0
 8006252:	d019      	beq.n	8006288 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006254:	4b6c      	ldr	r3, [pc, #432]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a6b      	ldr	r2, [pc, #428]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800625a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800625e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006260:	f7fb fb34 	bl	80018cc <HAL_GetTick>
 8006264:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006268:	f7fb fb30 	bl	80018cc <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e13a      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800627a:	4b63      	ldr	r3, [pc, #396]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0f0      	beq.n	8006268 <HAL_RCC_OscConfig+0x5dc>
 8006286:	e018      	b.n	80062ba <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006288:	4b5f      	ldr	r3, [pc, #380]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a5e      	ldr	r2, [pc, #376]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800628e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006292:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006294:	f7fb fb1a 	bl	80018cc <HAL_GetTick>
 8006298:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800629c:	f7fb fb16 	bl	80018cc <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e120      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80062ae:	4b56      	ldr	r3, [pc, #344]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 8115 	beq.w	80064ee <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	2b18      	cmp	r3, #24
 80062c8:	f000 80af 	beq.w	800642a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	f040 8086 	bne.w	80063e2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80062d6:	4b4c      	ldr	r3, [pc, #304]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a4b      	ldr	r2, [pc, #300]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80062dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e2:	f7fb faf3 	bl	80018cc <HAL_GetTick>
 80062e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80062e8:	e008      	b.n	80062fc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80062ea:	f7fb faef 	bl	80018cc <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e0f9      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80062fc:	4b42      	ldr	r3, [pc, #264]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1f0      	bne.n	80062ea <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006308:	4b3f      	ldr	r3, [pc, #252]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006310:	f023 0303 	bic.w	r3, r3, #3
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800631c:	0212      	lsls	r2, r2, #8
 800631e:	430a      	orrs	r2, r1
 8006320:	4939      	ldr	r1, [pc, #228]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006322:	4313      	orrs	r3, r2
 8006324:	628b      	str	r3, [r1, #40]	@ 0x28
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800632a:	3b01      	subs	r3, #1
 800632c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006334:	3b01      	subs	r3, #1
 8006336:	025b      	lsls	r3, r3, #9
 8006338:	b29b      	uxth	r3, r3
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006340:	3b01      	subs	r3, #1
 8006342:	041b      	lsls	r3, r3, #16
 8006344:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634e:	3b01      	subs	r3, #1
 8006350:	061b      	lsls	r3, r3, #24
 8006352:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006356:	492c      	ldr	r1, [pc, #176]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006358:	4313      	orrs	r3, r2
 800635a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800635c:	4b2a      	ldr	r3, [pc, #168]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800635e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006360:	4a29      	ldr	r2, [pc, #164]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006362:	f023 0310 	bic.w	r3, r3, #16
 8006366:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800636c:	4a26      	ldr	r2, [pc, #152]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006372:	4b25      	ldr	r3, [pc, #148]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006376:	4a24      	ldr	r2, [pc, #144]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006378:	f043 0310 	orr.w	r3, r3, #16
 800637c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800637e:	4b22      	ldr	r3, [pc, #136]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006382:	f023 020c 	bic.w	r2, r3, #12
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638a:	491f      	ldr	r1, [pc, #124]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800638c:	4313      	orrs	r3, r2
 800638e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8006390:	4b1d      	ldr	r3, [pc, #116]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 8006392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006394:	f023 0220 	bic.w	r2, r3, #32
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800639c:	491a      	ldr	r1, [pc, #104]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063a2:	4b19      	ldr	r3, [pc, #100]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80063a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a6:	4a18      	ldr	r2, [pc, #96]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80063a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80063ae:	4b16      	ldr	r3, [pc, #88]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a15      	ldr	r2, [pc, #84]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80063b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ba:	f7fb fa87 	bl	80018cc <HAL_GetTick>
 80063be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80063c2:	f7fb fa83 	bl	80018cc <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e08d      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80063d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f0      	beq.n	80063c2 <HAL_RCC_OscConfig+0x736>
 80063e0:	e085      	b.n	80064ee <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80063e2:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a08      	ldr	r2, [pc, #32]	@ (8006408 <HAL_RCC_OscConfig+0x77c>)
 80063e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ee:	f7fb fa6d 	bl	80018cc <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80063f4:	e00a      	b.n	800640c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80063f6:	f7fb fa69 	bl	80018cc <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d903      	bls.n	800640c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e073      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
 8006408:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800640c:	4b3a      	ldr	r3, [pc, #232]	@ (80064f8 <HAL_RCC_OscConfig+0x86c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1ee      	bne.n	80063f6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006418:	4b37      	ldr	r3, [pc, #220]	@ (80064f8 <HAL_RCC_OscConfig+0x86c>)
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	4a36      	ldr	r2, [pc, #216]	@ (80064f8 <HAL_RCC_OscConfig+0x86c>)
 800641e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	6293      	str	r3, [r2, #40]	@ 0x28
 8006428:	e061      	b.n	80064ee <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800642a:	4b33      	ldr	r3, [pc, #204]	@ (80064f8 <HAL_RCC_OscConfig+0x86c>)
 800642c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006430:	4b31      	ldr	r3, [pc, #196]	@ (80064f8 <HAL_RCC_OscConfig+0x86c>)
 8006432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006434:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643a:	2b01      	cmp	r3, #1
 800643c:	d031      	beq.n	80064a2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f003 0203 	and.w	r2, r3, #3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d12a      	bne.n	80064a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	0a1b      	lsrs	r3, r3, #8
 8006450:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006458:	429a      	cmp	r2, r3
 800645a:	d122      	bne.n	80064a2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006466:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006468:	429a      	cmp	r2, r3
 800646a:	d11a      	bne.n	80064a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	0a5b      	lsrs	r3, r3, #9
 8006470:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006478:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800647a:	429a      	cmp	r2, r3
 800647c:	d111      	bne.n	80064a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	0c1b      	lsrs	r3, r3, #16
 8006482:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800648c:	429a      	cmp	r2, r3
 800648e:	d108      	bne.n	80064a2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	0e1b      	lsrs	r3, r3, #24
 8006494:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800649e:	429a      	cmp	r2, r3
 80064a0:	d001      	beq.n	80064a6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e024      	b.n	80064f0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80064a6:	4b14      	ldr	r3, [pc, #80]	@ (80064f8 <HAL_RCC_OscConfig+0x86c>)
 80064a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064aa:	08db      	lsrs	r3, r3, #3
 80064ac:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d01a      	beq.n	80064ee <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80064b8:	4b0f      	ldr	r3, [pc, #60]	@ (80064f8 <HAL_RCC_OscConfig+0x86c>)
 80064ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064bc:	4a0e      	ldr	r2, [pc, #56]	@ (80064f8 <HAL_RCC_OscConfig+0x86c>)
 80064be:	f023 0310 	bic.w	r3, r3, #16
 80064c2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c4:	f7fb fa02 	bl	80018cc <HAL_GetTick>
 80064c8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80064ca:	bf00      	nop
 80064cc:	f7fb f9fe 	bl	80018cc <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d0f9      	beq.n	80064cc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064dc:	4a06      	ldr	r2, [pc, #24]	@ (80064f8 <HAL_RCC_OscConfig+0x86c>)
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80064e2:	4b05      	ldr	r3, [pc, #20]	@ (80064f8 <HAL_RCC_OscConfig+0x86c>)
 80064e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e6:	4a04      	ldr	r2, [pc, #16]	@ (80064f8 <HAL_RCC_OscConfig+0x86c>)
 80064e8:	f043 0310 	orr.w	r3, r3, #16
 80064ec:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3720      	adds	r7, #32
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	44020c00 	.word	0x44020c00

080064fc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e19e      	b.n	800684e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006510:	4b83      	ldr	r3, [pc, #524]	@ (8006720 <HAL_RCC_ClockConfig+0x224>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d910      	bls.n	8006540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651e:	4b80      	ldr	r3, [pc, #512]	@ (8006720 <HAL_RCC_ClockConfig+0x224>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f023 020f 	bic.w	r2, r3, #15
 8006526:	497e      	ldr	r1, [pc, #504]	@ (8006720 <HAL_RCC_ClockConfig+0x224>)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	4313      	orrs	r3, r2
 800652c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652e:	4b7c      	ldr	r3, [pc, #496]	@ (8006720 <HAL_RCC_ClockConfig+0x224>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d001      	beq.n	8006540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e186      	b.n	800684e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	d012      	beq.n	8006572 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	695a      	ldr	r2, [r3, #20]
 8006550:	4b74      	ldr	r3, [pc, #464]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	0a1b      	lsrs	r3, r3, #8
 8006556:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800655a:	429a      	cmp	r2, r3
 800655c:	d909      	bls.n	8006572 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800655e:	4b71      	ldr	r3, [pc, #452]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	496d      	ldr	r1, [pc, #436]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 800656e:	4313      	orrs	r3, r2
 8006570:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d012      	beq.n	80065a4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	4b68      	ldr	r3, [pc, #416]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	091b      	lsrs	r3, r3, #4
 8006588:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800658c:	429a      	cmp	r2, r3
 800658e:	d909      	bls.n	80065a4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006590:	4b64      	ldr	r3, [pc, #400]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	4961      	ldr	r1, [pc, #388]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d010      	beq.n	80065d2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	4b5b      	ldr	r3, [pc, #364]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065bc:	429a      	cmp	r2, r3
 80065be:	d908      	bls.n	80065d2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80065c0:	4b58      	ldr	r3, [pc, #352]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4955      	ldr	r1, [pc, #340]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d010      	beq.n	8006600 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	4b50      	ldr	r3, [pc, #320]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d908      	bls.n	8006600 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80065ee:	4b4d      	ldr	r3, [pc, #308]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f023 020f 	bic.w	r2, r3, #15
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	494a      	ldr	r1, [pc, #296]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 8093 	beq.w	8006734 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2b03      	cmp	r3, #3
 8006614:	d107      	bne.n	8006626 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006616:	4b43      	ldr	r3, [pc, #268]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d121      	bne.n	8006666 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e113      	b.n	800684e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d107      	bne.n	800663e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800662e:	4b3d      	ldr	r3, [pc, #244]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d115      	bne.n	8006666 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e107      	b.n	800684e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d107      	bne.n	8006656 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006646:	4b37      	ldr	r3, [pc, #220]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800664e:	2b00      	cmp	r3, #0
 8006650:	d109      	bne.n	8006666 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e0fb      	b.n	800684e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006656:	4b33      	ldr	r3, [pc, #204]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e0f3      	b.n	800684e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006666:	4b2f      	ldr	r3, [pc, #188]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f023 0203 	bic.w	r2, r3, #3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	492c      	ldr	r1, [pc, #176]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 8006674:	4313      	orrs	r3, r2
 8006676:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006678:	f7fb f928 	bl	80018cc <HAL_GetTick>
 800667c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b03      	cmp	r3, #3
 8006684:	d112      	bne.n	80066ac <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006686:	e00a      	b.n	800669e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006688:	f7fb f920 	bl	80018cc <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006696:	4293      	cmp	r3, r2
 8006698:	d901      	bls.n	800669e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e0d7      	b.n	800684e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800669e:	4b21      	ldr	r3, [pc, #132]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f003 0318 	and.w	r3, r3, #24
 80066a6:	2b18      	cmp	r3, #24
 80066a8:	d1ee      	bne.n	8006688 <HAL_RCC_ClockConfig+0x18c>
 80066aa:	e043      	b.n	8006734 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d112      	bne.n	80066da <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80066b4:	e00a      	b.n	80066cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80066b6:	f7fb f909 	bl	80018cc <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e0c0      	b.n	800684e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80066cc:	4b15      	ldr	r3, [pc, #84]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f003 0318 	and.w	r3, r3, #24
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d1ee      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x1ba>
 80066d8:	e02c      	b.n	8006734 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d122      	bne.n	8006728 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80066e2:	e00a      	b.n	80066fa <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80066e4:	f7fb f8f2 	bl	80018cc <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e0a9      	b.n	800684e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80066fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <HAL_RCC_ClockConfig+0x228>)
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f003 0318 	and.w	r3, r3, #24
 8006702:	2b08      	cmp	r3, #8
 8006704:	d1ee      	bne.n	80066e4 <HAL_RCC_ClockConfig+0x1e8>
 8006706:	e015      	b.n	8006734 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006708:	f7fb f8e0 	bl	80018cc <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006716:	4293      	cmp	r3, r2
 8006718:	d906      	bls.n	8006728 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e097      	b.n	800684e <HAL_RCC_ClockConfig+0x352>
 800671e:	bf00      	nop
 8006720:	40022000 	.word	0x40022000
 8006724:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006728:	4b4b      	ldr	r3, [pc, #300]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	f003 0318 	and.w	r3, r3, #24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e9      	bne.n	8006708 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d010      	beq.n	8006762 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	4b44      	ldr	r3, [pc, #272]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	429a      	cmp	r2, r3
 800674e:	d208      	bcs.n	8006762 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006750:	4b41      	ldr	r3, [pc, #260]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f023 020f 	bic.w	r2, r3, #15
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	493e      	ldr	r1, [pc, #248]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 800675e:	4313      	orrs	r3, r2
 8006760:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006762:	4b3e      	ldr	r3, [pc, #248]	@ (800685c <HAL_RCC_ClockConfig+0x360>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d210      	bcs.n	8006792 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006770:	4b3a      	ldr	r3, [pc, #232]	@ (800685c <HAL_RCC_ClockConfig+0x360>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f023 020f 	bic.w	r2, r3, #15
 8006778:	4938      	ldr	r1, [pc, #224]	@ (800685c <HAL_RCC_ClockConfig+0x360>)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	4313      	orrs	r3, r2
 800677e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006780:	4b36      	ldr	r3, [pc, #216]	@ (800685c <HAL_RCC_ClockConfig+0x360>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d001      	beq.n	8006792 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e05d      	b.n	800684e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d010      	beq.n	80067c0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d208      	bcs.n	80067c0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80067ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	4927      	ldr	r1, [pc, #156]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d012      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	4b21      	ldr	r3, [pc, #132]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	091b      	lsrs	r3, r3, #4
 80067d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067da:	429a      	cmp	r2, r3
 80067dc:	d209      	bcs.n	80067f2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80067de:	4b1e      	ldr	r3, [pc, #120]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	491a      	ldr	r1, [pc, #104]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0310 	and.w	r3, r3, #16
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d012      	beq.n	8006824 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695a      	ldr	r2, [r3, #20]
 8006802:	4b15      	ldr	r3, [pc, #84]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800680c:	429a      	cmp	r2, r3
 800680e:	d209      	bcs.n	8006824 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006810:	4b11      	ldr	r3, [pc, #68]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	490e      	ldr	r1, [pc, #56]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 8006820:	4313      	orrs	r3, r2
 8006822:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006824:	f000 f822 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8006828:	4602      	mov	r2, r0
 800682a:	4b0b      	ldr	r3, [pc, #44]	@ (8006858 <HAL_RCC_ClockConfig+0x35c>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	490b      	ldr	r1, [pc, #44]	@ (8006860 <HAL_RCC_ClockConfig+0x364>)
 8006834:	5ccb      	ldrb	r3, [r1, r3]
 8006836:	fa22 f303 	lsr.w	r3, r2, r3
 800683a:	4a0a      	ldr	r2, [pc, #40]	@ (8006864 <HAL_RCC_ClockConfig+0x368>)
 800683c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800683e:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <HAL_RCC_ClockConfig+0x36c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fa ffb8 	bl	80017b8 <HAL_InitTick>
 8006848:	4603      	mov	r3, r0
 800684a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800684c:	7afb      	ldrb	r3, [r7, #11]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	44020c00 	.word	0x44020c00
 800685c:	40022000 	.word	0x40022000
 8006860:	0800814c 	.word	0x0800814c
 8006864:	20000000 	.word	0x20000000
 8006868:	20000004 	.word	0x20000004

0800686c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800686c:	b480      	push	{r7}
 800686e:	b089      	sub	sp, #36	@ 0x24
 8006870:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006872:	4b8c      	ldr	r3, [pc, #560]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f003 0318 	and.w	r3, r3, #24
 800687a:	2b08      	cmp	r3, #8
 800687c:	d102      	bne.n	8006884 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800687e:	4b8a      	ldr	r3, [pc, #552]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	e107      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006884:	4b87      	ldr	r3, [pc, #540]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	f003 0318 	and.w	r3, r3, #24
 800688c:	2b00      	cmp	r3, #0
 800688e:	d112      	bne.n	80068b6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006890:	4b84      	ldr	r3, [pc, #528]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	d009      	beq.n	80068b0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800689c:	4b81      	ldr	r3, [pc, #516]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	08db      	lsrs	r3, r3, #3
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	4a81      	ldr	r2, [pc, #516]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x240>)
 80068a8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ac:	61fb      	str	r3, [r7, #28]
 80068ae:	e0f1      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80068b0:	4b7e      	ldr	r3, [pc, #504]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x240>)
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	e0ee      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068b6:	4b7b      	ldr	r3, [pc, #492]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f003 0318 	and.w	r3, r3, #24
 80068be:	2b10      	cmp	r3, #16
 80068c0:	d102      	bne.n	80068c8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80068c2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x244>)
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	e0e5      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068c8:	4b76      	ldr	r3, [pc, #472]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	f003 0318 	and.w	r3, r3, #24
 80068d0:	2b18      	cmp	r3, #24
 80068d2:	f040 80dd 	bne.w	8006a90 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80068d6:	4b73      	ldr	r3, [pc, #460]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80068e0:	4b70      	ldr	r3, [pc, #448]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 80068e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80068ec:	4b6d      	ldr	r3, [pc, #436]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 80068ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f0:	091b      	lsrs	r3, r3, #4
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80068f8:	4b6a      	ldr	r3, [pc, #424]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 80068fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80068fc:	08db      	lsrs	r3, r3, #3
 80068fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	fb02 f303 	mul.w	r3, r2, r3
 8006908:	ee07 3a90 	vmov	s15, r3
 800690c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006910:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 80b7 	beq.w	8006a8a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d003      	beq.n	800692a <HAL_RCC_GetSysClockFreq+0xbe>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b03      	cmp	r3, #3
 8006926:	d056      	beq.n	80069d6 <HAL_RCC_GetSysClockFreq+0x16a>
 8006928:	e077      	b.n	8006a1a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800692a:	4b5e      	ldr	r3, [pc, #376]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d02d      	beq.n	8006992 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006936:	4b5b      	ldr	r3, [pc, #364]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	08db      	lsrs	r3, r3, #3
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	4a5a      	ldr	r2, [pc, #360]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x240>)
 8006942:	fa22 f303 	lsr.w	r3, r2, r3
 8006946:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	ee07 3a90 	vmov	s15, r3
 8006958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006960:	4b50      	ldr	r3, [pc, #320]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006968:	ee07 3a90 	vmov	s15, r3
 800696c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006970:	ed97 6a02 	vldr	s12, [r7, #8]
 8006974:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006ab4 <HAL_RCC_GetSysClockFreq+0x248>
 8006978:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800697c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006980:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006984:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006990:	e065      	b.n	8006a5e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	ee07 3a90 	vmov	s15, r3
 8006998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006ab8 <HAL_RCC_GetSysClockFreq+0x24c>
 80069a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a4:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 80069a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ac:	ee07 3a90 	vmov	s15, r3
 80069b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80069b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80069b8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006ab4 <HAL_RCC_GetSysClockFreq+0x248>
 80069bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80069c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80069d4:	e043      	b.n	8006a5e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	ee07 3a90 	vmov	s15, r3
 80069dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006abc <HAL_RCC_GetSysClockFreq+0x250>
 80069e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e8:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 80069ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f0:	ee07 3a90 	vmov	s15, r3
 80069f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80069f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80069fc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006ab4 <HAL_RCC_GetSysClockFreq+0x248>
 8006a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a14:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006a18:	e021      	b.n	8006a5e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	ee07 3a90 	vmov	s15, r3
 8006a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a24:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006ac0 <HAL_RCC_GetSysClockFreq+0x254>
 8006a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a34:	ee07 3a90 	vmov	s15, r3
 8006a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a40:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006ab4 <HAL_RCC_GetSysClockFreq+0x248>
 8006a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a58:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006a5c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006a5e:	4b11      	ldr	r3, [pc, #68]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a62:	0a5b      	lsrs	r3, r3, #9
 8006a64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a68:	3301      	adds	r3, #1
 8006a6a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a76:	edd7 6a06 	vldr	s13, [r7, #24]
 8006a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a82:	ee17 3a90 	vmov	r3, s15
 8006a86:	61fb      	str	r3, [r7, #28]
 8006a88:	e004      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
 8006a8e:	e001      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006a90:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x240>)
 8006a92:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006a94:	69fb      	ldr	r3, [r7, #28]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3724      	adds	r7, #36	@ 0x24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	44020c00 	.word	0x44020c00
 8006aa8:	003d0900 	.word	0x003d0900
 8006aac:	03d09000 	.word	0x03d09000
 8006ab0:	017d7840 	.word	0x017d7840
 8006ab4:	46000000 	.word	0x46000000
 8006ab8:	4c742400 	.word	0x4c742400
 8006abc:	4bbebc20 	.word	0x4bbebc20
 8006ac0:	4a742400 	.word	0x4a742400

08006ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006ac8:	f7ff fed0 	bl	800686c <HAL_RCC_GetSysClockFreq>
 8006acc:	4602      	mov	r2, r0
 8006ace:	4b08      	ldr	r3, [pc, #32]	@ (8006af0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006ad2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006ad6:	4907      	ldr	r1, [pc, #28]	@ (8006af4 <HAL_RCC_GetHCLKFreq+0x30>)
 8006ad8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006ada:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	4a05      	ldr	r2, [pc, #20]	@ (8006af8 <HAL_RCC_GetHCLKFreq+0x34>)
 8006ae4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8006ae6:	4b04      	ldr	r3, [pc, #16]	@ (8006af8 <HAL_RCC_GetHCLKFreq+0x34>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	44020c00 	.word	0x44020c00
 8006af4:	0800814c 	.word	0x0800814c
 8006af8:	20000000 	.word	0x20000000

08006afc <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b00:	b0ba      	sub	sp, #232	@ 0xe8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006b20:	2500      	movs	r5, #0
 8006b22:	ea54 0305 	orrs.w	r3, r4, r5
 8006b26:	d00b      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006b28:	4bcd      	ldr	r3, [pc, #820]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b2e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b38:	4ac9      	ldr	r2, [pc, #804]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	f002 0801 	and.w	r8, r2, #1
 8006b4c:	f04f 0900 	mov.w	r9, #0
 8006b50:	ea58 0309 	orrs.w	r3, r8, r9
 8006b54:	d042      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b5c:	2b05      	cmp	r3, #5
 8006b5e:	d823      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006b60:	a201      	add	r2, pc, #4	@ (adr r2, 8006b68 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b66:	bf00      	nop
 8006b68:	08006bb1 	.word	0x08006bb1
 8006b6c:	08006b81 	.word	0x08006b81
 8006b70:	08006b95 	.word	0x08006b95
 8006b74:	08006bb1 	.word	0x08006bb1
 8006b78:	08006bb1 	.word	0x08006bb1
 8006b7c:	08006bb1 	.word	0x08006bb1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b84:	3308      	adds	r3, #8
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 f978 	bl	8007e7c <RCCEx_PLL2_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006b92:	e00e      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006b98:	3330      	adds	r3, #48	@ 0x30
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f001 fa06 	bl	8007fac <RCCEx_PLL3_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006ba6:	e004      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006bae:	e000      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006bba:	4ba9      	ldr	r3, [pc, #676]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006bc0:	f023 0107 	bic.w	r1, r3, #7
 8006bc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bca:	4aa5      	ldr	r2, [pc, #660]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006bd2:	e003      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006bd8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be4:	f002 0a02 	and.w	sl, r2, #2
 8006be8:	f04f 0b00 	mov.w	fp, #0
 8006bec:	ea5a 030b 	orrs.w	r3, sl, fp
 8006bf0:	f000 8088 	beq.w	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfa:	2b28      	cmp	r3, #40	@ 0x28
 8006bfc:	d868      	bhi.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8006c04 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c04:	08006cd9 	.word	0x08006cd9
 8006c08:	08006cd1 	.word	0x08006cd1
 8006c0c:	08006cd1 	.word	0x08006cd1
 8006c10:	08006cd1 	.word	0x08006cd1
 8006c14:	08006cd1 	.word	0x08006cd1
 8006c18:	08006cd1 	.word	0x08006cd1
 8006c1c:	08006cd1 	.word	0x08006cd1
 8006c20:	08006cd1 	.word	0x08006cd1
 8006c24:	08006ca9 	.word	0x08006ca9
 8006c28:	08006cd1 	.word	0x08006cd1
 8006c2c:	08006cd1 	.word	0x08006cd1
 8006c30:	08006cd1 	.word	0x08006cd1
 8006c34:	08006cd1 	.word	0x08006cd1
 8006c38:	08006cd1 	.word	0x08006cd1
 8006c3c:	08006cd1 	.word	0x08006cd1
 8006c40:	08006cd1 	.word	0x08006cd1
 8006c44:	08006cbd 	.word	0x08006cbd
 8006c48:	08006cd1 	.word	0x08006cd1
 8006c4c:	08006cd1 	.word	0x08006cd1
 8006c50:	08006cd1 	.word	0x08006cd1
 8006c54:	08006cd1 	.word	0x08006cd1
 8006c58:	08006cd1 	.word	0x08006cd1
 8006c5c:	08006cd1 	.word	0x08006cd1
 8006c60:	08006cd1 	.word	0x08006cd1
 8006c64:	08006cd9 	.word	0x08006cd9
 8006c68:	08006cd1 	.word	0x08006cd1
 8006c6c:	08006cd1 	.word	0x08006cd1
 8006c70:	08006cd1 	.word	0x08006cd1
 8006c74:	08006cd1 	.word	0x08006cd1
 8006c78:	08006cd1 	.word	0x08006cd1
 8006c7c:	08006cd1 	.word	0x08006cd1
 8006c80:	08006cd1 	.word	0x08006cd1
 8006c84:	08006cd9 	.word	0x08006cd9
 8006c88:	08006cd1 	.word	0x08006cd1
 8006c8c:	08006cd1 	.word	0x08006cd1
 8006c90:	08006cd1 	.word	0x08006cd1
 8006c94:	08006cd1 	.word	0x08006cd1
 8006c98:	08006cd1 	.word	0x08006cd1
 8006c9c:	08006cd1 	.word	0x08006cd1
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006cd9 	.word	0x08006cd9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cac:	3308      	adds	r3, #8
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f8e4 	bl	8007e7c <RCCEx_PLL2_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006cba:	e00e      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cc0:	3330      	adds	r3, #48	@ 0x30
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 f972 	bl	8007fac <RCCEx_PLL3_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006cce:	e004      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006cd6:	e000      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cda:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10c      	bne.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006ce2:	4b5f      	ldr	r3, [pc, #380]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ce8:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006cec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf2:	4a5b      	ldr	r2, [pc, #364]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006cfa:	e003      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cfc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d00:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f002 0304 	and.w	r3, r2, #4
 8006d10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d14:	2300      	movs	r3, #0
 8006d16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4313      	orrs	r3, r2
 8006d22:	d04e      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006d2e:	d02c      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006d30:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006d34:	d825      	bhi.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006d36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d3a:	d028      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d40:	d81f      	bhi.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006d42:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d44:	d025      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006d46:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d48:	d81b      	bhi.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006d4a:	2b80      	cmp	r3, #128	@ 0x80
 8006d4c:	d00f      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006d4e:	2b80      	cmp	r3, #128	@ 0x80
 8006d50:	d817      	bhi.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d01f      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006d56:	2b40      	cmp	r3, #64	@ 0x40
 8006d58:	d113      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d5e:	3308      	adds	r3, #8
 8006d60:	4618      	mov	r0, r3
 8006d62:	f001 f88b 	bl	8007e7c <RCCEx_PLL2_Config>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006d6c:	e014      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d72:	3330      	adds	r3, #48	@ 0x30
 8006d74:	4618      	mov	r0, r3
 8006d76:	f001 f919 	bl	8007fac <RCCEx_PLL3_Config>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006d80:	e00a      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006d88:	e006      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006d8a:	bf00      	nop
 8006d8c:	e004      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006d8e:	bf00      	nop
 8006d90:	e002      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006d92:	bf00      	nop
 8006d94:	e000      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d98:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10c      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006da0:	4b2f      	ldr	r3, [pc, #188]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006da2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006da6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006db0:	4a2b      	ldr	r2, [pc, #172]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006db2:	430b      	orrs	r3, r1
 8006db4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006db8:	e003      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006dbe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	f002 0308 	and.w	r3, r2, #8
 8006dce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4313      	orrs	r3, r2
 8006de0:	d056      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006de8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006dec:	d031      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006dee:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006df2:	d82a      	bhi.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006df4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006df8:	d02d      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dfe:	d824      	bhi.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006e00:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006e04:	d029      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006e06:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006e0a:	d81e      	bhi.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e10:	d011      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e16:	d818      	bhi.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d023      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e20:	d113      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e26:	3308      	adds	r3, #8
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 f827 	bl	8007e7c <RCCEx_PLL2_Config>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8006e34:	e017      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e3a:	3330      	adds	r3, #48	@ 0x30
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f001 f8b5 	bl	8007fac <RCCEx_PLL3_Config>
 8006e42:	4603      	mov	r3, r0
 8006e44:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8006e48:	e00d      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006e50:	e009      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006e52:	bf00      	nop
 8006e54:	e007      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006e56:	bf00      	nop
 8006e58:	e005      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006e5a:	bf00      	nop
 8006e5c:	e003      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006e5e:	bf00      	nop
 8006e60:	44020c00 	.word	0x44020c00
        break;
 8006e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10c      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006e6e:	4bb9      	ldr	r3, [pc, #740]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e74:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e7e:	4ab5      	ldr	r2, [pc, #724]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e80:	430b      	orrs	r3, r1
 8006e82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006e86:	e003      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e88:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006e8c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	f002 0310 	and.w	r3, r2, #16
 8006e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006ea6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4313      	orrs	r3, r2
 8006eae:	d053      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006eb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eb6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006eba:	d031      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006ebc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006ec0:	d82a      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006ec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ec6:	d02d      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006ec8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ecc:	d824      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006ece:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ed2:	d029      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006ed4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ed8:	d81e      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ede:	d011      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ee4:	d818      	bhi.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d020      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x430>
 8006eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eee:	d113      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 ffc0 	bl	8007e7c <RCCEx_PLL2_Config>
 8006efc:	4603      	mov	r3, r0
 8006efe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8006f02:	e014      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f08:	3330      	adds	r3, #48	@ 0x30
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 f84e 	bl	8007fac <RCCEx_PLL3_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8006f16:	e00a      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006f1e:	e006      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006f20:	bf00      	nop
 8006f22:	e004      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006f24:	bf00      	nop
 8006f26:	e002      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006f28:	bf00      	nop
 8006f2a:	e000      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10c      	bne.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006f36:	4b87      	ldr	r3, [pc, #540]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f3c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006f40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f46:	4a83      	ldr	r2, [pc, #524]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f4e:	e003      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006f54:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006f58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f60:	f002 0320 	and.w	r3, r2, #32
 8006f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4313      	orrs	r3, r2
 8006f76:	d053      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8006f78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f7e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006f82:	d031      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8006f84:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006f88:	d82a      	bhi.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006f8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f8e:	d02d      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f94:	d824      	bhi.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006f96:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006f9a:	d029      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006f9c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006fa0:	d81e      	bhi.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa6:	d011      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fac:	d818      	bhi.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d020      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8006fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fb6:	d113      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 ff5c 	bl	8007e7c <RCCEx_PLL2_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8006fca:	e014      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fd0:	3330      	adds	r3, #48	@ 0x30
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 ffea 	bl	8007fac <RCCEx_PLL3_Config>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8006fde:	e00a      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8006fe6:	e006      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006fe8:	bf00      	nop
 8006fea:	e004      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006fec:	bf00      	nop
 8006fee:	e002      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006ff0:	bf00      	nop
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10c      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006ffe:	4b55      	ldr	r3, [pc, #340]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007004:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8007008:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800700c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800700e:	4a51      	ldr	r2, [pc, #324]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007010:	430b      	orrs	r3, r1
 8007012:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007016:	e003      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007018:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800701c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007020:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800702c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007030:	2300      	movs	r3, #0
 8007032:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007036:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800703a:	460b      	mov	r3, r1
 800703c:	4313      	orrs	r3, r2
 800703e:	d053      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007046:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800704a:	d031      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800704c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007050:	d82a      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007052:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007056:	d02d      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8007058:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800705c:	d824      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800705e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007062:	d029      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007064:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007068:	d81e      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800706a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800706e:	d011      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8007070:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007074:	d818      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007076:	2b00      	cmp	r3, #0
 8007078:	d020      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800707a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800707e:	d113      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007084:	3308      	adds	r3, #8
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fef8 	bl	8007e7c <RCCEx_PLL2_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007092:	e014      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007094:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007098:	3330      	adds	r3, #48	@ 0x30
 800709a:	4618      	mov	r0, r3
 800709c:	f000 ff86 	bl	8007fac <RCCEx_PLL3_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80070a6:	e00a      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80070ae:	e006      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80070b0:	bf00      	nop
 80070b2:	e004      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80070b4:	bf00      	nop
 80070b6:	e002      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80070b8:	bf00      	nop
 80070ba:	e000      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80070bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070be:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10c      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80070c6:	4b23      	ldr	r3, [pc, #140]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80070c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80070d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007154 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80070d8:	430b      	orrs	r3, r1
 80070da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80070de:	e003      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80070e4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80070f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070f8:	2300      	movs	r3, #0
 80070fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070fe:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007102:	460b      	mov	r3, r1
 8007104:	4313      	orrs	r3, r2
 8007106:	d03d      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8007108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800710c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800710e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007112:	d01b      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007114:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007118:	d814      	bhi.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x648>
 800711a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800711e:	d017      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8007120:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007124:	d80e      	bhi.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d016      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800712a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800712e:	d109      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007130:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007134:	3330      	adds	r3, #48	@ 0x30
 8007136:	4618      	mov	r0, r3
 8007138:	f000 ff38 	bl	8007fac <RCCEx_PLL3_Config>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8007142:	e00a      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800714a:	e006      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 800714c:	bf00      	nop
 800714e:	e004      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8007150:	bf00      	nop
 8007152:	e002      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8007154:	44020c00 	.word	0x44020c00
        break;
 8007158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800715a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10c      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007162:	4b99      	ldr	r3, [pc, #612]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007164:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007168:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800716c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007170:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007172:	4a95      	ldr	r2, [pc, #596]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007174:	430b      	orrs	r3, r1
 8007176:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800717a:	e003      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007180:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007194:	2300      	movs	r3, #0
 8007196:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800719a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800719e:	460b      	mov	r3, r1
 80071a0:	4313      	orrs	r3, r2
 80071a2:	d03b      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80071a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80071ae:	d01b      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80071b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80071b4:	d814      	bhi.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80071b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80071ba:	d017      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 80071bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80071c0:	d80e      	bhi.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d014      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80071c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071ca:	d109      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071d0:	3330      	adds	r3, #48	@ 0x30
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 feea 	bl	8007fac <RCCEx_PLL3_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80071de:	e008      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80071e6:	e004      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80071e8:	bf00      	nop
 80071ea:	e002      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80071ec:	bf00      	nop
 80071ee:	e000      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80071f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10c      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80071fa:	4b73      	ldr	r3, [pc, #460]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007200:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007208:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800720a:	4a6f      	ldr	r2, [pc, #444]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800720c:	430b      	orrs	r3, r1
 800720e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007212:	e003      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007218:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800721c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007228:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800722c:	2300      	movs	r3, #0
 800722e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007232:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007236:	460b      	mov	r3, r1
 8007238:	4313      	orrs	r3, r2
 800723a:	d03d      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800723c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007244:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007248:	d01b      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x786>
 800724a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800724e:	d814      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8007250:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007254:	d017      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8007256:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800725a:	d80e      	bhi.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d014      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8007260:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007264:	d109      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800726a:	3330      	adds	r3, #48	@ 0x30
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fe9d 	bl	8007fac <RCCEx_PLL3_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8007278:	e008      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007280:	e004      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8007282:	bf00      	nop
 8007284:	e002      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8007286:	bf00      	nop
 8007288:	e000      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800728a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800728c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10d      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007294:	4b4c      	ldr	r3, [pc, #304]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007296:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800729a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800729e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a6:	4a48      	ldr	r2, [pc, #288]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80072a8:	430b      	orrs	r3, r1
 80072aa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80072ae:	e003      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80072b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80072b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80072c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072c8:	2300      	movs	r3, #0
 80072ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80072ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80072d2:	460b      	mov	r3, r1
 80072d4:	4313      	orrs	r3, r2
 80072d6:	d035      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80072d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072e4:	d015      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80072e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072ea:	d80e      	bhi.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d012      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80072f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072f4:	d109      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072fa:	3330      	adds	r3, #48	@ 0x30
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 fe55 	bl	8007fac <RCCEx_PLL3_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8007308:	e006      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007310:	e002      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8007312:	bf00      	nop
 8007314:	e000      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8007316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007318:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10d      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8007320:	4b29      	ldr	r3, [pc, #164]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007322:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007326:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800732a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800732e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007332:	4a25      	ldr	r2, [pc, #148]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007334:	430b      	orrs	r3, r1
 8007336:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800733a:	e003      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007340:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8007344:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	2100      	movs	r1, #0
 800734e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8007352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800735a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800735e:	460b      	mov	r3, r1
 8007360:	4313      	orrs	r3, r2
 8007362:	d037      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8007364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007370:	d015      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8007372:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007376:	d80e      	bhi.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d012      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800737c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007380:	d109      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007386:	3330      	adds	r3, #48	@ 0x30
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fe0f 	bl	8007fac <RCCEx_PLL3_Config>
 800738e:	4603      	mov	r3, r0
 8007390:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8007394:	e006      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800739c:	e002      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800739e:	bf00      	nop
 80073a0:	e000      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80073a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80073a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10f      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80073ac:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80073b2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80073b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073be:	4a02      	ldr	r2, [pc, #8]	@ (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80073c0:	430b      	orrs	r3, r1
 80073c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80073c6:	e005      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80073c8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80073d0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80073d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	2100      	movs	r1, #0
 80073de:	67b9      	str	r1, [r7, #120]	@ 0x78
 80073e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073e6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80073ea:	460b      	mov	r3, r1
 80073ec:	4313      	orrs	r3, r2
 80073ee:	d00e      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80073f0:	4bb8      	ldr	r3, [pc, #736]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	4ab7      	ldr	r2, [pc, #732]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80073f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073fa:	61d3      	str	r3, [r2, #28]
 80073fc:	4bb5      	ldr	r3, [pc, #724]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80073fe:	69d9      	ldr	r1, [r3, #28]
 8007400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007404:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007408:	4ab2      	ldr	r2, [pc, #712]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800740a:	430b      	orrs	r3, r1
 800740c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800740e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800741a:	673b      	str	r3, [r7, #112]	@ 0x70
 800741c:	2300      	movs	r3, #0
 800741e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007420:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007424:	460b      	mov	r3, r1
 8007426:	4313      	orrs	r3, r2
 8007428:	d055      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800742a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800742e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007432:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007436:	d031      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8007438:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800743c:	d82a      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800743e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007442:	d02d      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8007444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007448:	d824      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800744a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800744e:	d029      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8007450:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007454:	d81e      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800745a:	d011      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800745c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007460:	d818      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8007462:	2b00      	cmp	r3, #0
 8007464:	d020      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8007466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800746a:	d113      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800746c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007470:	3308      	adds	r3, #8
 8007472:	4618      	mov	r0, r3
 8007474:	f000 fd02 	bl	8007e7c <RCCEx_PLL2_Config>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800747e:	e014      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007480:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007484:	3330      	adds	r3, #48	@ 0x30
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fd90 	bl	8007fac <RCCEx_PLL3_Config>
 800748c:	4603      	mov	r3, r0
 800748e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007492:	e00a      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800749a:	e006      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800749c:	bf00      	nop
 800749e:	e004      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80074a0:	bf00      	nop
 80074a2:	e002      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80074a4:	bf00      	nop
 80074a6:	e000      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80074a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10d      	bne.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80074b2:	4b88      	ldr	r3, [pc, #544]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80074b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80074b8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80074bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074c4:	4a83      	ldr	r2, [pc, #524]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80074c6:	430b      	orrs	r3, r1
 80074c8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80074cc:	e003      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80074d2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80074e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074e4:	2300      	movs	r3, #0
 80074e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80074e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80074ec:	460b      	mov	r3, r1
 80074ee:	4313      	orrs	r3, r2
 80074f0:	d055      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80074f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80074fe:	d031      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8007500:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007504:	d82a      	bhi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8007506:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800750a:	d02d      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 800750c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007510:	d824      	bhi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8007512:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007516:	d029      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007518:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800751c:	d81e      	bhi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800751e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007522:	d011      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007528:	d818      	bhi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d020      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800752e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007532:	d113      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007538:	3308      	adds	r3, #8
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fc9e 	bl	8007e7c <RCCEx_PLL2_Config>
 8007540:	4603      	mov	r3, r0
 8007542:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007546:	e014      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800754c:	3330      	adds	r3, #48	@ 0x30
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fd2c 	bl	8007fac <RCCEx_PLL3_Config>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800755a:	e00a      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007562:	e006      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007564:	bf00      	nop
 8007566:	e004      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007568:	bf00      	nop
 800756a:	e002      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800756c:	bf00      	nop
 800756e:	e000      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8007570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007572:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10d      	bne.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800757a:	4b56      	ldr	r3, [pc, #344]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800757c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007580:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800758c:	4a51      	ldr	r2, [pc, #324]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800758e:	430b      	orrs	r3, r1
 8007590:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007594:	e003      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007596:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800759a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800759e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80075aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80075ac:	2300      	movs	r3, #0
 80075ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80075b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80075b4:	460b      	mov	r3, r1
 80075b6:	4313      	orrs	r3, r2
 80075b8:	d032      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80075ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80075c2:	2b05      	cmp	r3, #5
 80075c4:	d80f      	bhi.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d211      	bcs.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d911      	bls.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d109      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80075d6:	3308      	adds	r3, #8
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fc4f 	bl	8007e7c <RCCEx_PLL2_Config>
 80075de:	4603      	mov	r3, r0
 80075e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80075e4:	e006      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80075ec:	e002      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80075ee:	bf00      	nop
 80075f0:	e000      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80075f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10d      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80075fc:	4b35      	ldr	r3, [pc, #212]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80075fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007602:	f023 0107 	bic.w	r1, r3, #7
 8007606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800760a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800760e:	4a31      	ldr	r2, [pc, #196]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007610:	430b      	orrs	r3, r1
 8007612:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007616:	e003      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007618:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800761c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007620:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	2100      	movs	r1, #0
 800762a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800762c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007632:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007636:	460b      	mov	r3, r1
 8007638:	4313      	orrs	r3, r2
 800763a:	d024      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800763c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007640:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d005      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8007648:	2b08      	cmp	r3, #8
 800764a:	d005      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007652:	e002      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8007654:	bf00      	nop
 8007656:	e000      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8007658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800765a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10d      	bne.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8007662:	4b1c      	ldr	r3, [pc, #112]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007668:	f023 0108 	bic.w	r1, r3, #8
 800766c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007670:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007674:	4a17      	ldr	r2, [pc, #92]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8007676:	430b      	orrs	r3, r1
 8007678:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800767c:	e003      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007682:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007692:	653b      	str	r3, [r7, #80]	@ 0x50
 8007694:	2300      	movs	r3, #0
 8007696:	657b      	str	r3, [r7, #84]	@ 0x54
 8007698:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800769c:	460b      	mov	r3, r1
 800769e:	4313      	orrs	r3, r2
 80076a0:	f000 80b9 	beq.w	8007816 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80076a4:	4b0c      	ldr	r3, [pc, #48]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80076a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a8:	4a0b      	ldr	r2, [pc, #44]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80076aa:	f043 0301 	orr.w	r3, r3, #1
 80076ae:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076b0:	f7fa f90c 	bl	80018cc <HAL_GetTick>
 80076b4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80076b8:	e010      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076ba:	f7fa f907 	bl	80018cc <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d908      	bls.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80076d0:	e00a      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80076d2:	bf00      	nop
 80076d4:	44020c00 	.word	0x44020c00
 80076d8:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80076dc:	4bba      	ldr	r3, [pc, #744]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80076de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0e8      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 80076e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f040 808e 	bne.w	800780e <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80076f2:	4bb6      	ldr	r3, [pc, #728]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80076f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d023      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800770c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8007710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007714:	4293      	cmp	r3, r2
 8007716:	d01b      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007718:	4bac      	ldr	r3, [pc, #688]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800771a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800771e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007726:	4ba9      	ldr	r3, [pc, #676]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800772c:	4aa7      	ldr	r2, [pc, #668]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800772e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007732:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007736:	4ba5      	ldr	r3, [pc, #660]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007738:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800773c:	4aa3      	ldr	r2, [pc, #652]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800773e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007742:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007746:	4aa1      	ldr	r2, [pc, #644]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800774c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	d019      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7fa f8b6 	bl	80018cc <HAL_GetTick>
 8007760:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007764:	e00d      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007766:	f7fa f8b1 	bl	80018cc <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007770:	1ad2      	subs	r2, r2, r3
 8007772:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007776:	429a      	cmp	r2, r3
 8007778:	d903      	bls.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8007780:	e006      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007782:	4b92      	ldr	r3, [pc, #584]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007788:	f003 0302 	and.w	r3, r3, #2
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0ea      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8007790:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d135      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007798:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800779c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80077a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077a8:	d110      	bne.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80077aa:	4b88      	ldr	r3, [pc, #544]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80077b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80077ba:	091b      	lsrs	r3, r3, #4
 80077bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80077c0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80077c4:	4a81      	ldr	r2, [pc, #516]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80077c6:	430b      	orrs	r3, r1
 80077c8:	61d3      	str	r3, [r2, #28]
 80077ca:	e005      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80077cc:	4b7f      	ldr	r3, [pc, #508]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	4a7e      	ldr	r2, [pc, #504]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80077d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80077d6:	61d3      	str	r3, [r2, #28]
 80077d8:	4b7c      	ldr	r3, [pc, #496]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80077da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077de:	4a7b      	ldr	r2, [pc, #492]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80077e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80077e8:	4b78      	ldr	r3, [pc, #480]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80077ea:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80077ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80077f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077fa:	4a74      	ldr	r2, [pc, #464]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80077fc:	430b      	orrs	r3, r1
 80077fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007802:	e008      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007804:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007808:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 800780c:	e003      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007812:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007824:	2300      	movs	r3, #0
 8007826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007828:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800782c:	460b      	mov	r3, r1
 800782e:	4313      	orrs	r3, r2
 8007830:	d035      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007836:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800783a:	2b30      	cmp	r3, #48	@ 0x30
 800783c:	d014      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 800783e:	2b30      	cmp	r3, #48	@ 0x30
 8007840:	d80e      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8007842:	2b20      	cmp	r3, #32
 8007844:	d012      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8007846:	2b20      	cmp	r3, #32
 8007848:	d80a      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d010      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800784e:	2b10      	cmp	r3, #16
 8007850:	d106      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007852:	4b5e      	ldr	r3, [pc, #376]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007856:	4a5d      	ldr	r2, [pc, #372]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800785c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800785e:	e008      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007866:	e004      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007868:	bf00      	nop
 800786a:	e002      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 800786c:	bf00      	nop
 800786e:	e000      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8007870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007872:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10d      	bne.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800787a:	4b54      	ldr	r3, [pc, #336]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800787c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007880:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007888:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800788c:	4a4f      	ldr	r2, [pc, #316]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800788e:	430b      	orrs	r3, r1
 8007890:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007894:	e003      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007896:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800789a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800789e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80078aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80078ac:	2300      	movs	r3, #0
 80078ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80078b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80078b4:	460b      	mov	r3, r1
 80078b6:	4313      	orrs	r3, r2
 80078b8:	d033      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80078ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 80078c6:	2b40      	cmp	r3, #64	@ 0x40
 80078c8:	d007      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80078ca:	e010      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078cc:	4b3f      	ldr	r3, [pc, #252]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	4a3e      	ldr	r2, [pc, #248]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80078d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80078d8:	e00d      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078de:	3308      	adds	r3, #8
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 facb 	bl	8007e7c <RCCEx_PLL2_Config>
 80078e6:	4603      	mov	r3, r0
 80078e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80078ec:	e003      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80078f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10d      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80078fe:	4b33      	ldr	r3, [pc, #204]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007900:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007904:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007908:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800790c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007910:	4a2e      	ldr	r2, [pc, #184]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007912:	430b      	orrs	r3, r1
 8007914:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007918:	e003      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800791a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800791e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800792e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007930:	2300      	movs	r3, #0
 8007932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007934:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007938:	460b      	mov	r3, r1
 800793a:	4313      	orrs	r3, r2
 800793c:	d04c      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800793e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007942:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007946:	2b04      	cmp	r3, #4
 8007948:	d827      	bhi.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800794a:	a201      	add	r2, pc, #4	@ (adr r2, 8007950 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	08007965 	.word	0x08007965
 8007954:	08007973 	.word	0x08007973
 8007958:	08007987 	.word	0x08007987
 800795c:	080079a3 	.word	0x080079a3
 8007960:	080079a3 	.word	0x080079a3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007964:	4b19      	ldr	r3, [pc, #100]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8007966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007968:	4a18      	ldr	r2, [pc, #96]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800796a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800796e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007970:	e018      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007976:	3308      	adds	r3, #8
 8007978:	4618      	mov	r0, r3
 800797a:	f000 fa7f 	bl	8007e7c <RCCEx_PLL2_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007984:	e00e      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800798a:	3330      	adds	r3, #48	@ 0x30
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fb0d 	bl	8007fac <RCCEx_PLL3_Config>
 8007992:	4603      	mov	r3, r0
 8007994:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007998:	e004      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80079a0:	e000      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 80079a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d111      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80079ac:	4b07      	ldr	r3, [pc, #28]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80079b2:	f023 0107 	bic.w	r1, r3, #7
 80079b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80079be:	4a03      	ldr	r2, [pc, #12]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80079c0:	430b      	orrs	r3, r1
 80079c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80079c6:	e007      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80079c8:	44020800 	.word	0x44020800
 80079cc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80079d4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80079d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80079e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80079e6:	2300      	movs	r3, #0
 80079e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80079ee:	460b      	mov	r3, r1
 80079f0:	4313      	orrs	r3, r2
 80079f2:	f000 8081 	beq.w	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80079f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d85f      	bhi.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8007a02:	a201      	add	r2, pc, #4	@ (adr r2, 8007a08 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007a8d 	.word	0x08007a8d
 8007a0c:	08007ac3 	.word	0x08007ac3
 8007a10:	08007ac3 	.word	0x08007ac3
 8007a14:	08007ac3 	.word	0x08007ac3
 8007a18:	08007ac3 	.word	0x08007ac3
 8007a1c:	08007ac3 	.word	0x08007ac3
 8007a20:	08007ac3 	.word	0x08007ac3
 8007a24:	08007ac3 	.word	0x08007ac3
 8007a28:	08007a9b 	.word	0x08007a9b
 8007a2c:	08007ac3 	.word	0x08007ac3
 8007a30:	08007ac3 	.word	0x08007ac3
 8007a34:	08007ac3 	.word	0x08007ac3
 8007a38:	08007ac3 	.word	0x08007ac3
 8007a3c:	08007ac3 	.word	0x08007ac3
 8007a40:	08007ac3 	.word	0x08007ac3
 8007a44:	08007ac3 	.word	0x08007ac3
 8007a48:	08007aaf 	.word	0x08007aaf
 8007a4c:	08007ac3 	.word	0x08007ac3
 8007a50:	08007ac3 	.word	0x08007ac3
 8007a54:	08007ac3 	.word	0x08007ac3
 8007a58:	08007ac3 	.word	0x08007ac3
 8007a5c:	08007ac3 	.word	0x08007ac3
 8007a60:	08007ac3 	.word	0x08007ac3
 8007a64:	08007ac3 	.word	0x08007ac3
 8007a68:	08007acb 	.word	0x08007acb
 8007a6c:	08007ac3 	.word	0x08007ac3
 8007a70:	08007ac3 	.word	0x08007ac3
 8007a74:	08007ac3 	.word	0x08007ac3
 8007a78:	08007ac3 	.word	0x08007ac3
 8007a7c:	08007ac3 	.word	0x08007ac3
 8007a80:	08007ac3 	.word	0x08007ac3
 8007a84:	08007ac3 	.word	0x08007ac3
 8007a88:	08007acb 	.word	0x08007acb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a8c:	4bb9      	ldr	r3, [pc, #740]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a90:	4ab8      	ldr	r2, [pc, #736]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a96:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007a98:	e018      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 f9eb 	bl	8007e7c <RCCEx_PLL2_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007aac:	e00e      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ab2:	3330      	adds	r3, #48	@ 0x30
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fa79 	bl	8007fac <RCCEx_PLL3_Config>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007ac0:	e004      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ac8:	e000      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8007aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007acc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10d      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007ad4:	4ba7      	ldr	r3, [pc, #668]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ada:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ae2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007ae6:	4aa3      	ldr	r2, [pc, #652]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007ae8:	430b      	orrs	r3, r1
 8007aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007aee:	e003      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007af4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007af8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b06:	2300      	movs	r3, #0
 8007b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b0a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4313      	orrs	r3, r2
 8007b12:	d04e      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007b14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b20:	d02e      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b26:	d827      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007b28:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b2a:	d02b      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8007b2c:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b2e:	d823      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007b30:	2b80      	cmp	r3, #128	@ 0x80
 8007b32:	d017      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8007b34:	2b80      	cmp	r3, #128	@ 0x80
 8007b36:	d81f      	bhi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d002      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8007b3c:	2b40      	cmp	r3, #64	@ 0x40
 8007b3e:	d007      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8007b40:	e01a      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b42:	4b8c      	ldr	r3, [pc, #560]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b46:	4a8b      	ldr	r2, [pc, #556]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b4c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007b4e:	e01a      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b54:	3308      	adds	r3, #8
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f990 	bl	8007e7c <RCCEx_PLL2_Config>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007b62:	e010      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b68:	3330      	adds	r3, #48	@ 0x30
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fa1e 	bl	8007fac <RCCEx_PLL3_Config>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007b76:	e006      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007b7e:	e002      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007b80:	bf00      	nop
 8007b82:	e000      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8007b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b86:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10d      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007b8e:	4b79      	ldr	r3, [pc, #484]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b94:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8007b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ba0:	4974      	ldr	r1, [pc, #464]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007ba8:	e003      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007baa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007bae:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007bbe:	623b      	str	r3, [r7, #32]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bc4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	d055      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007bd6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007bda:	d031      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8007bdc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007be0:	d82a      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007be6:	d02d      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8007be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bec:	d824      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007bee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007bf2:	d029      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8007bf4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007bf8:	d81e      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bfe:	d011      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8007c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c04:	d818      	bhi.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d020      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8007c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c0e:	d113      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c14:	3308      	adds	r3, #8
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 f930 	bl	8007e7c <RCCEx_PLL2_Config>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007c22:	e014      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c28:	3330      	adds	r3, #48	@ 0x30
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 f9be 	bl	8007fac <RCCEx_PLL3_Config>
 8007c30:	4603      	mov	r3, r0
 8007c32:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007c36:	e00a      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007c3e:	e006      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007c40:	bf00      	nop
 8007c42:	e004      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007c44:	bf00      	nop
 8007c46:	e002      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007c48:	bf00      	nop
 8007c4a:	e000      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8007c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10d      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007c56:	4b47      	ldr	r3, [pc, #284]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c5c:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8007c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c68:	4942      	ldr	r1, [pc, #264]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007c70:	e003      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c72:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007c76:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	2100      	movs	r1, #0
 8007c84:	61b9      	str	r1, [r7, #24]
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c90:	460b      	mov	r3, r1
 8007c92:	4313      	orrs	r3, r2
 8007c94:	d03c      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8007c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d81b      	bhi.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8007ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007ce3 	.word	0x08007ce3
 8007cac:	08007cb9 	.word	0x08007cb9
 8007cb0:	08007cc7 	.word	0x08007cc7
 8007cb4:	08007ce3 	.word	0x08007ce3
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cc2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007cc4:	e00e      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cca:	3308      	adds	r3, #8
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f8d5 	bl	8007e7c <RCCEx_PLL2_Config>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007cd8:	e004      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007ce0:	e000      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8007ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10d      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007cec:	4b21      	ldr	r3, [pc, #132]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007cee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cf2:	f023 0203 	bic.w	r2, r3, #3
 8007cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007cfe:	491d      	ldr	r1, [pc, #116]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007d06:	e003      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d08:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d0c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	6139      	str	r1, [r7, #16]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d26:	460b      	mov	r3, r1
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	d03c      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007d2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d38:	d00e      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d3e:	d815      	bhi.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d019      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8007d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d48:	d110      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4e:	4a09      	ldr	r2, [pc, #36]	@ (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8007d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d54:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007d56:	e010      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 f88c 	bl	8007e7c <RCCEx_PLL2_Config>
 8007d64:	4603      	mov	r3, r0
 8007d66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007d6a:	e006      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007d72:	e002      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8007d74:	44020c00 	.word	0x44020c00
        break;
 8007d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10d      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007d82:	4b3d      	ldr	r3, [pc, #244]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007d84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d94:	4938      	ldr	r1, [pc, #224]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007d9c:	e003      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007da2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	2100      	movs	r1, #0
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	f003 0310 	and.w	r3, r3, #16
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	d038      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007dca:	2b30      	cmp	r3, #48	@ 0x30
 8007dcc:	d01b      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8007dce:	2b30      	cmp	r3, #48	@ 0x30
 8007dd0:	d815      	bhi.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8007dd2:	2b10      	cmp	r3, #16
 8007dd4:	d002      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8007dd6:	2b20      	cmp	r3, #32
 8007dd8:	d007      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8007dda:	e010      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ddc:	4b26      	ldr	r3, [pc, #152]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de0:	4a25      	ldr	r2, [pc, #148]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007de6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007de8:	e00e      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dee:	3330      	adds	r3, #48	@ 0x30
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 f8db 	bl	8007fac <RCCEx_PLL3_Config>
 8007df6:	4603      	mov	r3, r0
 8007df8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007dfc:	e004      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8007e04:	e000      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8007e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e08:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10d      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007e10:	4b19      	ldr	r3, [pc, #100]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007e12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e16:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007e22:	4915      	ldr	r1, [pc, #84]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007e2a:	e003      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8007e30:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	6039      	str	r1, [r7, #0]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	607b      	str	r3, [r7, #4]
 8007e46:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	d00c      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8007e50:	4b09      	ldr	r3, [pc, #36]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007e62:	4905      	ldr	r1, [pc, #20]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8007e6a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	37e8      	adds	r7, #232	@ 0xe8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e78:	44020c00 	.word	0x44020c00

08007e7c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007e84:	4b48      	ldr	r3, [pc, #288]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a47      	ldr	r2, [pc, #284]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007e8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e90:	f7f9 fd1c 	bl	80018cc <HAL_GetTick>
 8007e94:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e96:	e008      	b.n	8007eaa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e98:	f7f9 fd18 	bl	80018cc <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e07a      	b.n	8007fa0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1f0      	bne.n	8007e98 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ebe:	f023 0303 	bic.w	r3, r3, #3
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6811      	ldr	r1, [r2, #0]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6852      	ldr	r2, [r2, #4]
 8007eca:	0212      	lsls	r2, r2, #8
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	4936      	ldr	r1, [pc, #216]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	025b      	lsls	r3, r3, #9
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	041b      	lsls	r3, r3, #16
 8007ef2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	061b      	lsls	r3, r3, #24
 8007f00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f04:	4928      	ldr	r1, [pc, #160]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007f0a:	4b27      	ldr	r3, [pc, #156]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0e:	f023 020c 	bic.w	r2, r3, #12
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	4924      	ldr	r1, [pc, #144]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007f1c:	4b22      	ldr	r3, [pc, #136]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f20:	f023 0220 	bic.w	r2, r3, #32
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	491f      	ldr	r1, [pc, #124]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f36:	491c      	ldr	r1, [pc, #112]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f40:	4a19      	ldr	r2, [pc, #100]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f42:	f023 0310 	bic.w	r3, r3, #16
 8007f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007f48:	4b17      	ldr	r3, [pc, #92]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f50:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6a12      	ldr	r2, [r2, #32]
 8007f58:	00d2      	lsls	r2, r2, #3
 8007f5a:	4913      	ldr	r1, [pc, #76]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007f60:	4b11      	ldr	r3, [pc, #68]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f64:	4a10      	ldr	r2, [pc, #64]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f66:	f043 0310 	orr.w	r3, r3, #16
 8007f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a0d      	ldr	r2, [pc, #52]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f78:	f7f9 fca8 	bl	80018cc <HAL_GetTick>
 8007f7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f7e:	e008      	b.n	8007f92 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f80:	f7f9 fca4 	bl	80018cc <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d901      	bls.n	8007f92 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e006      	b.n	8007fa0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f92:	4b05      	ldr	r3, [pc, #20]	@ (8007fa8 <RCCEx_PLL2_Config+0x12c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0f0      	beq.n	8007f80 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0

}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	44020c00 	.word	0x44020c00

08007fac <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007fb4:	4b48      	ldr	r3, [pc, #288]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a47      	ldr	r2, [pc, #284]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8007fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fbe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fc0:	f7f9 fc84 	bl	80018cc <HAL_GetTick>
 8007fc4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fc6:	e008      	b.n	8007fda <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007fc8:	f7f9 fc80 	bl	80018cc <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d901      	bls.n	8007fda <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e07a      	b.n	80080d0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fda:	4b3f      	ldr	r3, [pc, #252]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1f0      	bne.n	8007fc8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007fee:	f023 0303 	bic.w	r3, r3, #3
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6811      	ldr	r1, [r2, #0]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6852      	ldr	r2, [r2, #4]
 8007ffa:	0212      	lsls	r2, r2, #8
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	4936      	ldr	r1, [pc, #216]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8008000:	4313      	orrs	r3, r2
 8008002:	630b      	str	r3, [r1, #48]	@ 0x30
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	3b01      	subs	r3, #1
 800800a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	3b01      	subs	r3, #1
 8008014:	025b      	lsls	r3, r3, #9
 8008016:	b29b      	uxth	r3, r3
 8008018:	431a      	orrs	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	3b01      	subs	r3, #1
 8008020:	041b      	lsls	r3, r3, #16
 8008022:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008026:	431a      	orrs	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	3b01      	subs	r3, #1
 800802e:	061b      	lsls	r3, r3, #24
 8008030:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008034:	4928      	ldr	r1, [pc, #160]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8008036:	4313      	orrs	r3, r2
 8008038:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800803a:	4b27      	ldr	r3, [pc, #156]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 800803c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803e:	f023 020c 	bic.w	r2, r3, #12
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	4924      	ldr	r1, [pc, #144]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8008048:	4313      	orrs	r3, r2
 800804a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800804c:	4b22      	ldr	r3, [pc, #136]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 800804e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008050:	f023 0220 	bic.w	r2, r3, #32
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	491f      	ldr	r1, [pc, #124]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 800805a:	4313      	orrs	r3, r2
 800805c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800805e:	4b1e      	ldr	r3, [pc, #120]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8008060:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008066:	491c      	ldr	r1, [pc, #112]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8008068:	4313      	orrs	r3, r2
 800806a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800806c:	4b1a      	ldr	r3, [pc, #104]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 800806e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008070:	4a19      	ldr	r2, [pc, #100]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8008072:	f023 0310 	bic.w	r3, r3, #16
 8008076:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008078:	4b17      	ldr	r3, [pc, #92]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 800807a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800807c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008080:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	6a12      	ldr	r2, [r2, #32]
 8008088:	00d2      	lsls	r2, r2, #3
 800808a:	4913      	ldr	r1, [pc, #76]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 800808c:	4313      	orrs	r3, r2
 800808e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008090:	4b11      	ldr	r3, [pc, #68]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008094:	4a10      	ldr	r2, [pc, #64]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 8008096:	f043 0310 	orr.w	r3, r3, #16
 800809a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800809c:	4b0e      	ldr	r3, [pc, #56]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a0d      	ldr	r2, [pc, #52]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 80080a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80080a8:	f7f9 fc10 	bl	80018cc <HAL_GetTick>
 80080ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080ae:	e008      	b.n	80080c2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080b0:	f7f9 fc0c 	bl	80018cc <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d901      	bls.n	80080c2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e006      	b.n	80080d0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080c2:	4b05      	ldr	r3, [pc, #20]	@ (80080d8 <RCCEx_PLL3_Config+0x12c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0f0      	beq.n	80080b0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	44020c00 	.word	0x44020c00

080080dc <memset>:
 80080dc:	4402      	add	r2, r0
 80080de:	4603      	mov	r3, r0
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d100      	bne.n	80080e6 <memset+0xa>
 80080e4:	4770      	bx	lr
 80080e6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ea:	e7f9      	b.n	80080e0 <memset+0x4>

080080ec <__libc_init_array>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	4d0d      	ldr	r5, [pc, #52]	@ (8008124 <__libc_init_array+0x38>)
 80080f0:	2600      	movs	r6, #0
 80080f2:	4c0d      	ldr	r4, [pc, #52]	@ (8008128 <__libc_init_array+0x3c>)
 80080f4:	1b64      	subs	r4, r4, r5
 80080f6:	10a4      	asrs	r4, r4, #2
 80080f8:	42a6      	cmp	r6, r4
 80080fa:	d109      	bne.n	8008110 <__libc_init_array+0x24>
 80080fc:	4d0b      	ldr	r5, [pc, #44]	@ (800812c <__libc_init_array+0x40>)
 80080fe:	2600      	movs	r6, #0
 8008100:	4c0b      	ldr	r4, [pc, #44]	@ (8008130 <__libc_init_array+0x44>)
 8008102:	f000 f817 	bl	8008134 <_init>
 8008106:	1b64      	subs	r4, r4, r5
 8008108:	10a4      	asrs	r4, r4, #2
 800810a:	42a6      	cmp	r6, r4
 800810c:	d105      	bne.n	800811a <__libc_init_array+0x2e>
 800810e:	bd70      	pop	{r4, r5, r6, pc}
 8008110:	f855 3b04 	ldr.w	r3, [r5], #4
 8008114:	3601      	adds	r6, #1
 8008116:	4798      	blx	r3
 8008118:	e7ee      	b.n	80080f8 <__libc_init_array+0xc>
 800811a:	f855 3b04 	ldr.w	r3, [r5], #4
 800811e:	3601      	adds	r6, #1
 8008120:	4798      	blx	r3
 8008122:	e7f2      	b.n	800810a <__libc_init_array+0x1e>
 8008124:	0800816c 	.word	0x0800816c
 8008128:	0800816c 	.word	0x0800816c
 800812c:	0800816c 	.word	0x0800816c
 8008130:	08008170 	.word	0x08008170

08008134 <_init>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	bf00      	nop
 8008138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813a:	bc08      	pop	{r3}
 800813c:	469e      	mov	lr, r3
 800813e:	4770      	bx	lr

08008140 <_fini>:
 8008140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008142:	bf00      	nop
 8008144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008146:	bc08      	pop	{r3}
 8008148:	469e      	mov	lr, r3
 800814a:	4770      	bx	lr
